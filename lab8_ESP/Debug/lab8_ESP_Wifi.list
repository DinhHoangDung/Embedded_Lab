
lab8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dcc  08006dcc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dcc  08006dcc  00016dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dd0  08006dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000400  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000478  20000478  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020736  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042ea  00000000  00000000  000407de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00044ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  00046158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267e6  00000000  00000000  00047640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f1ea  00000000  00000000  0006de26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e015e  00000000  00000000  0008d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016d16e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006160  00000000  00000000  0016d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d38 	.word	0x08006d38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006d38 	.word	0x08006d38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b96e 	b.w	80008dc <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	468c      	mov	ip, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	f040 8083 	bne.w	800072e <__udivmoddi4+0x116>
 8000628:	428a      	cmp	r2, r1
 800062a:	4617      	mov	r7, r2
 800062c:	d947      	bls.n	80006be <__udivmoddi4+0xa6>
 800062e:	fab2 f282 	clz	r2, r2
 8000632:	b142      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000634:	f1c2 0020 	rsb	r0, r2, #32
 8000638:	fa24 f000 	lsr.w	r0, r4, r0
 800063c:	4091      	lsls	r1, r2
 800063e:	4097      	lsls	r7, r2
 8000640:	ea40 0c01 	orr.w	ip, r0, r1
 8000644:	4094      	lsls	r4, r2
 8000646:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800064a:	0c23      	lsrs	r3, r4, #16
 800064c:	fbbc f6f8 	udiv	r6, ip, r8
 8000650:	fa1f fe87 	uxth.w	lr, r7
 8000654:	fb08 c116 	mls	r1, r8, r6, ip
 8000658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065c:	fb06 f10e 	mul.w	r1, r6, lr
 8000660:	4299      	cmp	r1, r3
 8000662:	d909      	bls.n	8000678 <__udivmoddi4+0x60>
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	f106 30ff 	add.w	r0, r6, #4294967295
 800066a:	f080 8119 	bcs.w	80008a0 <__udivmoddi4+0x288>
 800066e:	4299      	cmp	r1, r3
 8000670:	f240 8116 	bls.w	80008a0 <__udivmoddi4+0x288>
 8000674:	3e02      	subs	r6, #2
 8000676:	443b      	add	r3, r7
 8000678:	1a5b      	subs	r3, r3, r1
 800067a:	b2a4      	uxth	r4, r4
 800067c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000680:	fb08 3310 	mls	r3, r8, r0, r3
 8000684:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000688:	fb00 fe0e 	mul.w	lr, r0, lr
 800068c:	45a6      	cmp	lr, r4
 800068e:	d909      	bls.n	80006a4 <__udivmoddi4+0x8c>
 8000690:	193c      	adds	r4, r7, r4
 8000692:	f100 33ff 	add.w	r3, r0, #4294967295
 8000696:	f080 8105 	bcs.w	80008a4 <__udivmoddi4+0x28c>
 800069a:	45a6      	cmp	lr, r4
 800069c:	f240 8102 	bls.w	80008a4 <__udivmoddi4+0x28c>
 80006a0:	3802      	subs	r0, #2
 80006a2:	443c      	add	r4, r7
 80006a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006a8:	eba4 040e 	sub.w	r4, r4, lr
 80006ac:	2600      	movs	r6, #0
 80006ae:	b11d      	cbz	r5, 80006b8 <__udivmoddi4+0xa0>
 80006b0:	40d4      	lsrs	r4, r2
 80006b2:	2300      	movs	r3, #0
 80006b4:	e9c5 4300 	strd	r4, r3, [r5]
 80006b8:	4631      	mov	r1, r6
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	b902      	cbnz	r2, 80006c2 <__udivmoddi4+0xaa>
 80006c0:	deff      	udf	#255	; 0xff
 80006c2:	fab2 f282 	clz	r2, r2
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d150      	bne.n	800076c <__udivmoddi4+0x154>
 80006ca:	1bcb      	subs	r3, r1, r7
 80006cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006d0:	fa1f f887 	uxth.w	r8, r7
 80006d4:	2601      	movs	r6, #1
 80006d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006da:	0c21      	lsrs	r1, r4, #16
 80006dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80006e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e4:	fb08 f30c 	mul.w	r3, r8, ip
 80006e8:	428b      	cmp	r3, r1
 80006ea:	d907      	bls.n	80006fc <__udivmoddi4+0xe4>
 80006ec:	1879      	adds	r1, r7, r1
 80006ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0xe2>
 80006f4:	428b      	cmp	r3, r1
 80006f6:	f200 80e9 	bhi.w	80008cc <__udivmoddi4+0x2b4>
 80006fa:	4684      	mov	ip, r0
 80006fc:	1ac9      	subs	r1, r1, r3
 80006fe:	b2a3      	uxth	r3, r4
 8000700:	fbb1 f0fe 	udiv	r0, r1, lr
 8000704:	fb0e 1110 	mls	r1, lr, r0, r1
 8000708:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800070c:	fb08 f800 	mul.w	r8, r8, r0
 8000710:	45a0      	cmp	r8, r4
 8000712:	d907      	bls.n	8000724 <__udivmoddi4+0x10c>
 8000714:	193c      	adds	r4, r7, r4
 8000716:	f100 33ff 	add.w	r3, r0, #4294967295
 800071a:	d202      	bcs.n	8000722 <__udivmoddi4+0x10a>
 800071c:	45a0      	cmp	r8, r4
 800071e:	f200 80d9 	bhi.w	80008d4 <__udivmoddi4+0x2bc>
 8000722:	4618      	mov	r0, r3
 8000724:	eba4 0408 	sub.w	r4, r4, r8
 8000728:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800072c:	e7bf      	b.n	80006ae <__udivmoddi4+0x96>
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0x12e>
 8000732:	2d00      	cmp	r5, #0
 8000734:	f000 80b1 	beq.w	800089a <__udivmoddi4+0x282>
 8000738:	2600      	movs	r6, #0
 800073a:	e9c5 0100 	strd	r0, r1, [r5]
 800073e:	4630      	mov	r0, r6
 8000740:	4631      	mov	r1, r6
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f683 	clz	r6, r3
 800074a:	2e00      	cmp	r6, #0
 800074c:	d14a      	bne.n	80007e4 <__udivmoddi4+0x1cc>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0x140>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80b8 	bhi.w	80008c8 <__udivmoddi4+0x2b0>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0103 	sbc.w	r1, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	468c      	mov	ip, r1
 8000762:	2d00      	cmp	r5, #0
 8000764:	d0a8      	beq.n	80006b8 <__udivmoddi4+0xa0>
 8000766:	e9c5 4c00 	strd	r4, ip, [r5]
 800076a:	e7a5      	b.n	80006b8 <__udivmoddi4+0xa0>
 800076c:	f1c2 0320 	rsb	r3, r2, #32
 8000770:	fa20 f603 	lsr.w	r6, r0, r3
 8000774:	4097      	lsls	r7, r2
 8000776:	fa01 f002 	lsl.w	r0, r1, r2
 800077a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077e:	40d9      	lsrs	r1, r3
 8000780:	4330      	orrs	r0, r6
 8000782:	0c03      	lsrs	r3, r0, #16
 8000784:	fbb1 f6fe 	udiv	r6, r1, lr
 8000788:	fa1f f887 	uxth.w	r8, r7
 800078c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb06 f108 	mul.w	r1, r6, r8
 8000798:	4299      	cmp	r1, r3
 800079a:	fa04 f402 	lsl.w	r4, r4, r2
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x19c>
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007a6:	f080 808d 	bcs.w	80008c4 <__udivmoddi4+0x2ac>
 80007aa:	4299      	cmp	r1, r3
 80007ac:	f240 808a 	bls.w	80008c4 <__udivmoddi4+0x2ac>
 80007b0:	3e02      	subs	r6, #2
 80007b2:	443b      	add	r3, r7
 80007b4:	1a5b      	subs	r3, r3, r1
 80007b6:	b281      	uxth	r1, r0
 80007b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007c4:	fb00 f308 	mul.w	r3, r0, r8
 80007c8:	428b      	cmp	r3, r1
 80007ca:	d907      	bls.n	80007dc <__udivmoddi4+0x1c4>
 80007cc:	1879      	adds	r1, r7, r1
 80007ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80007d2:	d273      	bcs.n	80008bc <__udivmoddi4+0x2a4>
 80007d4:	428b      	cmp	r3, r1
 80007d6:	d971      	bls.n	80008bc <__udivmoddi4+0x2a4>
 80007d8:	3802      	subs	r0, #2
 80007da:	4439      	add	r1, r7
 80007dc:	1acb      	subs	r3, r1, r3
 80007de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80007e2:	e778      	b.n	80006d6 <__udivmoddi4+0xbe>
 80007e4:	f1c6 0c20 	rsb	ip, r6, #32
 80007e8:	fa03 f406 	lsl.w	r4, r3, r6
 80007ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80007f0:	431c      	orrs	r4, r3
 80007f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80007f6:	fa01 f306 	lsl.w	r3, r1, r6
 80007fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80007fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000802:	431f      	orrs	r7, r3
 8000804:	0c3b      	lsrs	r3, r7, #16
 8000806:	fbb1 f9fe 	udiv	r9, r1, lr
 800080a:	fa1f f884 	uxth.w	r8, r4
 800080e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000812:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000816:	fb09 fa08 	mul.w	sl, r9, r8
 800081a:	458a      	cmp	sl, r1
 800081c:	fa02 f206 	lsl.w	r2, r2, r6
 8000820:	fa00 f306 	lsl.w	r3, r0, r6
 8000824:	d908      	bls.n	8000838 <__udivmoddi4+0x220>
 8000826:	1861      	adds	r1, r4, r1
 8000828:	f109 30ff 	add.w	r0, r9, #4294967295
 800082c:	d248      	bcs.n	80008c0 <__udivmoddi4+0x2a8>
 800082e:	458a      	cmp	sl, r1
 8000830:	d946      	bls.n	80008c0 <__udivmoddi4+0x2a8>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4421      	add	r1, r4
 8000838:	eba1 010a 	sub.w	r1, r1, sl
 800083c:	b2bf      	uxth	r7, r7
 800083e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000842:	fb0e 1110 	mls	r1, lr, r0, r1
 8000846:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800084a:	fb00 f808 	mul.w	r8, r0, r8
 800084e:	45b8      	cmp	r8, r7
 8000850:	d907      	bls.n	8000862 <__udivmoddi4+0x24a>
 8000852:	19e7      	adds	r7, r4, r7
 8000854:	f100 31ff 	add.w	r1, r0, #4294967295
 8000858:	d22e      	bcs.n	80008b8 <__udivmoddi4+0x2a0>
 800085a:	45b8      	cmp	r8, r7
 800085c:	d92c      	bls.n	80008b8 <__udivmoddi4+0x2a0>
 800085e:	3802      	subs	r0, #2
 8000860:	4427      	add	r7, r4
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	eba7 0708 	sub.w	r7, r7, r8
 800086a:	fba0 8902 	umull	r8, r9, r0, r2
 800086e:	454f      	cmp	r7, r9
 8000870:	46c6      	mov	lr, r8
 8000872:	4649      	mov	r1, r9
 8000874:	d31a      	bcc.n	80008ac <__udivmoddi4+0x294>
 8000876:	d017      	beq.n	80008a8 <__udivmoddi4+0x290>
 8000878:	b15d      	cbz	r5, 8000892 <__udivmoddi4+0x27a>
 800087a:	ebb3 020e 	subs.w	r2, r3, lr
 800087e:	eb67 0701 	sbc.w	r7, r7, r1
 8000882:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000886:	40f2      	lsrs	r2, r6
 8000888:	ea4c 0202 	orr.w	r2, ip, r2
 800088c:	40f7      	lsrs	r7, r6
 800088e:	e9c5 2700 	strd	r2, r7, [r5]
 8000892:	2600      	movs	r6, #0
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	462e      	mov	r6, r5
 800089c:	4628      	mov	r0, r5
 800089e:	e70b      	b.n	80006b8 <__udivmoddi4+0xa0>
 80008a0:	4606      	mov	r6, r0
 80008a2:	e6e9      	b.n	8000678 <__udivmoddi4+0x60>
 80008a4:	4618      	mov	r0, r3
 80008a6:	e6fd      	b.n	80006a4 <__udivmoddi4+0x8c>
 80008a8:	4543      	cmp	r3, r8
 80008aa:	d2e5      	bcs.n	8000878 <__udivmoddi4+0x260>
 80008ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80008b0:	eb69 0104 	sbc.w	r1, r9, r4
 80008b4:	3801      	subs	r0, #1
 80008b6:	e7df      	b.n	8000878 <__udivmoddi4+0x260>
 80008b8:	4608      	mov	r0, r1
 80008ba:	e7d2      	b.n	8000862 <__udivmoddi4+0x24a>
 80008bc:	4660      	mov	r0, ip
 80008be:	e78d      	b.n	80007dc <__udivmoddi4+0x1c4>
 80008c0:	4681      	mov	r9, r0
 80008c2:	e7b9      	b.n	8000838 <__udivmoddi4+0x220>
 80008c4:	4666      	mov	r6, ip
 80008c6:	e775      	b.n	80007b4 <__udivmoddi4+0x19c>
 80008c8:	4630      	mov	r0, r6
 80008ca:	e74a      	b.n	8000762 <__udivmoddi4+0x14a>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	4439      	add	r1, r7
 80008d2:	e713      	b.n	80006fc <__udivmoddi4+0xe4>
 80008d4:	3802      	subs	r0, #2
 80008d6:	443c      	add	r4, r7
 80008d8:	e724      	b.n	8000724 <__udivmoddi4+0x10c>
 80008da:	bf00      	nop

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f2:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <MX_ADC1_Init+0x108>)
 80008f4:	4a3d      	ldr	r2, [pc, #244]	; (80009ec <MX_ADC1_Init+0x10c>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008f8:	4b3b      	ldr	r3, [pc, #236]	; (80009e8 <MX_ADC1_Init+0x108>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000906:	2201      	movs	r2, #1
 8000908:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800090a:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <MX_ADC1_Init+0x108>)
 800090c:	2200      	movs	r2, #0
 800090e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_ADC1_Init+0x108>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800091e:	4b32      	ldr	r3, [pc, #200]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <MX_ADC1_Init+0x110>)
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000924:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <MX_ADC1_Init+0x108>)
 800092c:	2205      	movs	r2, #5
 800092e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_ADC1_Init+0x108>)
 800093a:	2201      	movs	r2, #1
 800093c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800093e:	482a      	ldr	r0, [pc, #168]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000940:	f001 fbe6 	bl	8002110 <HAL_ADC_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 fe99 	bl	8001680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800094e:	2308      	movs	r3, #8
 8000950:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	4619      	mov	r1, r3
 800095e:	4822      	ldr	r0, [pc, #136]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000960:	f001 fc1a 	bl	8002198 <HAL_ADC_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800096a:	f000 fe89 	bl	8001680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800096e:	2309      	movs	r3, #9
 8000970:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	; (80009e8 <MX_ADC1_Init+0x108>)
 800097c:	f001 fc0c 	bl	8002198 <HAL_ADC_ConfigChannel>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000986:	f000 fe7b 	bl	8001680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800098a:	230a      	movs	r3, #10
 800098c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800098e:	2303      	movs	r3, #3
 8000990:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	4619      	mov	r1, r3
 8000996:	4814      	ldr	r0, [pc, #80]	; (80009e8 <MX_ADC1_Init+0x108>)
 8000998:	f001 fbfe 	bl	8002198 <HAL_ADC_ConfigChannel>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009a2:	f000 fe6d 	bl	8001680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009a6:	230b      	movs	r3, #11
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	4619      	mov	r1, r3
 80009b2:	480d      	ldr	r0, [pc, #52]	; (80009e8 <MX_ADC1_Init+0x108>)
 80009b4:	f001 fbf0 	bl	8002198 <HAL_ADC_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80009be:	f000 fe5f 	bl	8001680 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009c2:	230c      	movs	r3, #12
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009c6:	2305      	movs	r3, #5
 80009c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ca:	463b      	mov	r3, r7
 80009cc:	4619      	mov	r1, r3
 80009ce:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_ADC1_Init+0x108>)
 80009d0:	f001 fbe2 	bl	8002198 <HAL_ADC_ConfigChannel>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80009da:	f000 fe51 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200000b4 	.word	0x200000b4
 80009ec:	40012000 	.word	0x40012000
 80009f0:	0f000001 	.word	0x0f000001

080009f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a3c      	ldr	r2, [pc, #240]	; (8000b04 <HAL_ADC_MspInit+0x110>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d171      	bne.n	8000afa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a3a      	ldr	r2, [pc, #232]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a33      	ldr	r2, [pc, #204]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_ADC_MspInit+0x114>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4823      	ldr	r0, [pc, #140]	; (8000b0c <HAL_ADC_MspInit+0x118>)
 8000a7e:	f002 fa37 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a82:	2303      	movs	r3, #3
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	481e      	ldr	r0, [pc, #120]	; (8000b10 <HAL_ADC_MspInit+0x11c>)
 8000a96:	f002 fa2b 	bl	8002ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000a9c:	4a1e      	ldr	r2, [pc, #120]	; (8000b18 <HAL_ADC_MspInit+0x124>)
 8000a9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa6:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000ab4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000ae0:	f001 fe8a 	bl	80027f8 <HAL_DMA_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000aea:	f000 fdc9 	bl	8001680 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000af2:	639a      	str	r2, [r3, #56]	; 0x38
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <HAL_ADC_MspInit+0x120>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40012000 	.word	0x40012000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020400 	.word	0x40020400
 8000b14:	200000fc 	.word	0x200000fc
 8000b18:	40026410 	.word	0x40026410

08000b1c <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2108      	movs	r1, #8
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <button_init+0x14>)
 8000b26:	f002 fb7f 	bl	8003228 <HAL_GPIO_WritePin>
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020c00 	.word	0x40020c00

08000b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_DMA_Init+0x3c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2038      	movs	r0, #56	; 0x38
 8000b5c:	f001 fe15 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b60:	2038      	movs	r0, #56	; 0x38
 8000b62:	f001 fe2e 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000ba2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ba6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000baa:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <MX_FSMC_Init+0xf0>)
 8000bac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000bae:	4b2c      	ldr	r3, [pc, #176]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000bd8:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000c06:	230f      	movs	r3, #15
 8000c08:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000c0e:	233c      	movs	r3, #60	; 0x3c
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c16:	2310      	movs	r3, #16
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c1a:	2311      	movs	r3, #17
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000c22:	2308      	movs	r3, #8
 8000c24:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c26:	230f      	movs	r3, #15
 8000c28:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c32:	2310      	movs	r3, #16
 8000c34:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c36:	2311      	movs	r3, #17
 8000c38:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000c3e:	463a      	mov	r2, r7
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <MX_FSMC_Init+0xec>)
 8000c48:	f003 fb50 	bl	80042ec <HAL_SRAM_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000c52:	f000 fd15 	bl	8001680 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	; 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000015c 	.word	0x2000015c
 8000c64:	a0000104 	.word	0xa0000104

08000c68 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_FSMC_MspInit+0x88>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d131      	bne.n	8000ce8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <HAL_FSMC_MspInit+0x88>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_FSMC_MspInit+0x8c>)
 8000c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <HAL_FSMC_MspInit+0x8c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6393      	str	r3, [r2, #56]	; 0x38
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_FSMC_MspInit+0x8c>)
 8000c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000ca6:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000caa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <HAL_FSMC_MspInit+0x90>)
 8000cc2:	f002 f915 	bl	8002ef0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000cc6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000cca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cd8:	230c      	movs	r3, #12
 8000cda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <HAL_FSMC_MspInit+0x94>)
 8000ce2:	f002 f905 	bl	8002ef0 <HAL_GPIO_Init>
 8000ce6:	e000      	b.n	8000cea <HAL_FSMC_MspInit+0x82>
    return;
 8000ce8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000094 	.word	0x20000094
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d08:	f7ff ffae 	bl	8000c68 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
 8000d2e:	4b8f      	ldr	r3, [pc, #572]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a8e      	ldr	r2, [pc, #568]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b8c      	ldr	r3, [pc, #560]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	4b88      	ldr	r3, [pc, #544]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a87      	ldr	r2, [pc, #540]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b85      	ldr	r3, [pc, #532]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	4b81      	ldr	r3, [pc, #516]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a80      	ldr	r2, [pc, #512]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b7e      	ldr	r3, [pc, #504]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	4b7a      	ldr	r3, [pc, #488]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a79      	ldr	r2, [pc, #484]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b77      	ldr	r3, [pc, #476]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b73      	ldr	r3, [pc, #460]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a72      	ldr	r2, [pc, #456]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b6c      	ldr	r3, [pc, #432]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b69      	ldr	r3, [pc, #420]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	4b65      	ldr	r3, [pc, #404]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a64      	ldr	r2, [pc, #400]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b62      	ldr	r3, [pc, #392]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b5e      	ldr	r3, [pc, #376]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a5d      	ldr	r2, [pc, #372]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <MX_GPIO_Init+0x258>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2170      	movs	r1, #112	; 0x70
 8000e0e:	4858      	ldr	r0, [pc, #352]	; (8000f70 <MX_GPIO_Init+0x25c>)
 8000e10:	f002 fa0a 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000e1a:	4856      	ldr	r0, [pc, #344]	; (8000f74 <MX_GPIO_Init+0x260>)
 8000e1c:	f002 fa04 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e26:	4854      	ldr	r0, [pc, #336]	; (8000f78 <MX_GPIO_Init+0x264>)
 8000e28:	f002 f9fe 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000e32:	4852      	ldr	r0, [pc, #328]	; (8000f7c <MX_GPIO_Init+0x268>)
 8000e34:	f002 f9f8 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3e:	4850      	ldr	r0, [pc, #320]	; (8000f80 <MX_GPIO_Init+0x26c>)
 8000e40:	f002 f9f2 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2108      	movs	r1, #8
 8000e48:	484e      	ldr	r0, [pc, #312]	; (8000f84 <MX_GPIO_Init+0x270>)
 8000e4a:	f002 f9ed 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000e4e:	2370      	movs	r3, #112	; 0x70
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4842      	ldr	r0, [pc, #264]	; (8000f70 <MX_GPIO_Init+0x25c>)
 8000e66:	f002 f843 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000e6a:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e80:	4619      	mov	r1, r3
 8000e82:	483c      	ldr	r0, [pc, #240]	; (8000f74 <MX_GPIO_Init+0x260>)
 8000e84:	f002 f834 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4836      	ldr	r0, [pc, #216]	; (8000f78 <MX_GPIO_Init+0x264>)
 8000e9e:	f002 f827 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482f      	ldr	r0, [pc, #188]	; (8000f78 <MX_GPIO_Init+0x264>)
 8000ebc:	f002 f818 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ec0:	23c0      	movs	r3, #192	; 0xc0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	482b      	ldr	r0, [pc, #172]	; (8000f80 <MX_GPIO_Init+0x26c>)
 8000ed4:	f002 f80c 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000ed8:	2330      	movs	r3, #48	; 0x30
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <MX_GPIO_Init+0x260>)
 8000eec:	f002 f800 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000ef0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	481c      	ldr	r0, [pc, #112]	; (8000f7c <MX_GPIO_Init+0x268>)
 8000f0a:	f001 fff1 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000f0e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_GPIO_Init+0x260>)
 8000f24:	f001 ffe4 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <MX_GPIO_Init+0x26c>)
 8000f42:	f001 ffd5 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000f46:	2308      	movs	r3, #8
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <MX_GPIO_Init+0x270>)
 8000f5e:	f001 ffc7 	bl	8002ef0 <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40021400 	.word	0x40021400
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020c00 	.word	0x40020c00

08000f88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <MX_I2C1_Init+0x54>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x58>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc6:	f002 f949 	bl	800325c <HAL_I2C_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd0:	f000 fb56 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200001ac 	.word	0x200001ac
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	000186a0 	.word	0x000186a0

08000fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <HAL_I2C_MspInit+0x84>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12b      	bne.n	800105e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_I2C_MspInit+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001022:	23c0      	movs	r3, #192	; 0xc0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001026:	2312      	movs	r3, #18
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001032:	2304      	movs	r3, #4
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <HAL_I2C_MspInit+0x8c>)
 800103e:	f001 ff57 	bl	8002ef0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_I2C_MspInit+0x88>)
 800104c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_I2C_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40005400 	.word	0x40005400
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400

08001074 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <LCD_WR_REG+0x1c>)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	8013      	strh	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	600ffffe 	.word	0x600ffffe

08001094 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <LCD_WR_DATA+0x1c>)
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	8053      	strh	r3, [r2, #2]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	600ffffe 	.word	0x600ffffe

080010b4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <LCD_RD_DATA+0x20>)
 80010bc:	885b      	ldrh	r3, [r3, #2]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	b29b      	uxth	r3, r3
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	600ffffe 	.word	0x600ffffe

080010d8 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <lcd_SetDir+0x44>)
 80010f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80010f8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <lcd_SetDir+0x44>)
 80010fc:	22f0      	movs	r2, #240	; 0xf0
 80010fe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001100:	e006      	b.n	8001110 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <lcd_SetDir+0x44>)
 8001104:	22f0      	movs	r2, #240	; 0xf0
 8001106:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <lcd_SetDir+0x44>)
 800110a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800110e:	805a      	strh	r2, [r3, #2]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	20000200 	.word	0x20000200

08001120 <lcd_init>:


void lcd_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	48aa      	ldr	r0, [pc, #680]	; (80013d4 <lcd_init+0x2b4>)
 800112c:	f002 f87c 	bl	8003228 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f000 ffc8 	bl	80020c8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	48a5      	ldr	r0, [pc, #660]	; (80013d4 <lcd_init+0x2b4>)
 8001140:	f002 f872 	bl	8003228 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f000 ffbe 	bl	80020c8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ffc3 	bl	80010d8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001152:	20d3      	movs	r0, #211	; 0xd3
 8001154:	f7ff ff8e 	bl	8001074 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001158:	f7ff ffac 	bl	80010b4 <LCD_RD_DATA>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	4b9d      	ldr	r3, [pc, #628]	; (80013d8 <lcd_init+0x2b8>)
 8001162:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001164:	f7ff ffa6 	bl	80010b4 <LCD_RD_DATA>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <lcd_init+0x2b8>)
 800116e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001170:	f7ff ffa0 	bl	80010b4 <LCD_RD_DATA>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <lcd_init+0x2b8>)
 800117a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800117c:	4b96      	ldr	r3, [pc, #600]	; (80013d8 <lcd_init+0x2b8>)
 800117e:	889b      	ldrh	r3, [r3, #4]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b94      	ldr	r3, [pc, #592]	; (80013d8 <lcd_init+0x2b8>)
 8001186:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001188:	f7ff ff94 	bl	80010b4 <LCD_RD_DATA>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <lcd_init+0x2b8>)
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b8f      	ldr	r3, [pc, #572]	; (80013d8 <lcd_init+0x2b8>)
 800119a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800119c:	20cf      	movs	r0, #207	; 0xcf
 800119e:	f7ff ff69 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ff76 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80011a8:	20c1      	movs	r0, #193	; 0xc1
 80011aa:	f7ff ff73 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80011ae:	2030      	movs	r0, #48	; 0x30
 80011b0:	f7ff ff70 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80011b4:	20ed      	movs	r0, #237	; 0xed
 80011b6:	f7ff ff5d 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f7ff ff6a 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f7ff ff67 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80011c6:	2012      	movs	r0, #18
 80011c8:	f7ff ff64 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80011cc:	2081      	movs	r0, #129	; 0x81
 80011ce:	f7ff ff61 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80011d2:	20e8      	movs	r0, #232	; 0xe8
 80011d4:	f7ff ff4e 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80011d8:	2085      	movs	r0, #133	; 0x85
 80011da:	f7ff ff5b 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011de:	2010      	movs	r0, #16
 80011e0:	f7ff ff58 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011e4:	207a      	movs	r0, #122	; 0x7a
 80011e6:	f7ff ff55 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011ea:	20cb      	movs	r0, #203	; 0xcb
 80011ec:	f7ff ff42 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011f0:	2039      	movs	r0, #57	; 0x39
 80011f2:	f7ff ff4f 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011f6:	202c      	movs	r0, #44	; 0x2c
 80011f8:	f7ff ff4c 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ff49 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001202:	2034      	movs	r0, #52	; 0x34
 8001204:	f7ff ff46 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001208:	2002      	movs	r0, #2
 800120a:	f7ff ff43 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800120e:	20f7      	movs	r0, #247	; 0xf7
 8001210:	f7ff ff30 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001214:	2020      	movs	r0, #32
 8001216:	f7ff ff3d 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800121a:	20ea      	movs	r0, #234	; 0xea
 800121c:	f7ff ff2a 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff ff37 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001226:	2000      	movs	r0, #0
 8001228:	f7ff ff34 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800122c:	20c0      	movs	r0, #192	; 0xc0
 800122e:	f7ff ff21 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001232:	201b      	movs	r0, #27
 8001234:	f7ff ff2e 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001238:	20c1      	movs	r0, #193	; 0xc1
 800123a:	f7ff ff1b 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff ff28 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001244:	20c5      	movs	r0, #197	; 0xc5
 8001246:	f7ff ff15 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800124a:	2030      	movs	r0, #48	; 0x30
 800124c:	f7ff ff22 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001250:	2030      	movs	r0, #48	; 0x30
 8001252:	f7ff ff1f 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001256:	20c7      	movs	r0, #199	; 0xc7
 8001258:	f7ff ff0c 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800125c:	20b7      	movs	r0, #183	; 0xb7
 800125e:	f7ff ff19 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001262:	2036      	movs	r0, #54	; 0x36
 8001264:	f7ff ff06 	bl	8001074 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001268:	2008      	movs	r0, #8
 800126a:	f7ff ff13 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800126e:	203a      	movs	r0, #58	; 0x3a
 8001270:	f7ff ff00 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001274:	2055      	movs	r0, #85	; 0x55
 8001276:	f7ff ff0d 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800127a:	20b1      	movs	r0, #177	; 0xb1
 800127c:	f7ff fefa 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff07 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001286:	201a      	movs	r0, #26
 8001288:	f7ff ff04 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800128c:	20b6      	movs	r0, #182	; 0xb6
 800128e:	f7ff fef1 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001292:	200a      	movs	r0, #10
 8001294:	f7ff fefe 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001298:	20a2      	movs	r0, #162	; 0xa2
 800129a:	f7ff fefb 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800129e:	20f2      	movs	r0, #242	; 0xf2
 80012a0:	f7ff fee8 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f7ff fef5 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80012aa:	2026      	movs	r0, #38	; 0x26
 80012ac:	f7ff fee2 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff feef 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80012b6:	20e0      	movs	r0, #224	; 0xe0
 80012b8:	f7ff fedc 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80012bc:	200f      	movs	r0, #15
 80012be:	f7ff fee9 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80012c2:	202a      	movs	r0, #42	; 0x2a
 80012c4:	f7ff fee6 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80012c8:	2028      	movs	r0, #40	; 0x28
 80012ca:	f7ff fee3 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012ce:	2008      	movs	r0, #8
 80012d0:	f7ff fee0 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80012d4:	200e      	movs	r0, #14
 80012d6:	f7ff fedd 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80012da:	2008      	movs	r0, #8
 80012dc:	f7ff feda 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012e0:	2054      	movs	r0, #84	; 0x54
 80012e2:	f7ff fed7 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012e6:	20a9      	movs	r0, #169	; 0xa9
 80012e8:	f7ff fed4 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012ec:	2043      	movs	r0, #67	; 0x43
 80012ee:	f7ff fed1 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f7ff fece 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012f8:	200f      	movs	r0, #15
 80012fa:	f7ff fecb 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fe:	2000      	movs	r0, #0
 8001300:	f7ff fec8 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fec5 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fec2 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff febf 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001316:	20e1      	movs	r0, #225	; 0xe1
 8001318:	f7ff feac 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff feb9 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001322:	2015      	movs	r0, #21
 8001324:	f7ff feb6 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001328:	2017      	movs	r0, #23
 800132a:	f7ff feb3 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800132e:	2007      	movs	r0, #7
 8001330:	f7ff feb0 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001334:	2011      	movs	r0, #17
 8001336:	f7ff fead 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800133a:	2006      	movs	r0, #6
 800133c:	f7ff feaa 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001340:	202b      	movs	r0, #43	; 0x2b
 8001342:	f7ff fea7 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001346:	2056      	movs	r0, #86	; 0x56
 8001348:	f7ff fea4 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800134c:	203c      	movs	r0, #60	; 0x3c
 800134e:	f7ff fea1 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001352:	2005      	movs	r0, #5
 8001354:	f7ff fe9e 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001358:	2010      	movs	r0, #16
 800135a:	f7ff fe9b 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800135e:	200f      	movs	r0, #15
 8001360:	f7ff fe98 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001364:	203f      	movs	r0, #63	; 0x3f
 8001366:	f7ff fe95 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800136a:	203f      	movs	r0, #63	; 0x3f
 800136c:	f7ff fe92 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001370:	200f      	movs	r0, #15
 8001372:	f7ff fe8f 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001376:	202b      	movs	r0, #43	; 0x2b
 8001378:	f7ff fe7c 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fe89 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff fe86 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff fe83 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800138e:	203f      	movs	r0, #63	; 0x3f
 8001390:	f7ff fe80 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001394:	202a      	movs	r0, #42	; 0x2a
 8001396:	f7ff fe6d 	bl	8001074 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f7ff fe7a 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fe77 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fe74 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80013ac:	20ef      	movs	r0, #239	; 0xef
 80013ae:	f7ff fe71 	bl	8001094 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80013b2:	2011      	movs	r0, #17
 80013b4:	f7ff fe5e 	bl	8001074 <LCD_WR_REG>
	HAL_Delay(120);
 80013b8:	2078      	movs	r0, #120	; 0x78
 80013ba:	f000 fe85 	bl	80020c8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80013be:	2029      	movs	r0, #41	; 0x29
 80013c0:	f7ff fe58 	bl	8001074 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <lcd_init+0x2bc>)
 80013cc:	f001 ff2c 	bl	8003228 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40020800 	.word	0x40020800
 80013d8:	20000200 	.word	0x20000200
 80013dc:	40020000 	.word	0x40020000

080013e0 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <led7_Scan+0x104>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <led7_Scan+0x104>)
 80013ee:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80013f0:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <led7_Scan+0x108>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <led7_Scan+0x10c>)
 80013f6:	5cd3      	ldrb	r3, [r2, r3]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b39      	ldr	r3, [pc, #228]	; (80014e4 <led7_Scan+0x104>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b21b      	sxth	r3, r3
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <led7_Scan+0x104>)
 800140a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <led7_Scan+0x108>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d847      	bhi.n	80014a4 <led7_Scan+0xc4>
 8001414:	a201      	add	r2, pc, #4	; (adr r2, 800141c <led7_Scan+0x3c>)
 8001416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141a:	bf00      	nop
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800144b 	.word	0x0800144b
 8001424:	08001469 	.word	0x08001469
 8001428:	08001487 	.word	0x08001487
	case 0:
		spi_buffer |= 0x00b0;
 800142c:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <led7_Scan+0x104>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <led7_Scan+0x104>)
 8001438:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800143a:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <led7_Scan+0x104>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <led7_Scan+0x104>)
 8001446:	801a      	strh	r2, [r3, #0]
		break;
 8001448:	e02d      	b.n	80014a6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <led7_Scan+0x104>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <led7_Scan+0x104>)
 8001456:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <led7_Scan+0x104>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	f023 0320 	bic.w	r3, r3, #32
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <led7_Scan+0x104>)
 8001464:	801a      	strh	r2, [r3, #0]
		break;
 8001466:	e01e      	b.n	80014a6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <led7_Scan+0x104>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <led7_Scan+0x104>)
 8001474:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <led7_Scan+0x104>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	f023 0310 	bic.w	r3, r3, #16
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <led7_Scan+0x104>)
 8001482:	801a      	strh	r2, [r3, #0]
		break;
 8001484:	e00f      	b.n	80014a6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <led7_Scan+0x104>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <led7_Scan+0x104>)
 8001492:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <led7_Scan+0x104>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <led7_Scan+0x104>)
 80014a0:	801a      	strh	r2, [r3, #0]
		break;
 80014a2:	e000      	b.n	80014a6 <led7_Scan+0xc6>
	default:
		break;
 80014a4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <led7_Scan+0x108>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	425a      	negs	r2, r3
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	bf58      	it	pl
 80014b8:	4253      	negpl	r3, r2
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <led7_Scan+0x108>)
 80014bc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <led7_Scan+0x110>)
 80014c4:	f001 feb0 	bl	8003228 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80014c8:	2301      	movs	r3, #1
 80014ca:	2202      	movs	r2, #2
 80014cc:	4905      	ldr	r1, [pc, #20]	; (80014e4 <led7_Scan+0x104>)
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <led7_Scan+0x114>)
 80014d0:	f002 fd05 	bl	8003ede <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <led7_Scan+0x110>)
 80014da:	f001 fea5 	bl	8003228 <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000004 	.word	0x20000004
 80014e8:	20000098 	.word	0x20000098
 80014ec:	20000000 	.word	0x20000000
 80014f0:	40021800 	.word	0x40021800
 80014f4:	20000248 	.word	0x20000248

080014f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fc:	f000 fd72 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001500:	f000 f826 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001504:	f7ff fc06 	bl	8000d14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001508:	f000 fac2 	bl	8001a90 <MX_TIM2_Init>
  MX_SPI1_Init();
 800150c:	f000 f930 	bl	8001770 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001510:	f7ff fb30 	bl	8000b74 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001514:	f7ff fd38 	bl	8000f88 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001518:	f000 fb06 	bl	8001b28 <MX_TIM13_Init>
  MX_DMA_Init();
 800151c:	f7ff fb0a 	bl	8000b34 <MX_DMA_Init>
  MX_ADC1_Init();
 8001520:	f7ff f9de 	bl	80008e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001524:	f000 fa64 	bl	80019f0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001528:	f000 fc7c 	bl	8001e24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800152c:	f000 fc50 	bl	8001dd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001530:	f000 f878 	bl	8001624 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8001534:	bf00      	nop
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <main+0x54>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0fb      	beq.n	8001536 <main+0x3e>
	  flag_timer2 = 0;
 800153e:	4b03      	ldr	r3, [pc, #12]	; (800154c <main+0x54>)
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
	  sendTemperatureToESP();
 8001544:	f000 f87e 	bl	8001644 <sendTemperatureToESP>
	  while(!flag_timer2);
 8001548:	e7f4      	b.n	8001534 <main+0x3c>
 800154a:	bf00      	nop
 800154c:	2000009e 	.word	0x2000009e

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	2230      	movs	r2, #48	; 0x30
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f004 ff80 	bl	8006464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <SystemClock_Config+0xcc>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a27      	ldr	r2, [pc, #156]	; (800161c <SystemClock_Config+0xcc>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
 8001584:	4b25      	ldr	r3, [pc, #148]	; (800161c <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b22      	ldr	r3, [pc, #136]	; (8001620 <SystemClock_Config+0xd0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <SystemClock_Config+0xd0>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2310      	movs	r3, #16
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b8:	2302      	movs	r3, #2
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c0:	2308      	movs	r3, #8
 80015c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015c4:	23a8      	movs	r3, #168	; 0xa8
 80015c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c8:	2302      	movs	r3, #2
 80015ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 ff85 	bl	80034e4 <HAL_RCC_OscConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e0:	f000 f84e 	bl	8001680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	230f      	movs	r3, #15
 80015e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e8:	2302      	movs	r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2105      	movs	r1, #5
 8001602:	4618      	mov	r0, r3
 8001604:	f002 f9e6 	bl	80039d4 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160e:	f000 f837 	bl	8001680 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3750      	adds	r7, #80	; 0x50
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	timer_init();
 8001628:	f000 f84e 	bl	80016c8 <timer_init>
	button_init();
 800162c:	f7ff fa76 	bl	8000b1c <button_init>
	lcd_init();
 8001630:	f7ff fd76 	bl	8001120 <lcd_init>
	uart_init_esp();
 8001634:	f000 fb6c 	bl	8001d10 <uart_init_esp>
	setTimer2(30000);
 8001638:	f247 5030 	movw	r0, #30000	; 0x7530
 800163c:	f000 f852 	bl	80016e4 <setTimer2>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <sendTemperatureToESP>:

char msg[50];
void sendTemperatureToESP() {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af02      	add	r7, sp, #8
	float temperature = sensor_GetTemperature(); //Get value
 800164a:	f000 f81f 	bl	800168c <sensor_GetTemperature>
 800164e:	ed87 0a01 	vstr	s0, [r7, #4]

	sniprintf(msg, sizeof(msg), "!TEMP:%.2f#", temperature); //Format
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe ff70 	bl	8000538 <__aeabi_f2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	e9cd 2300 	strd	r2, r3, [sp]
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <sendTemperatureToESP+0x34>)
 8001662:	2132      	movs	r1, #50	; 0x32
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <sendTemperatureToESP+0x38>)
 8001666:	f004 ff05 	bl	8006474 <sniprintf>

	uart_Rs232SendString((uint8_t*)msg); //Send
 800166a:	4804      	ldr	r0, [pc, #16]	; (800167c <sendTemperatureToESP+0x38>)
 800166c:	f000 fb36 	bl	8001cdc <uart_Rs232SendString>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08006d50 	.word	0x08006d50
 800167c:	20000378 	.word	0x20000378

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <sensor_GetTemperature+0x30>)
 8001692:	891b      	ldrh	r3, [r3, #8]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800169c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80016c0 <sensor_GetTemperature+0x34>
 80016a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80016c4 <sensor_GetTemperature+0x38>
 80016a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ac:	eef0 7a66 	vmov.f32	s15, s13
}
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	2000023c 	.word	0x2000023c
 80016c0:	43a50000 	.word	0x43a50000
 80016c4:	457ff000 	.word	0x457ff000

080016c8 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <timer_init+0x14>)
 80016ce:	f002 ff09 	bl	80044e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80016d2:	4803      	ldr	r0, [pc, #12]	; (80016e0 <timer_init+0x18>)
 80016d4:	f002 fe9e 	bl	8004414 <HAL_TIM_Base_Start>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000330 	.word	0x20000330
 80016e0:	200002e8 	.word	0x200002e8

080016e4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <setTimer2+0x2c>)
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <setTimer2+0x2c>)
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <setTimer2+0x30>)
 80016fa:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <setTimer2+0x34>)
 80016fe:	2200      	movs	r2, #0
 8001700:	801a      	strh	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200000a2 	.word	0x200000a2
 8001714:	200000a0 	.word	0x200000a0
 8001718:	2000009e 	.word	0x2000009e

0800171c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172c:	d116      	bne.n	800175c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001740:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800174c:	2201      	movs	r2, #1
 800174e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001752:	881a      	ldrh	r2, [r3, #0]
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001756:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001758:	f7ff fe42 	bl	80013e0 <led7_Scan>
	}
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200000a0 	.word	0x200000a0
 8001768:	2000009e 	.word	0x2000009e
 800176c:	200000a2 	.word	0x200000a2

08001770 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001776:	4a18      	ldr	r2, [pc, #96]	; (80017d8 <MX_SPI1_Init+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI1_Init+0x64>)
 800177c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI1_Init+0x64>)
 800179c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017bc:	220a      	movs	r2, #10
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_SPI1_Init+0x64>)
 80017c2:	f002 fb03 	bl	8003dcc <HAL_SPI_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017cc:	f7ff ff58 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000248 	.word	0x20000248
 80017d8:	40013000 	.word	0x40013000

080017dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_SPI_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_SPI_MspInit+0x88>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_SPI_MspInit+0x88>)
 8001808:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_SPI_MspInit+0x88>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_SPI_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_SPI_MspInit+0x88>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_SPI_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001836:	2338      	movs	r3, #56	; 0x38
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001846:	2305      	movs	r3, #5
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_SPI_MspInit+0x8c>)
 8001852:	f001 fb4d 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40013000 	.word	0x40013000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_MspInit+0x4c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_MspInit+0x4c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x4c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 fbbe 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM2_IRQHandler+0x10>)
 8001916:	f002 feae 	bl	8004676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000330 	.word	0x20000330

08001924 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <USART1_IRQHandler+0x10>)
 800192a:	f003 fde9 	bl	8005500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200003dc 	.word	0x200003dc

08001938 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART2_IRQHandler+0x10>)
 800193e:	f003 fddf 	bl	8005500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000420 	.word	0x20000420

0800194c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <DMA2_Stream0_IRQHandler+0x10>)
 8001952:	f001 f891 	bl	8002a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200000fc 	.word	0x200000fc

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f004 fd3e 	bl	8006410 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20020000 	.word	0x20020000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	200000a4 	.word	0x200000a4
 80019c8:	20000478 	.word	0x20000478

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <MX_TIM1_Init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a14:	2253      	movs	r2, #83	; 0x53
 8001a16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2c:	4b16      	ldr	r3, [pc, #88]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a3a:	f002 fc9b 	bl	8004374 <HAL_TIM_Base_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a44:	f7ff fe1c 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a56:	f002 ffd9 	bl	8004a0c <HAL_TIM_ConfigClockSource>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a60:	f7ff fe0e 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_TIM1_Init+0x98>)
 8001a72:	f003 fba5 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a7c:	f7ff fe00 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200002e8 	.word	0x200002e8
 8001a8c:	40010000 	.word	0x40010000

08001a90 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ab6:	f240 3247 	movw	r2, #839	; 0x347
 8001aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ac4:	2263      	movs	r2, #99	; 0x63
 8001ac6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad4:	4813      	ldr	r0, [pc, #76]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001ad6:	f002 fc4d 	bl	8004374 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ae0:	f7ff fdce 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001af2:	f002 ff8b 	bl	8004a0c <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001afc:	f7ff fdc0 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	2300      	movs	r3, #0
 8001b02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b04:	2300      	movs	r3, #0
 8001b06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_TIM2_Init+0x94>)
 8001b0e:	f003 fb57 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b18:	f7ff fdb2 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000330 	.word	0x20000330

08001b28 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	615a      	str	r2, [r3, #20]
 8001b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <MX_TIM13_Init+0x98>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b48:	f240 3247 	movw	r2, #839	; 0x347
 8001b4c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b56:	2263      	movs	r2, #99	; 0x63
 8001b58:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001b66:	4815      	ldr	r0, [pc, #84]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b68:	f002 fc04 	bl	8004374 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001b72:	f7ff fd85 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b78:	f002 fd24 	bl	80045c4 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001b82:	f7ff fd7d 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001b9e:	f002 fe73 	bl	8004888 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001ba8:	f7ff fd6a 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <MX_TIM13_Init+0x94>)
 8001bae:	f000 f85b 	bl	8001c68 <HAL_TIM_MspPostInit>

}
 8001bb2:	bf00      	nop
 8001bb4:	3720      	adds	r7, #32
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002a0 	.word	0x200002a0
 8001bc0:	40001c00 	.word	0x40001c00

08001bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_TIM_Base_MspInit+0x98>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a20      	ldr	r2, [pc, #128]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001bf2:	e02e      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 fdb3 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c24:	201c      	movs	r0, #28
 8001c26:	f000 fdcc 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 8001c2a:	e012      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <HAL_TIM_Base_MspInit+0xa0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d10d      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_TIM_Base_MspInit+0x9c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40001c00 	.word	0x40001c00

08001c68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIM_MspPostInit+0x68>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d11e      	bne.n	8001cc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_TIM_MspPostInit+0x6c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_TIM_MspPostInit+0x6c>)
 8001c94:	f043 0320 	orr.w	r3, r3, #32
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_TIM_MspPostInit+0x6c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001caa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_TIM_MspPostInit+0x70>)
 8001cc4:	f001 f914 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40001c00 	.word	0x40001c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40021400 	.word	0x40021400

08001cdc <uart_Rs232SendString>:

void uart_init_rs232(){
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t* str){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4907      	ldr	r1, [pc, #28]	; (8001d04 <uart_Rs232SendString+0x28>)
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <uart_Rs232SendString+0x2c>)
 8001cea:	f004 fbf7 	bl	80064dc <siprintf>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <uart_Rs232SendString+0x2c>)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <uart_Rs232SendString+0x30>)
 8001cf8:	f003 fb3f 	bl	800537a <HAL_UART_Transmit>
}
 8001cfc:	bf00      	nop
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	08006d5c 	.word	0x08006d5c
 8001d08:	20000378 	.word	0x20000378
 8001d0c:	200003dc 	.word	0x200003dc

08001d10 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001d14:	2201      	movs	r2, #1
 8001d16:	4906      	ldr	r1, [pc, #24]	; (8001d30 <uart_init_esp+0x20>)
 8001d18:	4806      	ldr	r0, [pc, #24]	; (8001d34 <uart_init_esp+0x24>)
 8001d1a:	f003 fbc0 	bl	800549e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <uart_init_esp+0x28>)
 8001d26:	f001 fa7f 	bl	8003228 <HAL_GPIO_WritePin>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200000a9 	.word	0x200000a9
 8001d34:	20000420 	.word	0x20000420
 8001d38:	40021400 	.word	0x40021400

08001d3c <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_UART_RxCpltCallback+0x74>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10a      	bne.n	8001d64 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001d4e:	230a      	movs	r3, #10
 8001d50:	2201      	movs	r2, #1
 8001d52:	4918      	ldr	r1, [pc, #96]	; (8001db4 <HAL_UART_RxCpltCallback+0x78>)
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <HAL_UART_RxCpltCallback+0x7c>)
 8001d56:	f003 fb10 	bl	800537a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4915      	ldr	r1, [pc, #84]	; (8001db4 <HAL_UART_RxCpltCallback+0x78>)
 8001d5e:	4816      	ldr	r0, [pc, #88]	; (8001db8 <HAL_UART_RxCpltCallback+0x7c>)
 8001d60:	f003 fb9d 	bl	800549e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <HAL_UART_RxCpltCallback+0x80>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11b      	bne.n	8001da6 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <HAL_UART_RxCpltCallback+0x84>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b4f      	cmp	r3, #79	; 0x4f
 8001d74:	d103      	bne.n	8001d7e <HAL_UART_RxCpltCallback+0x42>
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_UART_RxCpltCallback+0x88>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	e00e      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_UART_RxCpltCallback+0x84>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b61      	cmp	r3, #97	; 0x61
 8001d84:	d103      	bne.n	8001d8e <HAL_UART_RxCpltCallback+0x52>
 8001d86:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e006      	b.n	8001d9c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_UART_RxCpltCallback+0x84>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b41      	cmp	r3, #65	; 0x41
 8001d94:	d102      	bne.n	8001d9c <HAL_UART_RxCpltCallback+0x60>
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_UART_RxCpltCallback+0x8c>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <HAL_UART_RxCpltCallback+0x84>)
 8001da0:	480a      	ldr	r0, [pc, #40]	; (8001dcc <HAL_UART_RxCpltCallback+0x90>)
 8001da2:	f003 fb7c 	bl	800549e <HAL_UART_Receive_IT>
	}
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40011000 	.word	0x40011000
 8001db4:	200000a8 	.word	0x200000a8
 8001db8:	200003dc 	.word	0x200003dc
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	200000a9 	.word	0x200000a9
 8001dc4:	200000aa 	.word	0x200000aa
 8001dc8:	2000009c 	.word	0x2000009c
 8001dcc:	20000420 	.word	0x20000420

08001dd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_USART1_UART_Init+0x50>)
 8001dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001df6:	220c      	movs	r2, #12
 8001df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_USART1_UART_Init+0x4c>)
 8001e08:	f003 fa6a 	bl	80052e0 <HAL_UART_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e12:	f7ff fc35 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200003dc 	.word	0x200003dc
 8001e20:	40011000 	.word	0x40011000

08001e24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <MX_USART2_UART_Init+0x50>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f003 fa40 	bl	80052e0 <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e66:	f7ff fc0b 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000420 	.word	0x20000420
 8001e74:	40004400 	.word	0x40004400

08001e78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a3a      	ldr	r2, [pc, #232]	; (8001f80 <HAL_UART_MspInit+0x108>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d135      	bne.n	8001f06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a38      	ldr	r2, [pc, #224]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b36      	ldr	r3, [pc, #216]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ed2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ee4:	2307      	movs	r3, #7
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4826      	ldr	r0, [pc, #152]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001ef0:	f000 fffe 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2025      	movs	r0, #37	; 0x25
 8001efa:	f000 fc46 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001efe:	2025      	movs	r0, #37	; 0x25
 8001f00:	f000 fc5f 	bl	80027c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f04:	e038      	b.n	8001f78 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <HAL_UART_MspInit+0x114>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d133      	bne.n	8001f78 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x10c>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <HAL_UART_MspInit+0x110>)
 8001f64:	f000 ffc4 	bl	8002ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2026      	movs	r0, #38	; 0x26
 8001f6e:	f000 fc0c 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f72:	2026      	movs	r0, #38	; 0x26
 8001f74:	f000 fc25 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40011000 	.word	0x40011000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40004400 	.word	0x40004400

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f96:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fac:	4c0b      	ldr	r4, [pc, #44]	; (8001fdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fba:	f7ff fd07 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f004 fa2d 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff fa99 	bl	80014f8 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fd4:	08006dd4 	.word	0x08006dd4
  ldr r2, =_sbss
 8001fd8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fdc:	20000478 	.word	0x20000478

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 fbb1 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fc28 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fbc9 	bl	80027de <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 fb91 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000008 	.word	0x20000008
 8002080:	20000010 	.word	0x20000010
 8002084:	2000000c 	.word	0x2000000c

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000010 	.word	0x20000010
 80020ac:	20000464 	.word	0x20000464

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000464 	.word	0x20000464

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000010 	.word	0x20000010

08002110 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e033      	b.n	800218e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fc60 	bl	80009f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002156:	f023 0302 	bic.w	r3, r3, #2
 800215a:	f043 0202 	orr.w	r2, r3, #2
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f93a 	bl	80023dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40
 800217e:	e001      	b.n	8002184 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800218c:	7bfb      	ldrb	r3, [r7, #15]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x1c>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e105      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x228>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	d925      	bls.n	8002210 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68d9      	ldr	r1, [r3, #12]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	461a      	mov	r2, r3
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	3b1e      	subs	r3, #30
 80021da:	2207      	movs	r2, #7
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68d9      	ldr	r1, [r3, #12]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4403      	add	r3, r0
 8002202:	3b1e      	subs	r3, #30
 8002204:	409a      	lsls	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	e022      	b.n	8002256 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6919      	ldr	r1, [r3, #16]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	2207      	movs	r2, #7
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6919      	ldr	r1, [r3, #16]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	4618      	mov	r0, r3
 8002246:	4603      	mov	r3, r0
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4403      	add	r3, r0
 800224c:	409a      	lsls	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d824      	bhi.n	80022a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b05      	subs	r3, #5
 8002270:	221f      	movs	r2, #31
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b05      	subs	r3, #5
 800229a:	fa00 f203 	lsl.w	r2, r0, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34
 80022a6:	e04c      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d824      	bhi.n	80022fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	3b23      	subs	r3, #35	; 0x23
 80022c2:	221f      	movs	r2, #31
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43da      	mvns	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	400a      	ands	r2, r1
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	3b23      	subs	r3, #35	; 0x23
 80022ec:	fa00 f203 	lsl.w	r2, r0, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e023      	b.n	8002342 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	3b41      	subs	r3, #65	; 0x41
 800230c:	221f      	movs	r2, #31
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	4618      	mov	r0, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	3b41      	subs	r3, #65	; 0x41
 8002336:	fa00 f203 	lsl.w	r2, r0, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_ADC_ConfigChannel+0x234>)
 8002344:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <HAL_ADC_ConfigChannel+0x238>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d109      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1cc>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b12      	cmp	r3, #18
 8002356:	d105      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <HAL_ADC_ConfigChannel+0x238>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d123      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x21e>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b10      	cmp	r3, #16
 8002374:	d003      	beq.n	800237e <HAL_ADC_ConfigChannel+0x1e6>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b11      	cmp	r3, #17
 800237c:	d11b      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b10      	cmp	r3, #16
 8002390:	d111      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <HAL_ADC_ConfigChannel+0x23c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a10      	ldr	r2, [pc, #64]	; (80023d8 <HAL_ADC_ConfigChannel+0x240>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	0c9a      	lsrs	r2, r3, #18
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023a8:	e002      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40012300 	.word	0x40012300
 80023d0:	40012000 	.word	0x40012000
 80023d4:	20000008 	.word	0x20000008
 80023d8:	431bde83 	.word	0x431bde83

080023dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e4:	4b79      	ldr	r3, [pc, #484]	; (80025cc <ADC_Init+0x1f0>)
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	021a      	lsls	r2, r3, #8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <ADC_Init+0x1f4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6899      	ldr	r1, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	e00f      	b.n	80024da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0202 	bic.w	r2, r2, #2
 80024e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	7e1b      	ldrb	r3, [r3, #24]
 80024f4:	005a      	lsls	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d01b      	beq.n	8002540 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002516:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	035a      	lsls	r2, r3, #13
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	e007      	b.n	8002550 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	3b01      	subs	r3, #1
 800256c:	051a      	lsls	r2, r3, #20
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002592:	025a      	lsls	r2, r3, #9
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6899      	ldr	r1, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	029a      	lsls	r2, r3, #10
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40012300 	.word	0x40012300
 80025d0:	0f000001 	.word	0x0f000001

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fc54 	bl	80020b0 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e099      	b.n	8002948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002834:	e00f      	b.n	8002856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002836:	f7ff fc3b 	bl	80020b0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b05      	cmp	r3, #5
 8002842:	d908      	bls.n	8002856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e078      	b.n	8002948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e8      	bne.n	8002836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_DMA_Init+0x158>)
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4313      	orrs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0307 	bic.w	r3, r3, #7
 80028d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d117      	bne.n	800291a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fa7b 	bl	8002df8 <DMA_CheckFifoParam>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002916:	2301      	movs	r3, #1
 8002918:	e016      	b.n	8002948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa32 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 8002928:	4603      	mov	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	223f      	movs	r2, #63	; 0x3f
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	f010803f 	.word	0xf010803f

08002954 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002962:	f7ff fba5 	bl	80020b0 <HAL_GetTick>
 8002966:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d008      	beq.n	8002986 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2280      	movs	r2, #128	; 0x80
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e052      	b.n	8002a2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0216 	bic.w	r2, r2, #22
 8002994:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <HAL_DMA_Abort+0x62>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0208 	bic.w	r2, r2, #8
 80029c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d6:	e013      	b.n	8002a00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d8:	f7ff fb6a 	bl	80020b0 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d90c      	bls.n	8002a00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2220      	movs	r2, #32
 80029ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2203      	movs	r2, #3
 80029f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e015      	b.n	8002a2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e4      	bne.n	80029d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	223f      	movs	r2, #63	; 0x3f
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d004      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	; 0x80
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00c      	b.n	8002a6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2205      	movs	r2, #5
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a84:	4b92      	ldr	r3, [pc, #584]	; (8002cd0 <HAL_DMA_IRQHandler+0x258>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a92      	ldr	r2, [pc, #584]	; (8002cd4 <HAL_DMA_IRQHandler+0x25c>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01a      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1e:	2204      	movs	r2, #4
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f043 0204 	orr.w	r2, r3, #4
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2210      	movs	r2, #16
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d043      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03c      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2210      	movs	r2, #16
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d108      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d024      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	4798      	blx	r3
 8002ba6:	e01f      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	4798      	blx	r3
 8002bb8:	e016      	b.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0208 	bic.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2220      	movs	r2, #32
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 808e 	beq.w	8002d16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 8086 	beq.w	8002d16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2220      	movs	r2, #32
 8002c10:	409a      	lsls	r2, r3
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d136      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0216 	bic.w	r2, r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x1da>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0208 	bic.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c66:	223f      	movs	r2, #63	; 0x3f
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d07d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
        }
        return;
 8002c8e:	e078      	b.n	8002d82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01c      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d030      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e02b      	b.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d027      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e022      	b.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0210 	bic.w	r2, r2, #16
 8002cf4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d032      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d022      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	3301      	adds	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d307      	bcc.n	8002d5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f2      	bne.n	8002d42 <HAL_DMA_IRQHandler+0x2ca>
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d5e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d82:	bf00      	nop
    }
  }
}
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	08006d88 	.word	0x08006d88

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e16b      	b.n	80031e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 815a 	bne.w	80031de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b4 	beq.w	80031de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_GPIO_Init+0x30c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <HAL_GPIO_Init+0x310>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <HAL_GPIO_Init+0x324>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_GPIO_Init+0x328>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x20a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x310>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800315a:	4a32      	ldr	r2, [pc, #200]	; (8003224 <HAL_GPIO_Init+0x334>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x334>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae90 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e12b      	b.n	80034c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd feae 	bl	8000fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0201 	bic.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c0:	f000 fd5c 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 80032c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4a81      	ldr	r2, [pc, #516]	; (80034d0 <HAL_I2C_Init+0x274>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d807      	bhi.n	80032e0 <HAL_I2C_Init+0x84>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a80      	ldr	r2, [pc, #512]	; (80034d4 <HAL_I2C_Init+0x278>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e006      	b.n	80032ee <HAL_I2C_Init+0x92>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a7d      	ldr	r2, [pc, #500]	; (80034d8 <HAL_I2C_Init+0x27c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	bf94      	ite	ls
 80032e8:	2301      	movls	r3, #1
 80032ea:	2300      	movhi	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0e7      	b.n	80034c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a78      	ldr	r2, [pc, #480]	; (80034dc <HAL_I2C_Init+0x280>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	0c9b      	lsrs	r3, r3, #18
 8003300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_I2C_Init+0x274>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d802      	bhi.n	8003330 <HAL_I2C_Init+0xd4>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3301      	adds	r3, #1
 800332e:	e009      	b.n	8003344 <HAL_I2C_Init+0xe8>
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003336:	fb02 f303 	mul.w	r3, r2, r3
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <HAL_I2C_Init+0x284>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	3301      	adds	r3, #1
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	430b      	orrs	r3, r1
 800334a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	495c      	ldr	r1, [pc, #368]	; (80034d0 <HAL_I2C_Init+0x274>)
 8003360:	428b      	cmp	r3, r1
 8003362:	d819      	bhi.n	8003398 <HAL_I2C_Init+0x13c>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1e59      	subs	r1, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003378:	400b      	ands	r3, r1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_I2C_Init+0x138>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1e59      	subs	r1, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fbb1 f3f3 	udiv	r3, r1, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	e051      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003394:	2304      	movs	r3, #4
 8003396:	e04f      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d111      	bne.n	80033c4 <HAL_I2C_Init+0x168>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	1e58      	subs	r0, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6859      	ldr	r1, [r3, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	440b      	add	r3, r1
 80033ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e012      	b.n	80033ea <HAL_I2C_Init+0x18e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1e58      	subs	r0, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	0099      	lsls	r1, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033da:	3301      	adds	r3, #1
 80033dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Init+0x196>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e022      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10e      	bne.n	8003418 <HAL_I2C_Init+0x1bc>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e58      	subs	r0, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	460b      	mov	r3, r1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	440b      	add	r3, r1
 8003408:	fbb0 f3f3 	udiv	r3, r0, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	e00f      	b.n	8003438 <HAL_I2C_Init+0x1dc>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0099      	lsls	r1, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	6809      	ldr	r1, [r1, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6911      	ldr	r1, [r2, #16]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68d2      	ldr	r2, [r2, #12]
 8003472:	4311      	orrs	r1, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	430b      	orrs	r3, r1
 800347a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	000186a0 	.word	0x000186a0
 80034d4:	001e847f 	.word	0x001e847f
 80034d8:	003d08ff 	.word	0x003d08ff
 80034dc:	431bde83 	.word	0x431bde83
 80034e0:	10624dd3 	.word	0x10624dd3

080034e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e264      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d075      	beq.n	80035ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003502:	4ba3      	ldr	r3, [pc, #652]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 030c 	and.w	r3, r3, #12
 800350a:	2b04      	cmp	r3, #4
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4ba0      	ldr	r3, [pc, #640]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003516:	2b08      	cmp	r3, #8
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b99      	ldr	r3, [pc, #612]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x108>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e23f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x74>
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a90      	ldr	r2, [pc, #576]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0x98>
 8003562:	4b8b      	ldr	r3, [pc, #556]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8a      	ldr	r2, [pc, #552]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a87      	ldr	r2, [pc, #540]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xb0>
 800357c:	4b84      	ldr	r3, [pc, #528]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a83      	ldr	r2, [pc, #524]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b81      	ldr	r3, [pc, #516]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a80      	ldr	r2, [pc, #512]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fd88 	bl	80020b0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fd84 	bl	80020b0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e204      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xc0>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd74 	bl	80020b0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fd70 	bl	80020b0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1f0      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0xe8>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d063      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1c4      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4952      	ldr	r1, [pc, #328]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e03a      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d020      	beq.n	8003696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b4f      	ldr	r3, [pc, #316]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe fd29 	bl	80020b0 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003662:	f7fe fd25 	bl	80020b0 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1a5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	4b46      	ldr	r3, [pc, #280]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	4940      	ldr	r1, [pc, #256]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003690:	4313      	orrs	r3, r2
 8003692:	600b      	str	r3, [r1, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <HAL_RCC_OscConfig+0x2b0>)
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe fd08 	bl	80020b0 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036a4:	f7fe fd04 	bl	80020b0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e184      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d030      	beq.n	8003730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b30      	ldr	r3, [pc, #192]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036dc:	f7fe fce8 	bl	80020b0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036e4:	f7fe fce4 	bl	80020b0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e164      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x200>
 8003702:	e015      	b.n	8003730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003704:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x2b4>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370a:	f7fe fcd1 	bl	80020b0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7fe fccd 	bl	80020b0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e14d      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a0 	beq.w	800387e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10f      	bne.n	800376e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_RCC_OscConfig+0x2b8>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fe fc93 	bl	80020b0 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378c:	e011      	b.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	42470000 	.word	0x42470000
 8003798:	42470e80 	.word	0x42470e80
 800379c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fc86 	bl	80020b0 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e106      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x4e4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d106      	bne.n	80037d4 <HAL_RCC_OscConfig+0x2f0>
 80037c6:	4b81      	ldr	r3, [pc, #516]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e01c      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d10c      	bne.n	80037f6 <HAL_RCC_OscConfig+0x312>
 80037dc:	4b7b      	ldr	r3, [pc, #492]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a7a      	ldr	r2, [pc, #488]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
 80037e8:	4b78      	ldr	r3, [pc, #480]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a77      	ldr	r2, [pc, #476]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
 80037f4:	e00b      	b.n	800380e <HAL_RCC_OscConfig+0x32a>
 80037f6:	4b75      	ldr	r3, [pc, #468]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a74      	ldr	r2, [pc, #464]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	4b72      	ldr	r3, [pc, #456]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	4a71      	ldr	r2, [pc, #452]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003808:	f023 0304 	bic.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fc4b 	bl	80020b0 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fc47 	bl	80020b0 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0c5      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0ee      	beq.n	800381e <HAL_RCC_OscConfig+0x33a>
 8003840:	e014      	b.n	800386c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe fc35 	bl	80020b0 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe fc31 	bl	80020b0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0af      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	4b5a      	ldr	r3, [pc, #360]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ee      	bne.n	800384a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003872:	4b56      	ldr	r3, [pc, #344]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a55      	ldr	r2, [pc, #340]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 809b 	beq.w	80039be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003888:	4b50      	ldr	r3, [pc, #320]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d05c      	beq.n	800394e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d141      	bne.n	8003920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b4c      	ldr	r3, [pc, #304]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fc05 	bl	80020b0 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fe fc01 	bl	80020b0 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e081      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	085b      	lsrs	r3, r3, #1
 80038e0:	3b01      	subs	r3, #1
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	061b      	lsls	r3, r3, #24
 80038ec:	4937      	ldr	r1, [pc, #220]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fbda 	bl	80020b0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe fbd6 	bl	80020b0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e056      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b2e      	ldr	r3, [pc, #184]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x41c>
 800391e:	e04e      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x4ec>)
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003926:	f7fe fbc3 	bl	80020b0 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe fbbf 	bl	80020b0 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e03f      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x44a>
 800394c:	e037      	b.n	80039be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e032      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800395a:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <HAL_RCC_OscConfig+0x4e8>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d028      	beq.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d121      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d11a      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800398a:	4013      	ands	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003990:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003992:	4293      	cmp	r3, r2
 8003994:	d111      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	3b01      	subs	r3, #1
 80039a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d107      	bne.n	80039ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40007000 	.word	0x40007000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	42470060 	.word	0x42470060

080039d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0cc      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b68      	ldr	r3, [pc, #416]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d90c      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b65      	ldr	r3, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d044      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d119      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d003      	beq.n	8003a92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	2b03      	cmp	r3, #3
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e06f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e067      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4934      	ldr	r1, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe faf4 	bl	80020b0 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe faf0 	bl	80020b0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d20c      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fa54 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08006d70 	.word	0x08006d70
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80bd 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0b7      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b61      	ldr	r3, [pc, #388]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bd6:	60bb      	str	r3, [r7, #8]
       break;
 8003bd8:	e0b7      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bdc:	60bb      	str	r3, [r7, #8]
      break;
 8003bde:	e0b4      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b5d      	ldr	r3, [pc, #372]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bea:	4b5b      	ldr	r3, [pc, #364]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d04d      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	ea02 0800 	and.w	r8, r2, r0
 8003c0e:	ea03 0901 	and.w	r9, r3, r1
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	014b      	lsls	r3, r1, #5
 8003c20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c24:	0142      	lsls	r2, r0, #5
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003c2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	018b      	lsls	r3, r1, #6
 8003c3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c40:	0182      	lsls	r2, r0, #6
 8003c42:	1a12      	subs	r2, r2, r0
 8003c44:	eb63 0301 	sbc.w	r3, r3, r1
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	00d9      	lsls	r1, r3, #3
 8003c52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c56:	00d0      	lsls	r0, r2, #3
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	eb12 0208 	adds.w	r2, r2, r8
 8003c60:	eb43 0309 	adc.w	r3, r3, r9
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f04f 0100 	mov.w	r1, #0
 8003c6c:	0259      	lsls	r1, r3, #9
 8003c6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c72:	0250      	lsls	r0, r2, #9
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	f7fc fcb0 	bl	80005e8 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e04a      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c92:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	099b      	lsrs	r3, r3, #6
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	ea02 0400 	and.w	r4, r2, r0
 8003caa:	ea03 0501 	and.w	r5, r3, r1
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	014b      	lsls	r3, r1, #5
 8003cbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cc0:	0142      	lsls	r2, r0, #5
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	1b00      	subs	r0, r0, r4
 8003cc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	018b      	lsls	r3, r1, #6
 8003cd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cda:	0182      	lsls	r2, r0, #6
 8003cdc:	1a12      	subs	r2, r2, r0
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	00d9      	lsls	r1, r3, #3
 8003cec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cf0:	00d0      	lsls	r0, r2, #3
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	1912      	adds	r2, r2, r4
 8003cf8:	eb45 0303 	adc.w	r3, r5, r3
 8003cfc:	f04f 0000 	mov.w	r0, #0
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	0299      	lsls	r1, r3, #10
 8003d06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d0a:	0290      	lsls	r0, r2, #10
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4610      	mov	r0, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	f7fc fc64 	bl	80005e8 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	60bb      	str	r3, [r7, #8]
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d46:	60bb      	str	r3, [r7, #8]
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000008 	.word	0x20000008

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08006d80 	.word	0x08006d80

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4903      	ldr	r1, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08006d80 	.word	0x08006d80

08003dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e07b      	b.n	8003ed6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d009      	beq.n	8003e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fcdc 	bl	80017dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e88:	ea42 0103 	orr.w	r1, r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	f003 0104 	and.w	r1, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0210 	and.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b088      	sub	sp, #32
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	60f8      	str	r0, [r7, #12]
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	603b      	str	r3, [r7, #0]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_SPI_Transmit+0x22>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e126      	b.n	800414e <HAL_SPI_Transmit+0x270>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f08:	f7fe f8d2 	bl	80020b0 <HAL_GetTick>
 8003f0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d002      	beq.n	8003f24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f22:	e10b      	b.n	800413c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_SPI_Transmit+0x52>
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f34:	e102      	b.n	800413c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	88fa      	ldrh	r2, [r7, #6]
 8003f4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d10f      	bne.n	8003f9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d007      	beq.n	8003fbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc4:	d14b      	bne.n	800405e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_SPI_Transmit+0xf6>
 8003fce:	8afb      	ldrh	r3, [r7, #22]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d13e      	bne.n	8004052 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	1c9a      	adds	r2, r3, #2
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ff8:	e02b      	b.n	8004052 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	d112      	bne.n	800402e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
 800402c:	e011      	b.n	8004052 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800402e:	f7fe f83f 	bl	80020b0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d803      	bhi.n	8004046 <HAL_SPI_Transmit+0x168>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d102      	bne.n	800404c <HAL_SPI_Transmit+0x16e>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004050:	e074      	b.n	800413c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1ce      	bne.n	8003ffa <HAL_SPI_Transmit+0x11c>
 800405c:	e04c      	b.n	80040f8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <HAL_SPI_Transmit+0x18e>
 8004066:	8afb      	ldrh	r3, [r7, #22]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d140      	bne.n	80040ee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	330c      	adds	r3, #12
 8004076:	7812      	ldrb	r2, [r2, #0]
 8004078:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004092:	e02c      	b.n	80040ee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d113      	bne.n	80040ca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	7812      	ldrb	r2, [r2, #0]
 80040ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040c8:	e011      	b.n	80040ee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ca:	f7fd fff1 	bl	80020b0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d803      	bhi.n	80040e2 <HAL_SPI_Transmit+0x204>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_Transmit+0x20a>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ec:	e026      	b.n	800413c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1cd      	bne.n	8004094 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f8b3 	bl	8004268 <SPI_EndRxTxTransaction>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10a      	bne.n	800412c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e000      	b.n	800413c <HAL_SPI_Transmit+0x25e>
  }

error:
 800413a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800414c:	7ffb      	ldrb	r3, [r7, #31]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004168:	f7fd ffa2 	bl	80020b0 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004178:	f7fd ff9a 	bl	80020b0 <HAL_GetTick>
 800417c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	0d1b      	lsrs	r3, r3, #20
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418e:	e054      	b.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d050      	beq.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004198:	f7fd ff8a 	bl	80020b0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d902      	bls.n	80041ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d13d      	bne.n	800422a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d111      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d004      	beq.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d107      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f4:	d10f      	bne.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e017      	b.n	800425a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3b01      	subs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	429a      	cmp	r2, r3
 8004256:	d19b      	bne.n	8004190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000008 	.word	0x20000008

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <SPI_EndRxTxTransaction+0x7c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <SPI_EndRxTxTransaction+0x80>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0d5b      	lsrs	r3, r3, #21
 8004280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d112      	bne.n	80042ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff5a 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d0f2      	beq.n	80042ba <SPI_EndRxTxTransaction+0x52>
 80042d4:	e000      	b.n	80042d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80042d6:	bf00      	nop
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000008 	.word	0x20000008
 80042e8:	165e9f81 	.word	0x165e9f81

080042ec <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e034      	b.n	800436c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fc fcf2 	bl	8000d00 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3308      	adds	r3, #8
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f001 ffa2 	bl	8006270 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6818      	ldr	r0, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	461a      	mov	r2, r3
 8004336:	68b9      	ldr	r1, [r7, #8]
 8004338:	f001 ffec 	bl	8006314 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6858      	ldr	r0, [r3, #4]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	f002 f821 	bl	8006390 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	6892      	ldr	r2, [r2, #8]
 8004362:	f041 0101 	orr.w	r1, r1, #1
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e041      	b.n	800440a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fc12 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fc1a 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d001      	beq.n	800442c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e046      	b.n	80044ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_TIM_Base_Start+0xb4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d01d      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_Base_Start+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start+0xbc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_Base_Start+0xc0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIM_Base_Start+0xc4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_TIM_Base_Start+0xc8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_TIM_Base_Start+0x70>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIM_Base_Start+0xcc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d111      	bne.n	80044a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b06      	cmp	r3, #6
 8004494:	d010      	beq.n	80044b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	e007      	b.n	80044b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40001800 	.word	0x40001800

080044e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e04e      	b.n	800459a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d022      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d01d      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <HAL_TIM_Base_Start_IT+0xc8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d018      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1c      	ldr	r2, [pc, #112]	; (80045b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00e      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a19      	ldr	r2, [pc, #100]	; (80045bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIM_Base_Start_IT+0x80>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b06      	cmp	r3, #6
 8004574:	d010      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e007      	b.n	8004598 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40000800 	.word	0x40000800
 80045b4:	40000c00 	.word	0x40000c00
 80045b8:	40010400 	.word	0x40010400
 80045bc:	40014000 	.word	0x40014000
 80045c0:	40001800 	.word	0x40001800

080045c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e041      	b.n	800465a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f839 	bl	8004662 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	4619      	mov	r1, r3
 8004602:	4610      	mov	r0, r2
 8004604:	f000 faf2 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d122      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d11b      	bne.n	80046d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f06f 0202 	mvn.w	r2, #2
 80046a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fa78 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80046be:	e005      	b.n	80046cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa6a 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa7b 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d122      	bne.n	8004726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d11b      	bne.n	8004726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f06f 0204 	mvn.w	r2, #4
 80046f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fa4e 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004712:	e005      	b.n	8004720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa40 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fa51 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b08      	cmp	r3, #8
 8004732:	d122      	bne.n	800477a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b08      	cmp	r3, #8
 8004740:	d11b      	bne.n	800477a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0208 	mvn.w	r2, #8
 800474a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2204      	movs	r2, #4
 8004750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa24 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004766:	e005      	b.n	8004774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa16 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fa27 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0310 	and.w	r3, r3, #16
 8004784:	2b10      	cmp	r3, #16
 8004786:	d122      	bne.n	80047ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d11b      	bne.n	80047ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0210 	mvn.w	r2, #16
 800479e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2208      	movs	r2, #8
 80047a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9fa 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80047ba:	e005      	b.n	80047c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f9ec 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9fd 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d10e      	bne.n	80047fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0201 	mvn.w	r2, #1
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fc ff91 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004804:	2b80      	cmp	r3, #128	; 0x80
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fd53 	bl	80052cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d10e      	bne.n	8004852 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d107      	bne.n	8004852 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f9c2 	bl	8004bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b20      	cmp	r3, #32
 800485e:	d10e      	bne.n	800487e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d107      	bne.n	800487e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0220 	mvn.w	r2, #32
 8004876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fd1d 	bl	80052b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0ae      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f200 809f 	bhi.w	80049f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080049f5 	.word	0x080049f5
 80048c4:	080049f5 	.word	0x080049f5
 80048c8:	080049f5 	.word	0x080049f5
 80048cc:	08004931 	.word	0x08004931
 80048d0:	080049f5 	.word	0x080049f5
 80048d4:	080049f5 	.word	0x080049f5
 80048d8:	080049f5 	.word	0x080049f5
 80048dc:	08004973 	.word	0x08004973
 80048e0:	080049f5 	.word	0x080049f5
 80048e4:	080049f5 	.word	0x080049f5
 80048e8:	080049f5 	.word	0x080049f5
 80048ec:	080049b3 	.word	0x080049b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fa18 	bl	8004d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	619a      	str	r2, [r3, #24]
      break;
 800492e:	e064      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fa68 	bl	8004e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	619a      	str	r2, [r3, #24]
      break;
 8004970:	e043      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fabd 	bl	8004ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
      break;
 80049b0:	e023      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fb11 	bl	8004fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	021a      	lsls	r2, r3, #8
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
      break;
 80049f2:	e002      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0b4      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x186>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	f000 8086 	beq.w	8004b7e <HAL_TIM_ConfigClockSource+0x172>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x11a>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xfa>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x13a>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 fb5d 	bl	8005180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04f      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fb46 	bl	8005180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 faba 	bl	800508c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	; 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb13 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fad9 	bl	80050ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	; 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fb03 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa9a 	bl	800508c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 faf3 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 faea 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40001800 	.word	0x40001800
 8004d24:	40001c00 	.word	0x40001c00
 8004d28:	40002000 	.word	0x40002000

08004d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 0302 	bic.w	r3, r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <TIM_OC1_SetConfig+0xd8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC1_SetConfig+0x64>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <TIM_OC1_SetConfig+0xdc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0308 	bic.w	r3, r3, #8
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <TIM_OC1_SetConfig+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC1_SetConfig+0x8e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <TIM_OC1_SetConfig+0xdc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d111      	bne.n	8004dde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400

08004e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0210 	bic.w	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0320 	bic.w	r3, r3, #32
 8004e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <TIM_OC2_SetConfig+0xe4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC2_SetConfig+0x68>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <TIM_OC2_SetConfig+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC2_SetConfig+0xe4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC2_SetConfig+0x94>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC2_SetConfig+0xe8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d113      	bne.n	8004ec8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40010400 	.word	0x40010400

08004ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <TIM_OC3_SetConfig+0xe0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC3_SetConfig+0x66>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <TIM_OC3_SetConfig+0xe4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <TIM_OC3_SetConfig+0xe0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC3_SetConfig+0x92>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <TIM_OC3_SetConfig+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a12      	ldr	r2, [pc, #72]	; (8005084 <TIM_OC4_SetConfig+0xa4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC4_SetConfig+0x68>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <TIM_OC4_SetConfig+0xa8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d109      	bne.n	800505c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0201 	bic.w	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 030a 	bic.w	r3, r3, #10
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	f043 0307 	orr.w	r3, r3, #7
 800516c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	609a      	str	r2, [r3, #8]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	609a      	str	r2, [r3, #8]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e05a      	b.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a21      	ldr	r2, [pc, #132]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d022      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005224:	d01d      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d018      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10c      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40010400 	.word	0x40010400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40001800 	.word	0x40001800

080052b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e03f      	b.n	8005372 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fdb6 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fddb 	bl	8005ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b08a      	sub	sp, #40	; 0x28
 800537e:	af02      	add	r7, sp, #8
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	603b      	str	r3, [r7, #0]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b20      	cmp	r3, #32
 8005398:	d17c      	bne.n	8005494 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Transmit+0x2c>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e075      	b.n	8005496 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Transmit+0x3e>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e06e      	b.n	8005496 <HAL_UART_Transmit+0x11c>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2221      	movs	r2, #33	; 0x21
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fc fe6f 	bl	80020b0 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e8:	d108      	bne.n	80053fc <HAL_UART_Transmit+0x82>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e003      	b.n	8005404 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800540c:	e02a      	b.n	8005464 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2200      	movs	r2, #0
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fb1f 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e036      	b.n	8005496 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3302      	adds	r3, #2
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e007      	b.n	8005456 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1cf      	bne.n	800540e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	2140      	movs	r1, #64	; 0x40
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 faef 	bl	8005a5c <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e006      	b.n	8005496 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	e000      	b.n	8005496 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005494:	2302      	movs	r3, #2
  }
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	60f8      	str	r0, [r7, #12]
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d11d      	bne.n	80054f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <HAL_UART_Receive_IT+0x26>
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e016      	b.n	80054f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Receive_IT+0x38>
 80054d2:	2302      	movs	r3, #2
 80054d4:	e00f      	b.n	80054f6 <HAL_UART_Receive_IT+0x58>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	461a      	mov	r2, r3
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fb24 	bl	8005b38 <UART_Start_Receive_IT>
 80054f0:	4603      	mov	r3, r0
 80054f2:	e000      	b.n	80054f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b0ba      	sub	sp, #232	; 0xe8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800552c:	2300      	movs	r3, #0
 800552e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800553e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <HAL_UART_IRQHandler+0x66>
 8005552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fc03 	bl	8005d6a <UART_Receive_IT>
      return;
 8005564:	e256      	b.n	8005a14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80de 	beq.w	800572c <HAL_UART_IRQHandler+0x22c>
 8005570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d106      	bne.n	800558a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80d1 	beq.w	800572c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_UART_IRQHandler+0xae>
 8005596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00b      	beq.n	80055d2 <HAL_UART_IRQHandler+0xd2>
 80055ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f043 0202 	orr.w	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <HAL_UART_IRQHandler+0xf6>
 80055de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d011      	beq.n	8005626 <HAL_UART_IRQHandler+0x126>
 8005602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d105      	bne.n	800561a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f043 0208 	orr.w	r2, r3, #8
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 81ed 	beq.w	8005a0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_UART_IRQHandler+0x14e>
 800563c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb8e 	bl	8005d6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005658:	2b40      	cmp	r3, #64	; 0x40
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <HAL_UART_IRQHandler+0x17a>
 8005672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d04f      	beq.n	800571a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fa96 	bl	8005bac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b40      	cmp	r3, #64	; 0x40
 800568c:	d141      	bne.n	8005712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3314      	adds	r3, #20
 8005694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1d9      	bne.n	800568e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	4a7d      	ldr	r2, [pc, #500]	; (80058dc <HAL_UART_IRQHandler+0x3dc>)
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd f9a0 	bl	8002a34 <HAL_DMA_Abort_IT>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d016      	beq.n	8005728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	e00e      	b.n	8005728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f990 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	e00a      	b.n	8005728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f98c 	bl	8005a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e006      	b.n	8005728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f988 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005726:	e170      	b.n	8005a0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	bf00      	nop
    return;
 800572a:	e16e      	b.n	8005a0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 814a 	bne.w	80059ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573a:	f003 0310 	and.w	r3, r3, #16
 800573e:	2b00      	cmp	r3, #0
 8005740:	f000 8143 	beq.w	80059ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 813c 	beq.w	80059ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	f040 80b4 	bne.w	80058e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8140 	beq.w	8005a0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005796:	429a      	cmp	r2, r3
 8005798:	f080 8139 	bcs.w	8005a0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ae:	f000 8088 	beq.w	80058c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	330c      	adds	r3, #12
 80057da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057ee:	e841 2300 	strex	r3, r2, [r1]
 80057f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1d9      	bne.n	80057b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005808:	e853 3f00 	ldrex	r3, [r3]
 800580c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800580e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800582a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e1      	bne.n	80057fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800584a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800584c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3314      	adds	r3, #20
 800585a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800585e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800586c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e3      	bne.n	800583a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005892:	f023 0310 	bic.w	r3, r3, #16
 8005896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e3      	bne.n	8005880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd f849 	bl	8002954 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8b6 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058d8:	e099      	b.n	8005a0e <HAL_UART_IRQHandler+0x50e>
 80058da:	bf00      	nop
 80058dc:	08005c73 	.word	0x08005c73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 808b 	beq.w	8005a12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8086 	beq.w	8005a12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	330c      	adds	r3, #12
 800590c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800591c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800592a:	647a      	str	r2, [r7, #68]	; 0x44
 800592c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	623b      	str	r3, [r7, #32]
   return(result);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3314      	adds	r3, #20
 800595e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005962:	633a      	str	r2, [r7, #48]	; 0x30
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596a:	e841 2300 	strex	r3, r2, [r1]
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1e3      	bne.n	800593e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60fb      	str	r3, [r7, #12]
   return(result);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	330c      	adds	r3, #12
 80059a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059a8:	61fa      	str	r2, [r7, #28]
 80059aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e3      	bne.n	8005984 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f83e 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059c8:	e023      	b.n	8005a12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_UART_IRQHandler+0x4ea>
 80059d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f959 	bl	8005c9a <UART_Transmit_IT>
    return;
 80059e8:	e014      	b.n	8005a14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00e      	beq.n	8005a14 <HAL_UART_IRQHandler+0x514>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f999 	bl	8005d3a <UART_EndTransmit_IT>
    return;
 8005a08:	e004      	b.n	8005a14 <HAL_UART_IRQHandler+0x514>
    return;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <HAL_UART_IRQHandler+0x514>
      return;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <HAL_UART_IRQHandler+0x514>
      return;
 8005a12:	bf00      	nop
  }
}
 8005a14:	37e8      	adds	r7, #232	; 0xe8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop

08005a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b090      	sub	sp, #64	; 0x40
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6c:	e050      	b.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d04c      	beq.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7c:	f7fc fb18 	bl	80020b0 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d241      	bcs.n	8005b10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aac:	637a      	str	r2, [r7, #52]	; 0x34
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f023 0301 	bic.w	r3, r3, #1
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae0:	623a      	str	r2, [r7, #32]
 8005ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	69f9      	ldr	r1, [r7, #28]
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e5      	bne.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d09f      	beq.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3740      	adds	r7, #64	; 0x40
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2222      	movs	r2, #34	; 0x22
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b095      	sub	sp, #84	; 0x54
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bd4:	643a      	str	r2, [r7, #64]	; 0x40
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e5      	bne.n	8005bb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d119      	bne.n	8005c58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0310 	bic.w	r3, r3, #16
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c44:	61ba      	str	r2, [r7, #24]
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	613b      	str	r3, [r7, #16]
   return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c66:	bf00      	nop
 8005c68:	3754      	adds	r7, #84	; 0x54
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b084      	sub	sp, #16
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fecf 	bl	8005a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b21      	cmp	r3, #33	; 0x21
 8005cac:	d13e      	bne.n	8005d2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	d114      	bne.n	8005ce2 <UART_Transmit_IT+0x48>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d110      	bne.n	8005ce2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	621a      	str	r2, [r3, #32]
 8005ce0:	e008      	b.n	8005cf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	1c59      	adds	r1, r3, #1
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6211      	str	r1, [r2, #32]
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4619      	mov	r1, r3
 8005d02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e000      	b.n	8005d2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff fe5e 	bl	8005a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b08c      	sub	sp, #48	; 0x30
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b22      	cmp	r3, #34	; 0x22
 8005d7c:	f040 80ab 	bne.w	8005ed6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d88:	d117      	bne.n	8005dba <UART_Receive_IT+0x50>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d113      	bne.n	8005dba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	1c9a      	adds	r2, r3, #2
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
 8005db8:	e026      	b.n	8005e08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dcc:	d007      	beq.n	8005dde <UART_Receive_IT+0x74>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <UART_Receive_IT+0x82>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de8:	701a      	strb	r2, [r3, #0]
 8005dea:	e008      	b.n	8005dfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4619      	mov	r1, r3
 8005e16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d15a      	bne.n	8005ed2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0220 	bic.w	r2, r2, #32
 8005e2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68da      	ldr	r2, [r3, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695a      	ldr	r2, [r3, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d135      	bne.n	8005ec8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	e853 3f00 	ldrex	r3, [r3]
 8005e70:	613b      	str	r3, [r7, #16]
   return(result);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f023 0310 	bic.w	r3, r3, #16
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	623a      	str	r2, [r7, #32]
 8005e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	69f9      	ldr	r1, [r7, #28]
 8005e88:	6a3a      	ldr	r2, [r7, #32]
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e5      	bne.n	8005e62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d10a      	bne.n	8005eba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7ff fdbf 	bl	8005a44 <HAL_UARTEx_RxEventCallback>
 8005ec6:	e002      	b.n	8005ece <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fb ff37 	bl	8001d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e002      	b.n	8005ed8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	e000      	b.n	8005ed8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ed6:	2302      	movs	r3, #2
  }
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3730      	adds	r7, #48	; 0x30
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee4:	b09f      	sub	sp, #124	; 0x7c
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef6:	68d9      	ldr	r1, [r3, #12]
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	ea40 0301 	orr.w	r3, r0, r1
 8005f00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	6999      	ldr	r1, [r3, #24]
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	ea40 0301 	orr.w	r3, r0, r1
 8005f48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4bc5      	ldr	r3, [pc, #788]	; (8006264 <UART_SetConfig+0x384>)
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d004      	beq.n	8005f5e <UART_SetConfig+0x7e>
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	4bc3      	ldr	r3, [pc, #780]	; (8006268 <UART_SetConfig+0x388>)
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d103      	bne.n	8005f66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f5e:	f7fd ff21 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8005f62:	6778      	str	r0, [r7, #116]	; 0x74
 8005f64:	e002      	b.n	8005f6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f66:	f7fd ff09 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8005f6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f74:	f040 80b6 	bne.w	80060e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	f04f 0500 	mov.w	r5, #0
 8005f80:	4622      	mov	r2, r4
 8005f82:	462b      	mov	r3, r5
 8005f84:	1891      	adds	r1, r2, r2
 8005f86:	6439      	str	r1, [r7, #64]	; 0x40
 8005f88:	415b      	adcs	r3, r3
 8005f8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f90:	1912      	adds	r2, r2, r4
 8005f92:	eb45 0303 	adc.w	r3, r5, r3
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	00d9      	lsls	r1, r3, #3
 8005fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fa4:	00d0      	lsls	r0, r2, #3
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	1911      	adds	r1, r2, r4
 8005fac:	6639      	str	r1, [r7, #96]	; 0x60
 8005fae:	416b      	adcs	r3, r5
 8005fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fcc:	f7fa fb0c 	bl	80005e8 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4ba5      	ldr	r3, [pc, #660]	; (800626c <UART_SetConfig+0x38c>)
 8005fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	011e      	lsls	r6, r3, #4
 8005fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fe0:	461c      	mov	r4, r3
 8005fe2:	f04f 0500 	mov.w	r5, #0
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	1891      	adds	r1, r2, r2
 8005fec:	6339      	str	r1, [r7, #48]	; 0x30
 8005fee:	415b      	adcs	r3, r3
 8005ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ff6:	1912      	adds	r2, r2, r4
 8005ff8:	eb45 0303 	adc.w	r3, r5, r3
 8005ffc:	f04f 0000 	mov.w	r0, #0
 8006000:	f04f 0100 	mov.w	r1, #0
 8006004:	00d9      	lsls	r1, r3, #3
 8006006:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800600a:	00d0      	lsls	r0, r2, #3
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	1911      	adds	r1, r2, r4
 8006012:	65b9      	str	r1, [r7, #88]	; 0x58
 8006014:	416b      	adcs	r3, r5
 8006016:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	461a      	mov	r2, r3
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	1891      	adds	r1, r2, r2
 8006024:	62b9      	str	r1, [r7, #40]	; 0x28
 8006026:	415b      	adcs	r3, r3
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800602e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006032:	f7fa fad9 	bl	80005e8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b8c      	ldr	r3, [pc, #560]	; (800626c <UART_SetConfig+0x38c>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a87      	ldr	r2, [pc, #540]	; (800626c <UART_SetConfig+0x38c>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800605c:	441e      	add	r6, r3
 800605e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006060:	4618      	mov	r0, r3
 8006062:	f04f 0100 	mov.w	r1, #0
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	1894      	adds	r4, r2, r2
 800606c:	623c      	str	r4, [r7, #32]
 800606e:	415b      	adcs	r3, r3
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006076:	1812      	adds	r2, r2, r0
 8006078:	eb41 0303 	adc.w	r3, r1, r3
 800607c:	f04f 0400 	mov.w	r4, #0
 8006080:	f04f 0500 	mov.w	r5, #0
 8006084:	00dd      	lsls	r5, r3, #3
 8006086:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800608a:	00d4      	lsls	r4, r2, #3
 800608c:	4622      	mov	r2, r4
 800608e:	462b      	mov	r3, r5
 8006090:	1814      	adds	r4, r2, r0
 8006092:	653c      	str	r4, [r7, #80]	; 0x50
 8006094:	414b      	adcs	r3, r1
 8006096:	657b      	str	r3, [r7, #84]	; 0x54
 8006098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	461a      	mov	r2, r3
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	1891      	adds	r1, r2, r2
 80060a4:	61b9      	str	r1, [r7, #24]
 80060a6:	415b      	adcs	r3, r3
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060b2:	f7fa fa99 	bl	80005e8 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4b6c      	ldr	r3, [pc, #432]	; (800626c <UART_SetConfig+0x38c>)
 80060bc:	fba3 1302 	umull	r1, r3, r3, r2
 80060c0:	095b      	lsrs	r3, r3, #5
 80060c2:	2164      	movs	r1, #100	; 0x64
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	3332      	adds	r3, #50	; 0x32
 80060ce:	4a67      	ldr	r2, [pc, #412]	; (800626c <UART_SetConfig+0x38c>)
 80060d0:	fba2 2303 	umull	r2, r3, r2, r3
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0207 	and.w	r2, r3, #7
 80060da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4432      	add	r2, r6
 80060e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060e2:	e0b9      	b.n	8006258 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e6:	461c      	mov	r4, r3
 80060e8:	f04f 0500 	mov.w	r5, #0
 80060ec:	4622      	mov	r2, r4
 80060ee:	462b      	mov	r3, r5
 80060f0:	1891      	adds	r1, r2, r2
 80060f2:	6139      	str	r1, [r7, #16]
 80060f4:	415b      	adcs	r3, r3
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060fc:	1912      	adds	r2, r2, r4
 80060fe:	eb45 0303 	adc.w	r3, r5, r3
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f04f 0100 	mov.w	r1, #0
 800610a:	00d9      	lsls	r1, r3, #3
 800610c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006110:	00d0      	lsls	r0, r2, #3
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	eb12 0804 	adds.w	r8, r2, r4
 800611a:	eb43 0905 	adc.w	r9, r3, r5
 800611e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	008b      	lsls	r3, r1, #2
 8006132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006136:	0082      	lsls	r2, r0, #2
 8006138:	4640      	mov	r0, r8
 800613a:	4649      	mov	r1, r9
 800613c:	f7fa fa54 	bl	80005e8 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4b49      	ldr	r3, [pc, #292]	; (800626c <UART_SetConfig+0x38c>)
 8006146:	fba3 2302 	umull	r2, r3, r3, r2
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	011e      	lsls	r6, r3, #4
 800614e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006150:	4618      	mov	r0, r3
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	1894      	adds	r4, r2, r2
 800615c:	60bc      	str	r4, [r7, #8]
 800615e:	415b      	adcs	r3, r3
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006166:	1812      	adds	r2, r2, r0
 8006168:	eb41 0303 	adc.w	r3, r1, r3
 800616c:	f04f 0400 	mov.w	r4, #0
 8006170:	f04f 0500 	mov.w	r5, #0
 8006174:	00dd      	lsls	r5, r3, #3
 8006176:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800617a:	00d4      	lsls	r4, r2, #3
 800617c:	4622      	mov	r2, r4
 800617e:	462b      	mov	r3, r5
 8006180:	1814      	adds	r4, r2, r0
 8006182:	64bc      	str	r4, [r7, #72]	; 0x48
 8006184:	414b      	adcs	r3, r1
 8006186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4618      	mov	r0, r3
 800618e:	f04f 0100 	mov.w	r1, #0
 8006192:	f04f 0200 	mov.w	r2, #0
 8006196:	f04f 0300 	mov.w	r3, #0
 800619a:	008b      	lsls	r3, r1, #2
 800619c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061a0:	0082      	lsls	r2, r0, #2
 80061a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061a6:	f7fa fa1f 	bl	80005e8 <__aeabi_uldivmod>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4b2f      	ldr	r3, [pc, #188]	; (800626c <UART_SetConfig+0x38c>)
 80061b0:	fba3 1302 	umull	r1, r3, r3, r2
 80061b4:	095b      	lsrs	r3, r3, #5
 80061b6:	2164      	movs	r1, #100	; 0x64
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	3332      	adds	r3, #50	; 0x32
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <UART_SetConfig+0x38c>)
 80061c4:	fba2 2303 	umull	r2, r3, r2, r3
 80061c8:	095b      	lsrs	r3, r3, #5
 80061ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ce:	441e      	add	r6, r3
 80061d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d2:	4618      	mov	r0, r3
 80061d4:	f04f 0100 	mov.w	r1, #0
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	1894      	adds	r4, r2, r2
 80061de:	603c      	str	r4, [r7, #0]
 80061e0:	415b      	adcs	r3, r3
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061e8:	1812      	adds	r2, r2, r0
 80061ea:	eb41 0303 	adc.w	r3, r1, r3
 80061ee:	f04f 0400 	mov.w	r4, #0
 80061f2:	f04f 0500 	mov.w	r5, #0
 80061f6:	00dd      	lsls	r5, r3, #3
 80061f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061fc:	00d4      	lsls	r4, r2, #3
 80061fe:	4622      	mov	r2, r4
 8006200:	462b      	mov	r3, r5
 8006202:	eb12 0a00 	adds.w	sl, r2, r0
 8006206:	eb43 0b01 	adc.w	fp, r3, r1
 800620a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	4618      	mov	r0, r3
 8006210:	f04f 0100 	mov.w	r1, #0
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	008b      	lsls	r3, r1, #2
 800621e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006222:	0082      	lsls	r2, r0, #2
 8006224:	4650      	mov	r0, sl
 8006226:	4659      	mov	r1, fp
 8006228:	f7fa f9de 	bl	80005e8 <__aeabi_uldivmod>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4b0e      	ldr	r3, [pc, #56]	; (800626c <UART_SetConfig+0x38c>)
 8006232:	fba3 1302 	umull	r1, r3, r3, r2
 8006236:	095b      	lsrs	r3, r3, #5
 8006238:	2164      	movs	r1, #100	; 0x64
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	3332      	adds	r3, #50	; 0x32
 8006244:	4a09      	ldr	r2, [pc, #36]	; (800626c <UART_SetConfig+0x38c>)
 8006246:	fba2 2303 	umull	r2, r3, r2, r3
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4432      	add	r2, r6
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	377c      	adds	r7, #124	; 0x7c
 800625c:	46bd      	mov	sp, r7
 800625e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006262:	bf00      	nop
 8006264:	40011000 	.word	0x40011000
 8006268:	40011400 	.word	0x40011400
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4b20      	ldr	r3, [pc, #128]	; (8006310 <FSMC_NORSRAM_Init+0xa0>)
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800629a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80062a0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80062a6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80062ac:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80062b2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80062b8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80062be:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80062c4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80062ca:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80062d0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80062d6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80062dc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d103      	bne.n	80062f4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	fff00080 	.word	0xfff00080

08006314 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006336:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006342:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800634a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006352:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	3b01      	subs	r3, #1
 800635a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800635c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	3b02      	subs	r3, #2
 8006364:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006366:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800636c:	4313      	orrs	r3, r2
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6979      	ldr	r1, [r7, #20]
 800637c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a8:	d122      	bne.n	80063f0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4b15      	ldr	r3, [pc, #84]	; (800640c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063c6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80063ce:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80063d6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80063dc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6979      	ldr	r1, [r7, #20]
 80063ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80063ee:	e005      	b.n	80063fc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80063f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	cff00000 	.word	0xcff00000

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000014 	.word	0x20000014

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 fc82 	bl	8006d38 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08006dcc 	.word	0x08006dcc
 8006458:	08006dcc 	.word	0x08006dcc
 800645c:	08006dcc 	.word	0x08006dcc
 8006460:	08006dd0 	.word	0x08006dd0

08006464 <memset>:
 8006464:	4402      	add	r2, r0
 8006466:	4603      	mov	r3, r0
 8006468:	4293      	cmp	r3, r2
 800646a:	d100      	bne.n	800646e <memset+0xa>
 800646c:	4770      	bx	lr
 800646e:	f803 1b01 	strb.w	r1, [r3], #1
 8006472:	e7f9      	b.n	8006468 <memset+0x4>

08006474 <sniprintf>:
 8006474:	b40c      	push	{r2, r3}
 8006476:	b530      	push	{r4, r5, lr}
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <sniprintf+0x64>)
 800647a:	1e0c      	subs	r4, r1, #0
 800647c:	681d      	ldr	r5, [r3, #0]
 800647e:	b09d      	sub	sp, #116	; 0x74
 8006480:	da08      	bge.n	8006494 <sniprintf+0x20>
 8006482:	238b      	movs	r3, #139	; 0x8b
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	b01d      	add	sp, #116	; 0x74
 800648c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006490:	b002      	add	sp, #8
 8006492:	4770      	bx	lr
 8006494:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006498:	f8ad 3014 	strh.w	r3, [sp, #20]
 800649c:	bf14      	ite	ne
 800649e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80064a2:	4623      	moveq	r3, r4
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	9307      	str	r3, [sp, #28]
 80064a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ac:	9002      	str	r0, [sp, #8]
 80064ae:	9006      	str	r0, [sp, #24]
 80064b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064b6:	ab21      	add	r3, sp, #132	; 0x84
 80064b8:	a902      	add	r1, sp, #8
 80064ba:	4628      	mov	r0, r5
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	f000 f889 	bl	80065d4 <_svfiprintf_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	bfbc      	itt	lt
 80064c6:	238b      	movlt	r3, #139	; 0x8b
 80064c8:	602b      	strlt	r3, [r5, #0]
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	d0dd      	beq.n	800648a <sniprintf+0x16>
 80064ce:	9b02      	ldr	r3, [sp, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e7d9      	b.n	800648a <sniprintf+0x16>
 80064d6:	bf00      	nop
 80064d8:	20000014 	.word	0x20000014

080064dc <siprintf>:
 80064dc:	b40e      	push	{r1, r2, r3}
 80064de:	b500      	push	{lr}
 80064e0:	b09c      	sub	sp, #112	; 0x70
 80064e2:	ab1d      	add	r3, sp, #116	; 0x74
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064ec:	4809      	ldr	r0, [pc, #36]	; (8006514 <siprintf+0x38>)
 80064ee:	9107      	str	r1, [sp, #28]
 80064f0:	9104      	str	r1, [sp, #16]
 80064f2:	4909      	ldr	r1, [pc, #36]	; (8006518 <siprintf+0x3c>)
 80064f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f8:	9105      	str	r1, [sp, #20]
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	a902      	add	r1, sp, #8
 8006500:	f000 f868 	bl	80065d4 <_svfiprintf_r>
 8006504:	9b02      	ldr	r3, [sp, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	b01c      	add	sp, #112	; 0x70
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b003      	add	sp, #12
 8006512:	4770      	bx	lr
 8006514:	20000014 	.word	0x20000014
 8006518:	ffff0208 	.word	0xffff0208

0800651c <__ssputs_r>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	688e      	ldr	r6, [r1, #8]
 8006522:	429e      	cmp	r6, r3
 8006524:	4682      	mov	sl, r0
 8006526:	460c      	mov	r4, r1
 8006528:	4690      	mov	r8, r2
 800652a:	461f      	mov	r7, r3
 800652c:	d838      	bhi.n	80065a0 <__ssputs_r+0x84>
 800652e:	898a      	ldrh	r2, [r1, #12]
 8006530:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006534:	d032      	beq.n	800659c <__ssputs_r+0x80>
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	6909      	ldr	r1, [r1, #16]
 800653a:	eba5 0901 	sub.w	r9, r5, r1
 800653e:	6965      	ldr	r5, [r4, #20]
 8006540:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006544:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006548:	3301      	adds	r3, #1
 800654a:	444b      	add	r3, r9
 800654c:	106d      	asrs	r5, r5, #1
 800654e:	429d      	cmp	r5, r3
 8006550:	bf38      	it	cc
 8006552:	461d      	movcc	r5, r3
 8006554:	0553      	lsls	r3, r2, #21
 8006556:	d531      	bpl.n	80065bc <__ssputs_r+0xa0>
 8006558:	4629      	mov	r1, r5
 800655a:	f000 fb47 	bl	8006bec <_malloc_r>
 800655e:	4606      	mov	r6, r0
 8006560:	b950      	cbnz	r0, 8006578 <__ssputs_r+0x5c>
 8006562:	230c      	movs	r3, #12
 8006564:	f8ca 3000 	str.w	r3, [sl]
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	464a      	mov	r2, r9
 800657c:	f000 fabe 	bl	8006afc <memcpy>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	6126      	str	r6, [r4, #16]
 800658e:	6165      	str	r5, [r4, #20]
 8006590:	444e      	add	r6, r9
 8006592:	eba5 0509 	sub.w	r5, r5, r9
 8006596:	6026      	str	r6, [r4, #0]
 8006598:	60a5      	str	r5, [r4, #8]
 800659a:	463e      	mov	r6, r7
 800659c:	42be      	cmp	r6, r7
 800659e:	d900      	bls.n	80065a2 <__ssputs_r+0x86>
 80065a0:	463e      	mov	r6, r7
 80065a2:	4632      	mov	r2, r6
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	4641      	mov	r1, r8
 80065a8:	f000 fab6 	bl	8006b18 <memmove>
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	1b9b      	subs	r3, r3, r6
 80065b2:	4432      	add	r2, r6
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	2000      	movs	r0, #0
 80065ba:	e7db      	b.n	8006574 <__ssputs_r+0x58>
 80065bc:	462a      	mov	r2, r5
 80065be:	f000 fb6f 	bl	8006ca0 <_realloc_r>
 80065c2:	4606      	mov	r6, r0
 80065c4:	2800      	cmp	r0, #0
 80065c6:	d1e1      	bne.n	800658c <__ssputs_r+0x70>
 80065c8:	6921      	ldr	r1, [r4, #16]
 80065ca:	4650      	mov	r0, sl
 80065cc:	f000 fabe 	bl	8006b4c <_free_r>
 80065d0:	e7c7      	b.n	8006562 <__ssputs_r+0x46>
	...

080065d4 <_svfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	4698      	mov	r8, r3
 80065da:	898b      	ldrh	r3, [r1, #12]
 80065dc:	061b      	lsls	r3, r3, #24
 80065de:	b09d      	sub	sp, #116	; 0x74
 80065e0:	4607      	mov	r7, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	4614      	mov	r4, r2
 80065e6:	d50e      	bpl.n	8006606 <_svfiprintf_r+0x32>
 80065e8:	690b      	ldr	r3, [r1, #16]
 80065ea:	b963      	cbnz	r3, 8006606 <_svfiprintf_r+0x32>
 80065ec:	2140      	movs	r1, #64	; 0x40
 80065ee:	f000 fafd 	bl	8006bec <_malloc_r>
 80065f2:	6028      	str	r0, [r5, #0]
 80065f4:	6128      	str	r0, [r5, #16]
 80065f6:	b920      	cbnz	r0, 8006602 <_svfiprintf_r+0x2e>
 80065f8:	230c      	movs	r3, #12
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006600:	e0d1      	b.n	80067a6 <_svfiprintf_r+0x1d2>
 8006602:	2340      	movs	r3, #64	; 0x40
 8006604:	616b      	str	r3, [r5, #20]
 8006606:	2300      	movs	r3, #0
 8006608:	9309      	str	r3, [sp, #36]	; 0x24
 800660a:	2320      	movs	r3, #32
 800660c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006610:	f8cd 800c 	str.w	r8, [sp, #12]
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067c0 <_svfiprintf_r+0x1ec>
 800661a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800661e:	f04f 0901 	mov.w	r9, #1
 8006622:	4623      	mov	r3, r4
 8006624:	469a      	mov	sl, r3
 8006626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662a:	b10a      	cbz	r2, 8006630 <_svfiprintf_r+0x5c>
 800662c:	2a25      	cmp	r2, #37	; 0x25
 800662e:	d1f9      	bne.n	8006624 <_svfiprintf_r+0x50>
 8006630:	ebba 0b04 	subs.w	fp, sl, r4
 8006634:	d00b      	beq.n	800664e <_svfiprintf_r+0x7a>
 8006636:	465b      	mov	r3, fp
 8006638:	4622      	mov	r2, r4
 800663a:	4629      	mov	r1, r5
 800663c:	4638      	mov	r0, r7
 800663e:	f7ff ff6d 	bl	800651c <__ssputs_r>
 8006642:	3001      	adds	r0, #1
 8006644:	f000 80aa 	beq.w	800679c <_svfiprintf_r+0x1c8>
 8006648:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664a:	445a      	add	r2, fp
 800664c:	9209      	str	r2, [sp, #36]	; 0x24
 800664e:	f89a 3000 	ldrb.w	r3, [sl]
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 80a2 	beq.w	800679c <_svfiprintf_r+0x1c8>
 8006658:	2300      	movs	r3, #0
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006662:	f10a 0a01 	add.w	sl, sl, #1
 8006666:	9304      	str	r3, [sp, #16]
 8006668:	9307      	str	r3, [sp, #28]
 800666a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800666e:	931a      	str	r3, [sp, #104]	; 0x68
 8006670:	4654      	mov	r4, sl
 8006672:	2205      	movs	r2, #5
 8006674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006678:	4851      	ldr	r0, [pc, #324]	; (80067c0 <_svfiprintf_r+0x1ec>)
 800667a:	f7f9 fda9 	bl	80001d0 <memchr>
 800667e:	9a04      	ldr	r2, [sp, #16]
 8006680:	b9d8      	cbnz	r0, 80066ba <_svfiprintf_r+0xe6>
 8006682:	06d0      	lsls	r0, r2, #27
 8006684:	bf44      	itt	mi
 8006686:	2320      	movmi	r3, #32
 8006688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800668c:	0711      	lsls	r1, r2, #28
 800668e:	bf44      	itt	mi
 8006690:	232b      	movmi	r3, #43	; 0x2b
 8006692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006696:	f89a 3000 	ldrb.w	r3, [sl]
 800669a:	2b2a      	cmp	r3, #42	; 0x2a
 800669c:	d015      	beq.n	80066ca <_svfiprintf_r+0xf6>
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	4654      	mov	r4, sl
 80066a2:	2000      	movs	r0, #0
 80066a4:	f04f 0c0a 	mov.w	ip, #10
 80066a8:	4621      	mov	r1, r4
 80066aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066ae:	3b30      	subs	r3, #48	; 0x30
 80066b0:	2b09      	cmp	r3, #9
 80066b2:	d94e      	bls.n	8006752 <_svfiprintf_r+0x17e>
 80066b4:	b1b0      	cbz	r0, 80066e4 <_svfiprintf_r+0x110>
 80066b6:	9207      	str	r2, [sp, #28]
 80066b8:	e014      	b.n	80066e4 <_svfiprintf_r+0x110>
 80066ba:	eba0 0308 	sub.w	r3, r0, r8
 80066be:	fa09 f303 	lsl.w	r3, r9, r3
 80066c2:	4313      	orrs	r3, r2
 80066c4:	9304      	str	r3, [sp, #16]
 80066c6:	46a2      	mov	sl, r4
 80066c8:	e7d2      	b.n	8006670 <_svfiprintf_r+0x9c>
 80066ca:	9b03      	ldr	r3, [sp, #12]
 80066cc:	1d19      	adds	r1, r3, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfbb      	ittet	lt
 80066d6:	425b      	neglt	r3, r3
 80066d8:	f042 0202 	orrlt.w	r2, r2, #2
 80066dc:	9307      	strge	r3, [sp, #28]
 80066de:	9307      	strlt	r3, [sp, #28]
 80066e0:	bfb8      	it	lt
 80066e2:	9204      	strlt	r2, [sp, #16]
 80066e4:	7823      	ldrb	r3, [r4, #0]
 80066e6:	2b2e      	cmp	r3, #46	; 0x2e
 80066e8:	d10c      	bne.n	8006704 <_svfiprintf_r+0x130>
 80066ea:	7863      	ldrb	r3, [r4, #1]
 80066ec:	2b2a      	cmp	r3, #42	; 0x2a
 80066ee:	d135      	bne.n	800675c <_svfiprintf_r+0x188>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	9203      	str	r2, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfb8      	it	lt
 80066fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006700:	3402      	adds	r4, #2
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067d0 <_svfiprintf_r+0x1fc>
 8006708:	7821      	ldrb	r1, [r4, #0]
 800670a:	2203      	movs	r2, #3
 800670c:	4650      	mov	r0, sl
 800670e:	f7f9 fd5f 	bl	80001d0 <memchr>
 8006712:	b140      	cbz	r0, 8006726 <_svfiprintf_r+0x152>
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	eba0 000a 	sub.w	r0, r0, sl
 800671a:	fa03 f000 	lsl.w	r0, r3, r0
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	4303      	orrs	r3, r0
 8006722:	3401      	adds	r4, #1
 8006724:	9304      	str	r3, [sp, #16]
 8006726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672a:	4826      	ldr	r0, [pc, #152]	; (80067c4 <_svfiprintf_r+0x1f0>)
 800672c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006730:	2206      	movs	r2, #6
 8006732:	f7f9 fd4d 	bl	80001d0 <memchr>
 8006736:	2800      	cmp	r0, #0
 8006738:	d038      	beq.n	80067ac <_svfiprintf_r+0x1d8>
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <_svfiprintf_r+0x1f4>)
 800673c:	bb1b      	cbnz	r3, 8006786 <_svfiprintf_r+0x1b2>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	3307      	adds	r3, #7
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	3308      	adds	r3, #8
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674c:	4433      	add	r3, r6
 800674e:	9309      	str	r3, [sp, #36]	; 0x24
 8006750:	e767      	b.n	8006622 <_svfiprintf_r+0x4e>
 8006752:	fb0c 3202 	mla	r2, ip, r2, r3
 8006756:	460c      	mov	r4, r1
 8006758:	2001      	movs	r0, #1
 800675a:	e7a5      	b.n	80066a8 <_svfiprintf_r+0xd4>
 800675c:	2300      	movs	r3, #0
 800675e:	3401      	adds	r4, #1
 8006760:	9305      	str	r3, [sp, #20]
 8006762:	4619      	mov	r1, r3
 8006764:	f04f 0c0a 	mov.w	ip, #10
 8006768:	4620      	mov	r0, r4
 800676a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800676e:	3a30      	subs	r2, #48	; 0x30
 8006770:	2a09      	cmp	r2, #9
 8006772:	d903      	bls.n	800677c <_svfiprintf_r+0x1a8>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0c5      	beq.n	8006704 <_svfiprintf_r+0x130>
 8006778:	9105      	str	r1, [sp, #20]
 800677a:	e7c3      	b.n	8006704 <_svfiprintf_r+0x130>
 800677c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006780:	4604      	mov	r4, r0
 8006782:	2301      	movs	r3, #1
 8006784:	e7f0      	b.n	8006768 <_svfiprintf_r+0x194>
 8006786:	ab03      	add	r3, sp, #12
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	462a      	mov	r2, r5
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <_svfiprintf_r+0x1f8>)
 800678e:	a904      	add	r1, sp, #16
 8006790:	4638      	mov	r0, r7
 8006792:	f3af 8000 	nop.w
 8006796:	1c42      	adds	r2, r0, #1
 8006798:	4606      	mov	r6, r0
 800679a:	d1d6      	bne.n	800674a <_svfiprintf_r+0x176>
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	065b      	lsls	r3, r3, #25
 80067a0:	f53f af2c 	bmi.w	80065fc <_svfiprintf_r+0x28>
 80067a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a6:	b01d      	add	sp, #116	; 0x74
 80067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <_svfiprintf_r+0x1f8>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4638      	mov	r0, r7
 80067b8:	f000 f87a 	bl	80068b0 <_printf_i>
 80067bc:	e7eb      	b.n	8006796 <_svfiprintf_r+0x1c2>
 80067be:	bf00      	nop
 80067c0:	08006d90 	.word	0x08006d90
 80067c4:	08006d9a 	.word	0x08006d9a
 80067c8:	00000000 	.word	0x00000000
 80067cc:	0800651d 	.word	0x0800651d
 80067d0:	08006d96 	.word	0x08006d96

080067d4 <_printf_common>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	4616      	mov	r6, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	688a      	ldr	r2, [r1, #8]
 80067de:	690b      	ldr	r3, [r1, #16]
 80067e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	bfb8      	it	lt
 80067e8:	4613      	movlt	r3, r2
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f0:	4607      	mov	r7, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	b10a      	cbz	r2, 80067fa <_printf_common+0x26>
 80067f6:	3301      	adds	r3, #1
 80067f8:	6033      	str	r3, [r6, #0]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	0699      	lsls	r1, r3, #26
 80067fe:	bf42      	ittt	mi
 8006800:	6833      	ldrmi	r3, [r6, #0]
 8006802:	3302      	addmi	r3, #2
 8006804:	6033      	strmi	r3, [r6, #0]
 8006806:	6825      	ldr	r5, [r4, #0]
 8006808:	f015 0506 	ands.w	r5, r5, #6
 800680c:	d106      	bne.n	800681c <_printf_common+0x48>
 800680e:	f104 0a19 	add.w	sl, r4, #25
 8006812:	68e3      	ldr	r3, [r4, #12]
 8006814:	6832      	ldr	r2, [r6, #0]
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	42ab      	cmp	r3, r5
 800681a:	dc26      	bgt.n	800686a <_printf_common+0x96>
 800681c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006820:	1e13      	subs	r3, r2, #0
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	bf18      	it	ne
 8006826:	2301      	movne	r3, #1
 8006828:	0692      	lsls	r2, r2, #26
 800682a:	d42b      	bmi.n	8006884 <_printf_common+0xb0>
 800682c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006830:	4649      	mov	r1, r9
 8006832:	4638      	mov	r0, r7
 8006834:	47c0      	blx	r8
 8006836:	3001      	adds	r0, #1
 8006838:	d01e      	beq.n	8006878 <_printf_common+0xa4>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	68e5      	ldr	r5, [r4, #12]
 800683e:	6832      	ldr	r2, [r6, #0]
 8006840:	f003 0306 	and.w	r3, r3, #6
 8006844:	2b04      	cmp	r3, #4
 8006846:	bf08      	it	eq
 8006848:	1aad      	subeq	r5, r5, r2
 800684a:	68a3      	ldr	r3, [r4, #8]
 800684c:	6922      	ldr	r2, [r4, #16]
 800684e:	bf0c      	ite	eq
 8006850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006854:	2500      	movne	r5, #0
 8006856:	4293      	cmp	r3, r2
 8006858:	bfc4      	itt	gt
 800685a:	1a9b      	subgt	r3, r3, r2
 800685c:	18ed      	addgt	r5, r5, r3
 800685e:	2600      	movs	r6, #0
 8006860:	341a      	adds	r4, #26
 8006862:	42b5      	cmp	r5, r6
 8006864:	d11a      	bne.n	800689c <_printf_common+0xc8>
 8006866:	2000      	movs	r0, #0
 8006868:	e008      	b.n	800687c <_printf_common+0xa8>
 800686a:	2301      	movs	r3, #1
 800686c:	4652      	mov	r2, sl
 800686e:	4649      	mov	r1, r9
 8006870:	4638      	mov	r0, r7
 8006872:	47c0      	blx	r8
 8006874:	3001      	adds	r0, #1
 8006876:	d103      	bne.n	8006880 <_printf_common+0xac>
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006880:	3501      	adds	r5, #1
 8006882:	e7c6      	b.n	8006812 <_printf_common+0x3e>
 8006884:	18e1      	adds	r1, r4, r3
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	2030      	movs	r0, #48	; 0x30
 800688a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800688e:	4422      	add	r2, r4
 8006890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006898:	3302      	adds	r3, #2
 800689a:	e7c7      	b.n	800682c <_printf_common+0x58>
 800689c:	2301      	movs	r3, #1
 800689e:	4622      	mov	r2, r4
 80068a0:	4649      	mov	r1, r9
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c0      	blx	r8
 80068a6:	3001      	adds	r0, #1
 80068a8:	d0e6      	beq.n	8006878 <_printf_common+0xa4>
 80068aa:	3601      	adds	r6, #1
 80068ac:	e7d9      	b.n	8006862 <_printf_common+0x8e>
	...

080068b0 <_printf_i>:
 80068b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	460c      	mov	r4, r1
 80068b6:	4691      	mov	r9, r2
 80068b8:	7e27      	ldrb	r7, [r4, #24]
 80068ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068bc:	2f78      	cmp	r7, #120	; 0x78
 80068be:	4680      	mov	r8, r0
 80068c0:	469a      	mov	sl, r3
 80068c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068c6:	d807      	bhi.n	80068d8 <_printf_i+0x28>
 80068c8:	2f62      	cmp	r7, #98	; 0x62
 80068ca:	d80a      	bhi.n	80068e2 <_printf_i+0x32>
 80068cc:	2f00      	cmp	r7, #0
 80068ce:	f000 80d8 	beq.w	8006a82 <_printf_i+0x1d2>
 80068d2:	2f58      	cmp	r7, #88	; 0x58
 80068d4:	f000 80a3 	beq.w	8006a1e <_printf_i+0x16e>
 80068d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068e0:	e03a      	b.n	8006958 <_printf_i+0xa8>
 80068e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068e6:	2b15      	cmp	r3, #21
 80068e8:	d8f6      	bhi.n	80068d8 <_printf_i+0x28>
 80068ea:	a001      	add	r0, pc, #4	; (adr r0, 80068f0 <_printf_i+0x40>)
 80068ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068f0:	08006949 	.word	0x08006949
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	080068d9 	.word	0x080068d9
 80068fc:	080068d9 	.word	0x080068d9
 8006900:	080068d9 	.word	0x080068d9
 8006904:	080068d9 	.word	0x080068d9
 8006908:	0800695d 	.word	0x0800695d
 800690c:	080068d9 	.word	0x080068d9
 8006910:	080068d9 	.word	0x080068d9
 8006914:	080068d9 	.word	0x080068d9
 8006918:	080068d9 	.word	0x080068d9
 800691c:	08006a69 	.word	0x08006a69
 8006920:	0800698d 	.word	0x0800698d
 8006924:	08006a4b 	.word	0x08006a4b
 8006928:	080068d9 	.word	0x080068d9
 800692c:	080068d9 	.word	0x080068d9
 8006930:	08006a8b 	.word	0x08006a8b
 8006934:	080068d9 	.word	0x080068d9
 8006938:	0800698d 	.word	0x0800698d
 800693c:	080068d9 	.word	0x080068d9
 8006940:	080068d9 	.word	0x080068d9
 8006944:	08006a53 	.word	0x08006a53
 8006948:	680b      	ldr	r3, [r1, #0]
 800694a:	1d1a      	adds	r2, r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	600a      	str	r2, [r1, #0]
 8006950:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006958:	2301      	movs	r3, #1
 800695a:	e0a3      	b.n	8006aa4 <_printf_i+0x1f4>
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	6808      	ldr	r0, [r1, #0]
 8006960:	062e      	lsls	r6, r5, #24
 8006962:	f100 0304 	add.w	r3, r0, #4
 8006966:	d50a      	bpl.n	800697e <_printf_i+0xce>
 8006968:	6805      	ldr	r5, [r0, #0]
 800696a:	600b      	str	r3, [r1, #0]
 800696c:	2d00      	cmp	r5, #0
 800696e:	da03      	bge.n	8006978 <_printf_i+0xc8>
 8006970:	232d      	movs	r3, #45	; 0x2d
 8006972:	426d      	negs	r5, r5
 8006974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006978:	485e      	ldr	r0, [pc, #376]	; (8006af4 <_printf_i+0x244>)
 800697a:	230a      	movs	r3, #10
 800697c:	e019      	b.n	80069b2 <_printf_i+0x102>
 800697e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006982:	6805      	ldr	r5, [r0, #0]
 8006984:	600b      	str	r3, [r1, #0]
 8006986:	bf18      	it	ne
 8006988:	b22d      	sxthne	r5, r5
 800698a:	e7ef      	b.n	800696c <_printf_i+0xbc>
 800698c:	680b      	ldr	r3, [r1, #0]
 800698e:	6825      	ldr	r5, [r4, #0]
 8006990:	1d18      	adds	r0, r3, #4
 8006992:	6008      	str	r0, [r1, #0]
 8006994:	0628      	lsls	r0, r5, #24
 8006996:	d501      	bpl.n	800699c <_printf_i+0xec>
 8006998:	681d      	ldr	r5, [r3, #0]
 800699a:	e002      	b.n	80069a2 <_printf_i+0xf2>
 800699c:	0669      	lsls	r1, r5, #25
 800699e:	d5fb      	bpl.n	8006998 <_printf_i+0xe8>
 80069a0:	881d      	ldrh	r5, [r3, #0]
 80069a2:	4854      	ldr	r0, [pc, #336]	; (8006af4 <_printf_i+0x244>)
 80069a4:	2f6f      	cmp	r7, #111	; 0x6f
 80069a6:	bf0c      	ite	eq
 80069a8:	2308      	moveq	r3, #8
 80069aa:	230a      	movne	r3, #10
 80069ac:	2100      	movs	r1, #0
 80069ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069b2:	6866      	ldr	r6, [r4, #4]
 80069b4:	60a6      	str	r6, [r4, #8]
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	bfa2      	ittt	ge
 80069ba:	6821      	ldrge	r1, [r4, #0]
 80069bc:	f021 0104 	bicge.w	r1, r1, #4
 80069c0:	6021      	strge	r1, [r4, #0]
 80069c2:	b90d      	cbnz	r5, 80069c8 <_printf_i+0x118>
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	d04d      	beq.n	8006a64 <_printf_i+0x1b4>
 80069c8:	4616      	mov	r6, r2
 80069ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ce:	fb03 5711 	mls	r7, r3, r1, r5
 80069d2:	5dc7      	ldrb	r7, [r0, r7]
 80069d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d8:	462f      	mov	r7, r5
 80069da:	42bb      	cmp	r3, r7
 80069dc:	460d      	mov	r5, r1
 80069de:	d9f4      	bls.n	80069ca <_printf_i+0x11a>
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d10b      	bne.n	80069fc <_printf_i+0x14c>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	07df      	lsls	r7, r3, #31
 80069e8:	d508      	bpl.n	80069fc <_printf_i+0x14c>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	6861      	ldr	r1, [r4, #4]
 80069ee:	4299      	cmp	r1, r3
 80069f0:	bfde      	ittt	le
 80069f2:	2330      	movle	r3, #48	; 0x30
 80069f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069fc:	1b92      	subs	r2, r2, r6
 80069fe:	6122      	str	r2, [r4, #16]
 8006a00:	f8cd a000 	str.w	sl, [sp]
 8006a04:	464b      	mov	r3, r9
 8006a06:	aa03      	add	r2, sp, #12
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7ff fee2 	bl	80067d4 <_printf_common>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d14c      	bne.n	8006aae <_printf_i+0x1fe>
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	b004      	add	sp, #16
 8006a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1e:	4835      	ldr	r0, [pc, #212]	; (8006af4 <_printf_i+0x244>)
 8006a20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	680e      	ldr	r6, [r1, #0]
 8006a28:	061f      	lsls	r7, r3, #24
 8006a2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a2e:	600e      	str	r6, [r1, #0]
 8006a30:	d514      	bpl.n	8006a5c <_printf_i+0x1ac>
 8006a32:	07d9      	lsls	r1, r3, #31
 8006a34:	bf44      	itt	mi
 8006a36:	f043 0320 	orrmi.w	r3, r3, #32
 8006a3a:	6023      	strmi	r3, [r4, #0]
 8006a3c:	b91d      	cbnz	r5, 8006a46 <_printf_i+0x196>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	f023 0320 	bic.w	r3, r3, #32
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	2310      	movs	r3, #16
 8006a48:	e7b0      	b.n	80069ac <_printf_i+0xfc>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	f043 0320 	orr.w	r3, r3, #32
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	2378      	movs	r3, #120	; 0x78
 8006a54:	4828      	ldr	r0, [pc, #160]	; (8006af8 <_printf_i+0x248>)
 8006a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a5a:	e7e3      	b.n	8006a24 <_printf_i+0x174>
 8006a5c:	065e      	lsls	r6, r3, #25
 8006a5e:	bf48      	it	mi
 8006a60:	b2ad      	uxthmi	r5, r5
 8006a62:	e7e6      	b.n	8006a32 <_printf_i+0x182>
 8006a64:	4616      	mov	r6, r2
 8006a66:	e7bb      	b.n	80069e0 <_printf_i+0x130>
 8006a68:	680b      	ldr	r3, [r1, #0]
 8006a6a:	6826      	ldr	r6, [r4, #0]
 8006a6c:	6960      	ldr	r0, [r4, #20]
 8006a6e:	1d1d      	adds	r5, r3, #4
 8006a70:	600d      	str	r5, [r1, #0]
 8006a72:	0635      	lsls	r5, r6, #24
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	d501      	bpl.n	8006a7c <_printf_i+0x1cc>
 8006a78:	6018      	str	r0, [r3, #0]
 8006a7a:	e002      	b.n	8006a82 <_printf_i+0x1d2>
 8006a7c:	0671      	lsls	r1, r6, #25
 8006a7e:	d5fb      	bpl.n	8006a78 <_printf_i+0x1c8>
 8006a80:	8018      	strh	r0, [r3, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	4616      	mov	r6, r2
 8006a88:	e7ba      	b.n	8006a00 <_printf_i+0x150>
 8006a8a:	680b      	ldr	r3, [r1, #0]
 8006a8c:	1d1a      	adds	r2, r3, #4
 8006a8e:	600a      	str	r2, [r1, #0]
 8006a90:	681e      	ldr	r6, [r3, #0]
 8006a92:	6862      	ldr	r2, [r4, #4]
 8006a94:	2100      	movs	r1, #0
 8006a96:	4630      	mov	r0, r6
 8006a98:	f7f9 fb9a 	bl	80001d0 <memchr>
 8006a9c:	b108      	cbz	r0, 8006aa2 <_printf_i+0x1f2>
 8006a9e:	1b80      	subs	r0, r0, r6
 8006aa0:	6060      	str	r0, [r4, #4]
 8006aa2:	6863      	ldr	r3, [r4, #4]
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aac:	e7a8      	b.n	8006a00 <_printf_i+0x150>
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d0ab      	beq.n	8006a14 <_printf_i+0x164>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	079b      	lsls	r3, r3, #30
 8006ac0:	d413      	bmi.n	8006aea <_printf_i+0x23a>
 8006ac2:	68e0      	ldr	r0, [r4, #12]
 8006ac4:	9b03      	ldr	r3, [sp, #12]
 8006ac6:	4298      	cmp	r0, r3
 8006ac8:	bfb8      	it	lt
 8006aca:	4618      	movlt	r0, r3
 8006acc:	e7a4      	b.n	8006a18 <_printf_i+0x168>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	47d0      	blx	sl
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d09b      	beq.n	8006a14 <_printf_i+0x164>
 8006adc:	3501      	adds	r5, #1
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	9903      	ldr	r1, [sp, #12]
 8006ae2:	1a5b      	subs	r3, r3, r1
 8006ae4:	42ab      	cmp	r3, r5
 8006ae6:	dcf2      	bgt.n	8006ace <_printf_i+0x21e>
 8006ae8:	e7eb      	b.n	8006ac2 <_printf_i+0x212>
 8006aea:	2500      	movs	r5, #0
 8006aec:	f104 0619 	add.w	r6, r4, #25
 8006af0:	e7f5      	b.n	8006ade <_printf_i+0x22e>
 8006af2:	bf00      	nop
 8006af4:	08006da1 	.word	0x08006da1
 8006af8:	08006db2 	.word	0x08006db2

08006afc <memcpy>:
 8006afc:	440a      	add	r2, r1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b04:	d100      	bne.n	8006b08 <memcpy+0xc>
 8006b06:	4770      	bx	lr
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b12:	4291      	cmp	r1, r2
 8006b14:	d1f9      	bne.n	8006b0a <memcpy+0xe>
 8006b16:	bd10      	pop	{r4, pc}

08006b18 <memmove>:
 8006b18:	4288      	cmp	r0, r1
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	eb01 0402 	add.w	r4, r1, r2
 8006b20:	d902      	bls.n	8006b28 <memmove+0x10>
 8006b22:	4284      	cmp	r4, r0
 8006b24:	4623      	mov	r3, r4
 8006b26:	d807      	bhi.n	8006b38 <memmove+0x20>
 8006b28:	1e43      	subs	r3, r0, #1
 8006b2a:	42a1      	cmp	r1, r4
 8006b2c:	d008      	beq.n	8006b40 <memmove+0x28>
 8006b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b36:	e7f8      	b.n	8006b2a <memmove+0x12>
 8006b38:	4402      	add	r2, r0
 8006b3a:	4601      	mov	r1, r0
 8006b3c:	428a      	cmp	r2, r1
 8006b3e:	d100      	bne.n	8006b42 <memmove+0x2a>
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b4a:	e7f7      	b.n	8006b3c <memmove+0x24>

08006b4c <_free_r>:
 8006b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	d048      	beq.n	8006be4 <_free_r+0x98>
 8006b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b56:	9001      	str	r0, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006b5e:	bfb8      	it	lt
 8006b60:	18e4      	addlt	r4, r4, r3
 8006b62:	f000 f8d3 	bl	8006d0c <__malloc_lock>
 8006b66:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <_free_r+0x9c>)
 8006b68:	9801      	ldr	r0, [sp, #4]
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	b933      	cbnz	r3, 8006b7e <_free_r+0x32>
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	6014      	str	r4, [r2, #0]
 8006b74:	b003      	add	sp, #12
 8006b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b7a:	f000 b8cd 	b.w	8006d18 <__malloc_unlock>
 8006b7e:	42a3      	cmp	r3, r4
 8006b80:	d90b      	bls.n	8006b9a <_free_r+0x4e>
 8006b82:	6821      	ldr	r1, [r4, #0]
 8006b84:	1862      	adds	r2, r4, r1
 8006b86:	4293      	cmp	r3, r2
 8006b88:	bf04      	itt	eq
 8006b8a:	681a      	ldreq	r2, [r3, #0]
 8006b8c:	685b      	ldreq	r3, [r3, #4]
 8006b8e:	6063      	str	r3, [r4, #4]
 8006b90:	bf04      	itt	eq
 8006b92:	1852      	addeq	r2, r2, r1
 8006b94:	6022      	streq	r2, [r4, #0]
 8006b96:	602c      	str	r4, [r5, #0]
 8006b98:	e7ec      	b.n	8006b74 <_free_r+0x28>
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b10b      	cbz	r3, 8006ba4 <_free_r+0x58>
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d9fa      	bls.n	8006b9a <_free_r+0x4e>
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	1855      	adds	r5, r2, r1
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	d10b      	bne.n	8006bc4 <_free_r+0x78>
 8006bac:	6824      	ldr	r4, [r4, #0]
 8006bae:	4421      	add	r1, r4
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	d1dd      	bne.n	8006b74 <_free_r+0x28>
 8006bb8:	681c      	ldr	r4, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	4421      	add	r1, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	e7d7      	b.n	8006b74 <_free_r+0x28>
 8006bc4:	d902      	bls.n	8006bcc <_free_r+0x80>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	e7d3      	b.n	8006b74 <_free_r+0x28>
 8006bcc:	6825      	ldr	r5, [r4, #0]
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf04      	itt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	bf04      	itt	eq
 8006bdc:	1949      	addeq	r1, r1, r5
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	6054      	str	r4, [r2, #4]
 8006be2:	e7c7      	b.n	8006b74 <_free_r+0x28>
 8006be4:	b003      	add	sp, #12
 8006be6:	bd30      	pop	{r4, r5, pc}
 8006be8:	200000ac 	.word	0x200000ac

08006bec <_malloc_r>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	1ccd      	adds	r5, r1, #3
 8006bf0:	f025 0503 	bic.w	r5, r5, #3
 8006bf4:	3508      	adds	r5, #8
 8006bf6:	2d0c      	cmp	r5, #12
 8006bf8:	bf38      	it	cc
 8006bfa:	250c      	movcc	r5, #12
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	4606      	mov	r6, r0
 8006c00:	db01      	blt.n	8006c06 <_malloc_r+0x1a>
 8006c02:	42a9      	cmp	r1, r5
 8006c04:	d903      	bls.n	8006c0e <_malloc_r+0x22>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c0e:	f000 f87d 	bl	8006d0c <__malloc_lock>
 8006c12:	4921      	ldr	r1, [pc, #132]	; (8006c98 <_malloc_r+0xac>)
 8006c14:	680a      	ldr	r2, [r1, #0]
 8006c16:	4614      	mov	r4, r2
 8006c18:	b99c      	cbnz	r4, 8006c42 <_malloc_r+0x56>
 8006c1a:	4f20      	ldr	r7, [pc, #128]	; (8006c9c <_malloc_r+0xb0>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	b923      	cbnz	r3, 8006c2a <_malloc_r+0x3e>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f862 	bl	8006cec <_sbrk_r>
 8006c28:	6038      	str	r0, [r7, #0]
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 f85d 	bl	8006cec <_sbrk_r>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d123      	bne.n	8006c7e <_malloc_r+0x92>
 8006c36:	230c      	movs	r3, #12
 8006c38:	6033      	str	r3, [r6, #0]
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f000 f86c 	bl	8006d18 <__malloc_unlock>
 8006c40:	e7e3      	b.n	8006c0a <_malloc_r+0x1e>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	1b5b      	subs	r3, r3, r5
 8006c46:	d417      	bmi.n	8006c78 <_malloc_r+0x8c>
 8006c48:	2b0b      	cmp	r3, #11
 8006c4a:	d903      	bls.n	8006c54 <_malloc_r+0x68>
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	441c      	add	r4, r3
 8006c50:	6025      	str	r5, [r4, #0]
 8006c52:	e004      	b.n	8006c5e <_malloc_r+0x72>
 8006c54:	6863      	ldr	r3, [r4, #4]
 8006c56:	42a2      	cmp	r2, r4
 8006c58:	bf0c      	ite	eq
 8006c5a:	600b      	streq	r3, [r1, #0]
 8006c5c:	6053      	strne	r3, [r2, #4]
 8006c5e:	4630      	mov	r0, r6
 8006c60:	f000 f85a 	bl	8006d18 <__malloc_unlock>
 8006c64:	f104 000b 	add.w	r0, r4, #11
 8006c68:	1d23      	adds	r3, r4, #4
 8006c6a:	f020 0007 	bic.w	r0, r0, #7
 8006c6e:	1ac2      	subs	r2, r0, r3
 8006c70:	d0cc      	beq.n	8006c0c <_malloc_r+0x20>
 8006c72:	1a1b      	subs	r3, r3, r0
 8006c74:	50a3      	str	r3, [r4, r2]
 8006c76:	e7c9      	b.n	8006c0c <_malloc_r+0x20>
 8006c78:	4622      	mov	r2, r4
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7cc      	b.n	8006c18 <_malloc_r+0x2c>
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d0e3      	beq.n	8006c50 <_malloc_r+0x64>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f000 f82e 	bl	8006cec <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d1dd      	bne.n	8006c50 <_malloc_r+0x64>
 8006c94:	e7cf      	b.n	8006c36 <_malloc_r+0x4a>
 8006c96:	bf00      	nop
 8006c98:	200000ac 	.word	0x200000ac
 8006c9c:	200000b0 	.word	0x200000b0

08006ca0 <_realloc_r>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	4614      	mov	r4, r2
 8006ca6:	460e      	mov	r6, r1
 8006ca8:	b921      	cbnz	r1, 8006cb4 <_realloc_r+0x14>
 8006caa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cae:	4611      	mov	r1, r2
 8006cb0:	f7ff bf9c 	b.w	8006bec <_malloc_r>
 8006cb4:	b922      	cbnz	r2, 8006cc0 <_realloc_r+0x20>
 8006cb6:	f7ff ff49 	bl	8006b4c <_free_r>
 8006cba:	4625      	mov	r5, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc0:	f000 f830 	bl	8006d24 <_malloc_usable_size_r>
 8006cc4:	42a0      	cmp	r0, r4
 8006cc6:	d20f      	bcs.n	8006ce8 <_realloc_r+0x48>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f7ff ff8e 	bl	8006bec <_malloc_r>
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d0f2      	beq.n	8006cbc <_realloc_r+0x1c>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4622      	mov	r2, r4
 8006cda:	f7ff ff0f 	bl	8006afc <memcpy>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	f7ff ff33 	bl	8006b4c <_free_r>
 8006ce6:	e7e9      	b.n	8006cbc <_realloc_r+0x1c>
 8006ce8:	4635      	mov	r5, r6
 8006cea:	e7e7      	b.n	8006cbc <_realloc_r+0x1c>

08006cec <_sbrk_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d06      	ldr	r5, [pc, #24]	; (8006d08 <_sbrk_r+0x1c>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	602b      	str	r3, [r5, #0]
 8006cf8:	f7fa fe32 	bl	8001960 <_sbrk>
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d102      	bne.n	8006d06 <_sbrk_r+0x1a>
 8006d00:	682b      	ldr	r3, [r5, #0]
 8006d02:	b103      	cbz	r3, 8006d06 <_sbrk_r+0x1a>
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	bd38      	pop	{r3, r4, r5, pc}
 8006d08:	20000468 	.word	0x20000468

08006d0c <__malloc_lock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__malloc_lock+0x8>)
 8006d0e:	f000 b811 	b.w	8006d34 <__retarget_lock_acquire_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000470 	.word	0x20000470

08006d18 <__malloc_unlock>:
 8006d18:	4801      	ldr	r0, [pc, #4]	; (8006d20 <__malloc_unlock+0x8>)
 8006d1a:	f000 b80c 	b.w	8006d36 <__retarget_lock_release_recursive>
 8006d1e:	bf00      	nop
 8006d20:	20000470 	.word	0x20000470

08006d24 <_malloc_usable_size_r>:
 8006d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d28:	1f18      	subs	r0, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	bfbc      	itt	lt
 8006d2e:	580b      	ldrlt	r3, [r1, r0]
 8006d30:	18c0      	addlt	r0, r0, r3
 8006d32:	4770      	bx	lr

08006d34 <__retarget_lock_acquire_recursive>:
 8006d34:	4770      	bx	lr

08006d36 <__retarget_lock_release_recursive>:
 8006d36:	4770      	bx	lr

08006d38 <_init>:
 8006d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3a:	bf00      	nop
 8006d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3e:	bc08      	pop	{r3}
 8006d40:	469e      	mov	lr, r3
 8006d42:	4770      	bx	lr

08006d44 <_fini>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr
