
LAB5_UART_Excercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004388  08004388  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004388  08004388  00014388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000240  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019439  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033dd  00000000  00000000  0003947d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  0003c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  0003dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dcf  00000000  00000000  0003ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001997f  00000000  00000000  00042c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d71  00000000  00000000  0005c5ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f31f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051b4  00000000  00000000  0012f374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004350 	.word	0x08004350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004350 	.word	0x08004350

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_FSMC_Init+0xec>)
 80004ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_FSMC_Init+0xec>)
 80004f6:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <MX_FSMC_Init+0xf0>)
 80004f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_FSMC_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_FSMC_Init+0xec>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_FSMC_Init+0xec>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_FSMC_Init+0xec>)
 800050e:	2210      	movs	r2, #16
 8000510:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_FSMC_Init+0xec>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_FSMC_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_FSMC_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_FSMC_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_FSMC_Init+0xec>)
 800052c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FSMC_Init+0xec>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_FSMC_Init+0xec>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_FSMC_Init+0xec>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_FSMC_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_FSMC_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000552:	230f      	movs	r3, #15
 8000554:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000556:	230f      	movs	r3, #15
 8000558:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800055a:	233c      	movs	r3, #60	; 0x3c
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000566:	2311      	movs	r3, #17
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000572:	230f      	movs	r3, #15
 8000574:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000576:	2309      	movs	r3, #9
 8000578:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800057e:	2310      	movs	r3, #16
 8000580:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000582:	2311      	movs	r3, #17
 8000584:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800058a:	463a      	mov	r2, r7
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_FSMC_Init+0xec>)
 8000594:	f002 f9c4 	bl	8002920 <HAL_SRAM_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800059e:	f000 fb05 	bl	8000bac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005a2:	bf00      	nop
 80005a4:	3738      	adds	r7, #56	; 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000040 	.word	0x20000040
 80005b0:	a0000104 	.word	0xa0000104

080005b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d131      	bne.n	8000634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6393      	str	r3, [r2, #56]	; 0x38
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80005f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80005f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000604:	230c      	movs	r3, #12
 8000606:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_FSMC_MspInit+0x90>)
 800060e:	f000 ff89 	bl	8001524 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000612:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000624:	230c      	movs	r3, #12
 8000626:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_FSMC_MspInit+0x94>)
 800062e:	f000 ff79 	bl	8001524 <HAL_GPIO_Init>
 8000632:	e000      	b.n	8000636 <HAL_FSMC_MspInit+0x82>
    return;
 8000634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000030 	.word	0x20000030
 8000640:	40023800 	.word	0x40023800
 8000644:	40021000 	.word	0x40021000
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000654:	f7ff ffae 	bl	80005b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a67      	ldr	r2, [pc, #412]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b65      	ldr	r3, [pc, #404]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a60      	ldr	r2, [pc, #384]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a59      	ldr	r2, [pc, #356]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a52      	ldr	r2, [pc, #328]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a4b      	ldr	r2, [pc, #300]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b49      	ldr	r3, [pc, #292]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a44      	ldr	r2, [pc, #272]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2170      	movs	r1, #112	; 0x70
 800073e:	483f      	ldr	r0, [pc, #252]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000740:	f001 f88c 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	483d      	ldr	r0, [pc, #244]	; (8000840 <MX_GPIO_Init+0x1e0>)
 800074c:	f001 f886 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	483b      	ldr	r0, [pc, #236]	; (8000844 <MX_GPIO_Init+0x1e4>)
 8000756:	f001 f881 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000762:	f001 f87b 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4838      	ldr	r0, [pc, #224]	; (800084c <MX_GPIO_Init+0x1ec>)
 800076c:	f001 f876 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000770:	2370      	movs	r3, #112	; 0x70
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000788:	f000 fecc 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4826      	ldr	r0, [pc, #152]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007a6:	f000 febd 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80007aa:	23c0      	movs	r3, #192	; 0xc0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x1e8>)
 80007be:	f000 feb1 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80007c2:	2330      	movs	r3, #48	; 0x30
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007d6:	f000 fea5 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0x1e4>)
 80007f2:	f000 fe97 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000810:	f000 fe88 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000814:	2308      	movs	r3, #8
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_GPIO_Init+0x1ec>)
 800082c:	f000 fe7a 	bl	8001524 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020800 	.word	0x40020800
 8000844:	40021800 	.word	0x40021800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00

08000850 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f000 ffff 	bl	8001890 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f988 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	2304      	movs	r3, #4
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x8c>)
 8000906:	f000 fe0d 	bl	8001524 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_I2C_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40005400 	.word	0x40005400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400

0800093c <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000940:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <led7_Scan+0x104>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <led7_Scan+0x104>)
 800094a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <led7_Scan+0x108>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b3d      	ldr	r3, [pc, #244]	; (8000a48 <led7_Scan+0x10c>)
 8000954:	5c9b      	ldrb	r3, [r3, r2]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <led7_Scan+0x104>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	b21b      	sxth	r3, r3
 8000960:	4313      	orrs	r3, r2
 8000962:	b21b      	sxth	r3, r3
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <led7_Scan+0x104>)
 8000968:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800096a:	4b36      	ldr	r3, [pc, #216]	; (8000a44 <led7_Scan+0x108>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d846      	bhi.n	8000a00 <led7_Scan+0xc4>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <led7_Scan+0x3c>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000989 	.word	0x08000989
 800097c:	080009a7 	.word	0x080009a7
 8000980:	080009c5 	.word	0x080009c5
 8000984:	080009e3 	.word	0x080009e3
	case 0:
		spi_buffer |= 0x00b0;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <led7_Scan+0x104>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <led7_Scan+0x104>)
 8000994:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <led7_Scan+0x104>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <led7_Scan+0x104>)
 80009a2:	801a      	strh	r2, [r3, #0]
		break;
 80009a4:	e02d      	b.n	8000a02 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <led7_Scan+0x104>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <led7_Scan+0x104>)
 80009b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <led7_Scan+0x104>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	f023 0320 	bic.w	r3, r3, #32
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <led7_Scan+0x104>)
 80009c0:	801a      	strh	r2, [r3, #0]
		break;
 80009c2:	e01e      	b.n	8000a02 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <led7_Scan+0x104>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <led7_Scan+0x104>)
 80009d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <led7_Scan+0x104>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	f023 0310 	bic.w	r3, r3, #16
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <led7_Scan+0x104>)
 80009de:	801a      	strh	r2, [r3, #0]
		break;
 80009e0:	e00f      	b.n	8000a02 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <led7_Scan+0x104>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <led7_Scan+0x104>)
 80009ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <led7_Scan+0x104>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <led7_Scan+0x104>)
 80009fc:	801a      	strh	r2, [r3, #0]
		break;
 80009fe:	e000      	b.n	8000a02 <led7_Scan+0xc6>
	default:
		break;
 8000a00:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <led7_Scan+0x108>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	425a      	negs	r2, r3
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	f002 0203 	and.w	r2, r2, #3
 8000a12:	bf58      	it	pl
 8000a14:	4253      	negpl	r3, r2
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <led7_Scan+0x108>)
 8000a1a:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <led7_Scan+0x110>)
 8000a22:	f000 ff1b 	bl	800185c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000a26:	2301      	movs	r3, #1
 8000a28:	2202      	movs	r2, #2
 8000a2a:	4905      	ldr	r1, [pc, #20]	; (8000a40 <led7_Scan+0x104>)
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <led7_Scan+0x114>)
 8000a2e:	f001 fd70 	bl	8002512 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000a32:	2201      	movs	r2, #1
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <led7_Scan+0x110>)
 8000a38:	f000 ff10 	bl	800185c <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000034 	.word	0x20000034
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	2000016c 	.word	0x2000016c

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fb4e 	bl	80010f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f81a 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f7ff fdfe 	bl	8000660 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a64:	f000 fa14 	bl	8000e90 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000a68:	f000 f91c 	bl	8000ca4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000a6c:	f7ff fd28 	bl	80004c0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000a70:	f7ff feee 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a74:	f000 fa9c 	bl	8000fb0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(uart_data_ready) {
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <main+0x3c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0fa      	beq.n	8000a78 <main+0x24>
		  uart_data_ready = 0;
 8000a82:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <main+0x3c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
		  process_uart_data();
 8000a88:	f000 f86e 	bl	8000b68 <process_uart_data>
	  if(uart_data_ready) {
 8000a8c:	e7f4      	b.n	8000a78 <main+0x24>
 8000a8e:	bf00      	nop
 8000a90:	20000036 	.word	0x20000036

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	; 0x50
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0320 	add.w	r3, r7, #32
 8000a9e:	2230      	movs	r2, #48	; 0x30
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f003 fc4c 	bl	8004340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <SystemClock_Config+0xcc>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <SystemClock_Config+0xcc>)
 8000ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac8:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <SystemClock_Config+0xcc>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <SystemClock_Config+0xd0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <SystemClock_Config+0xd0>)
 8000ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <SystemClock_Config+0xd0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2310      	movs	r3, #16
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2302      	movs	r3, #2
 8000afe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b04:	2308      	movs	r3, #8
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b08:	23a8      	movs	r3, #168	; 0xa8
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b10:	2304      	movs	r3, #4
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fffd 	bl	8001b18 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b24:	f000 f842 	bl	8000bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2105      	movs	r1, #5
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fa5e 	bl	8002008 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b52:	f000 f82b 	bl	8000bac <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <process_uart_data>:
	  lcd_init();
	  uart_init_rs232();
	  setTimer2(50);
}

void process_uart_data(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	while (uart_rx_buffer.tail != uart_rx_buffer.head) {
 8000b6e:	e00c      	b.n	8000b8a <process_uart_data+0x22>
		uint8_t data = buffer_get(&uart_rx_buffer);
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <process_uart_data+0x3c>)
 8000b72:	f000 f840 	bl	8000bf6 <buffer_get>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Transmit(&huart1, &data, 1, HAL_MAX_DELAY); // Echo back received data
 8000b7c:	1df9      	adds	r1, r7, #7
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	2201      	movs	r2, #1
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <process_uart_data+0x40>)
 8000b86:	f002 fb6c 	bl	8003262 <HAL_UART_Transmit>
	while (uart_rx_buffer.tail != uart_rx_buffer.head) {
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <process_uart_data+0x3c>)
 8000b8c:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <process_uart_data+0x3c>)
 8000b92:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d1ea      	bne.n	8000b70 <process_uart_data+0x8>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000e4 	.word	0x200000e4
 8000ba8:	2000020c 	.word	0x2000020c

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>

08000bb6 <buffer_is_empty>:
    buf->head = 0;
    buf->tail = 0;
    buf->full = false;
}

bool buffer_is_empty(RingBuffer *buf) {
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
    return (buf->head == buf->tail) && !buf->full;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d109      	bne.n	8000be2 <buffer_is_empty+0x2c>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <buffer_is_empty+0x2c>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <buffer_is_empty+0x2e>
 8000be2:	2300      	movs	r3, #0
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	b2db      	uxtb	r3, r3
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <buffer_get>:
    buf->full = (buf->head == buf->tail);

    return true; // Success
}

bool buffer_get(RingBuffer *buf, uint8_t *data) {
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
    if (buffer_is_empty(buf)) {
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ffd8 	bl	8000bb6 <buffer_is_empty>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <buffer_get+0x1a>
        return false;  // No data to read
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e01b      	b.n	8000c48 <buffer_get+0x52>
    }

    *data = buf->buffer[buf->tail];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000c16:	461a      	mov	r2, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	5c9a      	ldrb	r2, [r3, r2]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	701a      	strb	r2, [r3, #0]
    buf->tail = (buf->tail + 1) % BUFFER_SIZE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000c26:	3301      	adds	r3, #1
 8000c28:	425a      	negs	r2, r3
 8000c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000c32:	bf58      	it	pl
 8000c34:	4253      	negpl	r3, r2
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    buf->full = false;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    return true;  // Read successfully
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c60:	d116      	bne.n	8000c90 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d010      	beq.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c74:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d106      	bne.n	8000c8c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c86:	881a      	ldrh	r2, [r3, #0]
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c8a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8000c8c:	f7ff fe56 	bl	800093c <led7_Scan>
	}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000003a 	.word	0x2000003a
 8000c9c:	20000038 	.word	0x20000038
 8000ca0:	2000003c 	.word	0x2000003c

08000ca4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <MX_SPI1_Init+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cf6:	f001 fb83 	bl	8002400 <HAL_SPI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d00:	f7ff ff54 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000016c 	.word	0x2000016c
 8000d0c:	40013000 	.word	0x40013000

08000d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_SPI_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_SPI_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d6a:	2338      	movs	r3, #56	; 0x38
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_SPI_MspInit+0x8c>)
 8000d86:	f000 fbcd 	bl	8001524 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_MspInit+0x4c>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_MspInit+0x4c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x4c>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x4c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f9ae 	bl	800119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM2_IRQHandler+0x10>)
 8000e4a:	f001 fdfc 	bl	8002a46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200001c4 	.word	0x200001c4

08000e58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <USART1_IRQHandler+0x10>)
 8000e5e:	f002 fac3 	bl	80033e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000020c 	.word	0x2000020c

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	f240 3247 	movw	r2, #839	; 0x347
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec4:	2263      	movs	r2, #99	; 0x63
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f001 fd67 	bl	80029a8 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f7ff fe64 	bl	8000bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 feb0 	bl	8002c56 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f7ff fe56 	bl	8000bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f002 f8cb 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f7ff fe48 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200001c4 	.word	0x200001c4

08000f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f38:	d115      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	201c      	movs	r0, #28
 8000f5c:	f000 fa19 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f60:	201c      	movs	r0, #28
 8000f62:	f000 fa32 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_UART_RxCpltCallback+0x30>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10a      	bne.n	8000f9c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8000f86:	230a      	movs	r3, #10
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <HAL_UART_RxCpltCallback+0x34>)
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <HAL_UART_RxCpltCallback+0x38>)
 8000f8e:	f002 f968 	bl	8003262 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8000f92:	2201      	movs	r2, #1
 8000f94:	4904      	ldr	r1, [pc, #16]	; (8000fa8 <HAL_UART_RxCpltCallback+0x34>)
 8000f96:	4805      	ldr	r0, [pc, #20]	; (8000fac <HAL_UART_RxCpltCallback+0x38>)
 8000f98:	f002 f9f5 	bl	8003386 <HAL_UART_Receive_IT>
	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	2000003e 	.word	0x2000003e
 8000fac:	2000020c 	.word	0x2000020c

08000fb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <MX_USART1_UART_Init+0x50>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_USART1_UART_Init+0x4c>)
 8000fe8:	f002 f8ee 	bl	80031c8 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ff2:	f7ff fddb 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000020c 	.word	0x2000020c
 8001000:	40011000 	.word	0x40011000

08001004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <HAL_UART_MspInit+0x94>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d134      	bne.n	8001090 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_UART_MspInit+0x98>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a1b      	ldr	r2, [pc, #108]	; (800109c <HAL_UART_MspInit+0x98>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_UART_MspInit+0x98>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_UART_MspInit+0x98>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_UART_MspInit+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800105e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001070:	2307      	movs	r3, #7
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4619      	mov	r1, r3
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <HAL_UART_MspInit+0x9c>)
 800107c:	f000 fa52 	bl	8001524 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2025      	movs	r0, #37	; 0x25
 8001086:	f000 f984 	bl	8001392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800108a:	2025      	movs	r0, #37	; 0x25
 800108c:	f000 f99d 	bl	80013ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40011000 	.word	0x40011000
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020000 	.word	0x40020000

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ce:	f7ff fecd 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f003 f911 	bl	80042f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fcbd 	bl	8000a54 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010e8:	08004390 	.word	0x08004390
  ldr r2, =_sbss
 80010ec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010f0:	20000254 	.word	0x20000254

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f92b 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe38 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f943 	bl	80013e6 <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f90b 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000008 	.word	0x20000008
 8001194:	20000010 	.word	0x20000010
 8001198:	2000000c 	.word	0x2000000c

0800119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x20>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x24>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_IncTick+0x24>)
 80011ae:	6013      	str	r3, [r2, #0]
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000010 	.word	0x20000010
 80011c0:	20000250 	.word	0x20000250

080011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <HAL_GetTick+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000250 	.word	0x20000250

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	2b00      	cmp	r3, #0
 8001250:	db0b      	blt.n	800126a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 021f 	and.w	r2, r3, #31
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <__NVIC_EnableIRQ+0x38>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	2001      	movs	r0, #1
 8001262:	fa00 f202 	lsl.w	r2, r0, r2
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000e100 	.word	0xe000e100

0800127c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	db0a      	blt.n	80012a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	b2da      	uxtb	r2, r3
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <__NVIC_SetPriority+0x4c>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	440b      	add	r3, r1
 80012a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a4:	e00a      	b.n	80012bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4908      	ldr	r1, [pc, #32]	; (80012cc <__NVIC_SetPriority+0x50>)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	3b04      	subs	r3, #4
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	440b      	add	r3, r1
 80012ba:	761a      	strb	r2, [r3, #24]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f1c3 0307 	rsb	r3, r3, #7
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	bf28      	it	cs
 80012ee:	2304      	movcs	r3, #4
 80012f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3304      	adds	r3, #4
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d902      	bls.n	8001300 <NVIC_EncodePriority+0x30>
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3b03      	subs	r3, #3
 80012fe:	e000      	b.n	8001302 <NVIC_EncodePriority+0x32>
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	f04f 32ff 	mov.w	r2, #4294967295
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	401a      	ands	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001318:	f04f 31ff 	mov.w	r1, #4294967295
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	43d9      	mvns	r1, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	4313      	orrs	r3, r2
         );
}
 800132a:	4618      	mov	r0, r3
 800132c:	3724      	adds	r7, #36	; 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff8e 	bl	800127c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff29 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff3e 	bl	8001224 <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff8e 	bl	80012d0 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5d 	bl	800127c <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff31 	bl	8001240 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff feda 	bl	80011c4 <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d008      	beq.n	8001430 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2280      	movs	r2, #128	; 0x80
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e052      	b.n	80014d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0216 	bic.w	r2, r2, #22
 800143e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800144e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <HAL_DMA_Abort+0x62>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	2b00      	cmp	r3, #0
 800145e:	d007      	beq.n	8001470 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0208 	bic.w	r2, r2, #8
 800146e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001480:	e013      	b.n	80014aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001482:	f7ff fe9f 	bl	80011c4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b05      	cmp	r3, #5
 800148e:	d90c      	bls.n	80014aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2220      	movs	r2, #32
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e015      	b.n	80014d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e4      	bne.n	8001482 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014bc:	223f      	movs	r2, #63	; 0x3f
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d004      	beq.n	80014fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00c      	b.n	8001516 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2205      	movs	r2, #5
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e16b      	b.n	8001818 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 815a 	bne.w	8001812 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80b4 	beq.w	8001812 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b60      	ldr	r3, [pc, #384]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a5f      	ldr	r2, [pc, #380]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b5d      	ldr	r3, [pc, #372]	; (8001830 <HAL_GPIO_Init+0x30c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a5b      	ldr	r2, [pc, #364]	; (8001834 <HAL_GPIO_Init+0x310>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x314>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a51      	ldr	r2, [pc, #324]	; (800183c <HAL_GPIO_Init+0x318>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d025      	beq.n	8001746 <HAL_GPIO_Init+0x222>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a50      	ldr	r2, [pc, #320]	; (8001840 <HAL_GPIO_Init+0x31c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01f      	beq.n	8001742 <HAL_GPIO_Init+0x21e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	; (8001844 <HAL_GPIO_Init+0x320>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x21a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4e      	ldr	r2, [pc, #312]	; (8001848 <HAL_GPIO_Init+0x324>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x216>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4d      	ldr	r2, [pc, #308]	; (800184c <HAL_GPIO_Init+0x328>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x212>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_GPIO_Init+0x32c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x20e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x330>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x20a>
 800172a:	2307      	movs	r3, #7
 800172c:	e00e      	b.n	800174c <HAL_GPIO_Init+0x228>
 800172e:	2308      	movs	r3, #8
 8001730:	e00c      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001732:	2306      	movs	r3, #6
 8001734:	e00a      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001736:	2305      	movs	r3, #5
 8001738:	e008      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173a:	2304      	movs	r3, #4
 800173c:	e006      	b.n	800174c <HAL_GPIO_Init+0x228>
 800173e:	2303      	movs	r3, #3
 8001740:	e004      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001742:	2302      	movs	r3, #2
 8001744:	e002      	b.n	800174c <HAL_GPIO_Init+0x228>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <HAL_GPIO_Init+0x228>
 800174a:	2300      	movs	r3, #0
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	4093      	lsls	r3, r2
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	4935      	ldr	r1, [pc, #212]	; (8001834 <HAL_GPIO_Init+0x310>)
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <HAL_GPIO_Init+0x334>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178e:	4a32      	ldr	r2, [pc, #200]	; (8001858 <HAL_GPIO_Init+0x334>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_GPIO_Init+0x334>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017b8:	4a27      	ldr	r2, [pc, #156]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017e2:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_GPIO_Init+0x334>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_GPIO_Init+0x334>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	f67f ae90 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40013800 	.word	0x40013800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800
 8001844:	40020c00 	.word	0x40020c00
 8001848:	40021000 	.word	0x40021000
 800184c:	40021400 	.word	0x40021400
 8001850:	40021800 	.word	0x40021800
 8001854:	40021c00 	.word	0x40021c00
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e12b      	b.n	8001afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7fe fff8 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f4:	f000 fd5c 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80018f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a81      	ldr	r2, [pc, #516]	; (8001b04 <HAL_I2C_Init+0x274>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d807      	bhi.n	8001914 <HAL_I2C_Init+0x84>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a80      	ldr	r2, [pc, #512]	; (8001b08 <HAL_I2C_Init+0x278>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e006      	b.n	8001922 <HAL_I2C_Init+0x92>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a7d      	ldr	r2, [pc, #500]	; (8001b0c <HAL_I2C_Init+0x27c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e7      	b.n	8001afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a78      	ldr	r2, [pc, #480]	; (8001b10 <HAL_I2C_Init+0x280>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_I2C_Init+0x274>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d802      	bhi.n	8001964 <HAL_I2C_Init+0xd4>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	e009      	b.n	8001978 <HAL_I2C_Init+0xe8>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_I2C_Init+0x284>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	3301      	adds	r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800198a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	495c      	ldr	r1, [pc, #368]	; (8001b04 <HAL_I2C_Init+0x274>)
 8001994:	428b      	cmp	r3, r1
 8001996:	d819      	bhi.n	80019cc <HAL_I2C_Init+0x13c>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e59      	subs	r1, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019ac:	400b      	ands	r3, r1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_I2C_Init+0x138>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e59      	subs	r1, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c6:	e051      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e04f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <HAL_I2C_Init+0x168>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1e58      	subs	r0, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e012      	b.n	8001a1e <HAL_I2C_Init+0x18e>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	0099      	lsls	r1, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x196>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e022      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <HAL_I2C_Init+0x1bc>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e58      	subs	r0, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	440b      	add	r3, r1
 8001a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	e00f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1e58      	subs	r0, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	0099      	lsls	r1, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	6809      	ldr	r1, [r1, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6911      	ldr	r1, [r2, #16]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68d2      	ldr	r2, [r2, #12]
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	000186a0 	.word	0x000186a0
 8001b08:	001e847f 	.word	0x001e847f
 8001b0c:	003d08ff 	.word	0x003d08ff
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e264      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d075      	beq.n	8001c22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b36:	4ba3      	ldr	r3, [pc, #652]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d00c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b42:	4ba0      	ldr	r3, [pc, #640]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d112      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b9d      	ldr	r3, [pc, #628]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	4b99      	ldr	r3, [pc, #612]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d05b      	beq.n	8001c20 <HAL_RCC_OscConfig+0x108>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d157      	bne.n	8001c20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e23f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d106      	bne.n	8001b8c <HAL_RCC_OscConfig+0x74>
 8001b7e:	4b91      	ldr	r3, [pc, #580]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a90      	ldr	r2, [pc, #576]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b8b      	ldr	r3, [pc, #556]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a8a      	ldr	r2, [pc, #552]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a87      	ldr	r2, [pc, #540]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xb0>
 8001bb0:	4b84      	ldr	r3, [pc, #528]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a83      	ldr	r2, [pc, #524]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a80      	ldr	r2, [pc, #512]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff faf8 	bl	80011c4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff faf4 	bl	80011c4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e204      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xc0>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fae4 	bl	80011c4 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fae0 	bl	80011c4 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1f0      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0xe8>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3a:	4b62      	ldr	r3, [pc, #392]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1c4      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4952      	ldr	r1, [pc, #328]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b4f      	ldr	r3, [pc, #316]	; (8001dc8 <HAL_RCC_OscConfig+0x2b0>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fa99 	bl	80011c4 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fa95 	bl	80011c4 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1a5      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b46      	ldr	r3, [pc, #280]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4940      	ldr	r1, [pc, #256]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_OscConfig+0x2b0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fa78 	bl	80011c4 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fa74 	bl	80011c4 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e184      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d030      	beq.n	8001d64 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d016      	beq.n	8001d38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x2b4>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d10:	f7ff fa58 	bl	80011c4 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fa54 	bl	80011c4 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e164      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x200>
 8001d36:	e015      	b.n	8001d64 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x2b4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fa41 	bl	80011c4 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fa3d 	bl	80011c4 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e14d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a0 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10f      	bne.n	8001da2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_RCC_OscConfig+0x2b8>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dba:	f7ff fa03 	bl	80011c4 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	e011      	b.n	8001de6 <HAL_RCC_OscConfig+0x2ce>
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470000 	.word	0x42470000
 8001dcc:	42470e80 	.word	0x42470e80
 8001dd0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff f9f6 	bl	80011c4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e106      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <HAL_RCC_OscConfig+0x4e4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a80      	ldr	r2, [pc, #512]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
 8001e06:	e01c      	b.n	8001e42 <HAL_RCC_OscConfig+0x32a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e10:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a7a      	ldr	r2, [pc, #488]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	4b78      	ldr	r3, [pc, #480]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4a77      	ldr	r2, [pc, #476]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6713      	str	r3, [r2, #112]	; 0x70
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x32a>
 8001e2a:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	4a74      	ldr	r2, [pc, #464]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	; 0x70
 8001e36:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a71      	ldr	r2, [pc, #452]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d015      	beq.n	8001e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f9bb 	bl	80011c4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff f9b7 	bl	80011c4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0c5      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e68:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ee      	beq.n	8001e52 <HAL_RCC_OscConfig+0x33a>
 8001e74:	e014      	b.n	8001ea0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff f9a5 	bl	80011c4 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f9a1 	bl	80011c4 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0af      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e94:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ee      	bne.n	8001e7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a55      	ldr	r2, [pc, #340]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 809b 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d05c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d141      	bne.n	8001f54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x4ec>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff f975 	bl	80011c4 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff f971 	bl	80011c4 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e081      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef0:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	019b      	lsls	r3, r3, #6
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	3b01      	subs	r3, #1
 8001f16:	041b      	lsls	r3, r3, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	061b      	lsls	r3, r3, #24
 8001f20:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_RCC_OscConfig+0x4ec>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff f94a 	bl	80011c4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff f946 	bl	80011c4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e056      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x41c>
 8001f52:	e04e      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x4ec>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f933 	bl	80011c4 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f62:	f7ff f92f 	bl	80011c4 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e03f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f74:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f0      	bne.n	8001f62 <HAL_RCC_OscConfig+0x44a>
 8001f80:	e037      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e032      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d028      	beq.n	8001fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d11a      	bne.n	8001fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d111      	bne.n	8001fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40007000 	.word	0x40007000
 8002000:	40023800 	.word	0x40023800
 8002004:	42470060 	.word	0x42470060

08002008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0cc      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d90c      	bls.n	8002044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002066:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800207e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d044      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d119      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d003      	beq.n	80020c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3b      	ldr	r3, [pc, #236]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e067      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4934      	ldr	r1, [pc, #208]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f864 	bl	80011c4 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f860 	bl	80011c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e04f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe ffc4 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08004368 	.word	0x08004368
 80021cc:	20000008 	.word	0x20000008
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	2300      	movs	r3, #0
 80021e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ec:	4b67      	ldr	r3, [pc, #412]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d00d      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x40>
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f200 80bd 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x1a4>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x34>
 8002202:	2b04      	cmp	r3, #4
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x3a>
 8002206:	e0b7      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800220a:	60bb      	str	r3, [r7, #8]
       break;
 800220c:	e0b7      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002210:	60bb      	str	r3, [r7, #8]
      break;
 8002212:	e0b4      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002214:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800221c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04d      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4b58      	ldr	r3, [pc, #352]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	461a      	mov	r2, r3
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223a:	f04f 0100 	mov.w	r1, #0
 800223e:	ea02 0800 	and.w	r8, r2, r0
 8002242:	ea03 0901 	and.w	r9, r3, r1
 8002246:	4640      	mov	r0, r8
 8002248:	4649      	mov	r1, r9
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	014b      	lsls	r3, r1, #5
 8002254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002258:	0142      	lsls	r2, r0, #5
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	ebb0 0008 	subs.w	r0, r0, r8
 8002262:	eb61 0109 	sbc.w	r1, r1, r9
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	018b      	lsls	r3, r1, #6
 8002270:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002274:	0182      	lsls	r2, r0, #6
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	eb63 0301 	sbc.w	r3, r3, r1
 800227c:	f04f 0000 	mov.w	r0, #0
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	00d9      	lsls	r1, r3, #3
 8002286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800228a:	00d0      	lsls	r0, r2, #3
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	eb12 0208 	adds.w	r2, r2, r8
 8002294:	eb43 0309 	adc.w	r3, r3, r9
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0259      	lsls	r1, r3, #9
 80022a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022a6:	0250      	lsls	r0, r2, #9
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f7fd ff86 	bl	80001c8 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e04a      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	461a      	mov	r2, r3
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	ea02 0400 	and.w	r4, r2, r0
 80022de:	ea03 0501 	and.w	r5, r3, r1
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	014b      	lsls	r3, r1, #5
 80022f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022f4:	0142      	lsls	r2, r0, #5
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	1b00      	subs	r0, r0, r4
 80022fc:	eb61 0105 	sbc.w	r1, r1, r5
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	018b      	lsls	r3, r1, #6
 800230a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800230e:	0182      	lsls	r2, r0, #6
 8002310:	1a12      	subs	r2, r2, r0
 8002312:	eb63 0301 	sbc.w	r3, r3, r1
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	f04f 0100 	mov.w	r1, #0
 800231e:	00d9      	lsls	r1, r3, #3
 8002320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002324:	00d0      	lsls	r0, r2, #3
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	1912      	adds	r2, r2, r4
 800232c:	eb45 0303 	adc.w	r3, r5, r3
 8002330:	f04f 0000 	mov.w	r0, #0
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	0299      	lsls	r1, r3, #10
 800233a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800233e:	0290      	lsls	r0, r2, #10
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	461a      	mov	r2, r3
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	f7fd ff3a 	bl	80001c8 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	60bb      	str	r3, [r7, #8]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800237a:	60bb      	str	r3, [r7, #8]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	68bb      	ldr	r3, [r7, #8]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	007a1200 	.word	0x007a1200

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0a9b      	lsrs	r3, r3, #10
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08004378 	.word	0x08004378

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023dc:	f7ff ffdc 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0b5b      	lsrs	r3, r3, #13
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08004378 	.word	0x08004378

08002400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07b      	b.n	800250a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002422:	d009      	beq.n	8002438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
 800242a:	e005      	b.n	8002438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7fe fc5c 	bl	8000d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800246e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	0c1b      	lsrs	r3, r3, #16
 80024d6:	f003 0104 	and.w	r1, r3, #4
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f003 0210 	and.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	603b      	str	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_SPI_Transmit+0x22>
 8002530:	2302      	movs	r3, #2
 8002532:	e126      	b.n	8002782 <HAL_SPI_Transmit+0x270>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800253c:	f7fe fe42 	bl	80011c4 <HAL_GetTick>
 8002540:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d002      	beq.n	8002558 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002556:	e10b      	b.n	8002770 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_Transmit+0x52>
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002568:	e102      	b.n	8002770 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	88fa      	ldrh	r2, [r7, #6]
 8002588:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b0:	d10f      	bne.n	80025d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d007      	beq.n	80025f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025f8:	d14b      	bne.n	8002692 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_SPI_Transmit+0xf6>
 8002602:	8afb      	ldrh	r3, [r7, #22]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d13e      	bne.n	8002686 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800262c:	e02b      	b.n	8002686 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d112      	bne.n	8002662 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	881a      	ldrh	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002660:	e011      	b.n	8002686 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002662:	f7fe fdaf 	bl	80011c4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d803      	bhi.n	800267a <HAL_SPI_Transmit+0x168>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d102      	bne.n	8002680 <HAL_SPI_Transmit+0x16e>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002684:	e074      	b.n	8002770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ce      	bne.n	800262e <HAL_SPI_Transmit+0x11c>
 8002690:	e04c      	b.n	800272c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Transmit+0x18e>
 800269a:	8afb      	ldrh	r3, [r7, #22]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d140      	bne.n	8002722 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	330c      	adds	r3, #12
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026c6:	e02c      	b.n	8002722 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d113      	bne.n	80026fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80026fc:	e011      	b.n	8002722 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026fe:	f7fe fd61 	bl	80011c4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d803      	bhi.n	8002716 <HAL_SPI_Transmit+0x204>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d102      	bne.n	800271c <HAL_SPI_Transmit+0x20a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002720:	e026      	b.n	8002770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1cd      	bne.n	80026c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	6839      	ldr	r1, [r7, #0]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f8b3 	bl	800289c <SPI_EndRxTxTransaction>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10a      	bne.n	8002760 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	e000      	b.n	8002770 <HAL_SPI_Transmit+0x25e>
  }

error:
 800276e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002780:	7ffb      	ldrb	r3, [r7, #31]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800279c:	f7fe fd12 	bl	80011c4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	4413      	add	r3, r2
 80027aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027ac:	f7fe fd0a 	bl	80011c4 <HAL_GetTick>
 80027b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027b2:	4b39      	ldr	r3, [pc, #228]	; (8002898 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	015b      	lsls	r3, r3, #5
 80027b8:	0d1b      	lsrs	r3, r3, #20
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c2:	e054      	b.n	800286e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d050      	beq.n	800286e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027cc:	f7fe fcfa 	bl	80011c4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d902      	bls.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d13d      	bne.n	800285e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fa:	d111      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002804:	d004      	beq.n	8002810 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d107      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d10f      	bne.n	800284a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e017      	b.n	800288e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3b01      	subs	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	429a      	cmp	r2, r3
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	429a      	cmp	r2, r3
 800288a:	d19b      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008

0800289c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <SPI_EndRxTxTransaction+0x7c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <SPI_EndRxTxTransaction+0x80>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0d5b      	lsrs	r3, r3, #21
 80028b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d112      	bne.n	80028ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff ff5a 	bl	800278c <SPI_WaitFlagStateUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	f043 0220 	orr.w	r2, r3, #32
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e00f      	b.n	800290e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d0f2      	beq.n	80028ee <SPI_EndRxTxTransaction+0x52>
 8002908:	e000      	b.n	800290c <SPI_EndRxTxTransaction+0x70>
        break;
 800290a:	bf00      	nop
  }

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	165e9f81 	.word	0x165e9f81

08002920 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e034      	b.n	80029a0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7fd fe7e 	bl	800064c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3308      	adds	r3, #8
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f001 fbfc 	bl	8004158 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	461a      	mov	r2, r3
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	f001 fc46 	bl	80041fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6858      	ldr	r0, [r3, #4]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	f001 fc7b 	bl	8004278 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	f041 0101 	orr.w	r1, r1, #1
 800299a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7fe faaa 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 fa24 	bl	8002e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d122      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d11b      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f06f 0202 	mvn.w	r2, #2
 8002a72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f9b5 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002a8e:	e005      	b.n	8002a9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f9a7 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f9b8 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d122      	bne.n	8002af6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d11b      	bne.n	8002af6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f06f 0204 	mvn.w	r2, #4
 8002ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f98b 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002ae2:	e005      	b.n	8002af0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f97d 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f98e 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d122      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11b      	bne.n	8002b4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0208 	mvn.w	r2, #8
 8002b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f961 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b36:	e005      	b.n	8002b44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f953 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f964 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d122      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d11b      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f06f 0210 	mvn.w	r2, #16
 8002b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2208      	movs	r2, #8
 8002b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f937 	bl	8002df8 <HAL_TIM_IC_CaptureCallback>
 8002b8a:	e005      	b.n	8002b98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f929 	bl	8002de4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f93a 	bl	8002e0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d10e      	bne.n	8002bca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f06f 0201 	mvn.w	r2, #1
 8002bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe f843 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fadf 	bl	80031b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d10e      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8ff 	bl	8002e20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0220 	mvn.w	r2, #32
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 faa9 	bl	80031a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_ConfigClockSource+0x1c>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e0b4      	b.n	8002ddc <HAL_TIM_ConfigClockSource+0x186>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d03e      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0xd4>
 8002cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb0:	f200 8087 	bhi.w	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	f000 8086 	beq.w	8002dc8 <HAL_TIM_ConfigClockSource+0x172>
 8002cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc0:	d87f      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc2:	2b70      	cmp	r3, #112	; 0x70
 8002cc4:	d01a      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0xa6>
 8002cc6:	2b70      	cmp	r3, #112	; 0x70
 8002cc8:	d87b      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cca:	2b60      	cmp	r3, #96	; 0x60
 8002ccc:	d050      	beq.n	8002d70 <HAL_TIM_ConfigClockSource+0x11a>
 8002cce:	2b60      	cmp	r3, #96	; 0x60
 8002cd0:	d877      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cd2:	2b50      	cmp	r3, #80	; 0x50
 8002cd4:	d03c      	beq.n	8002d50 <HAL_TIM_ConfigClockSource+0xfa>
 8002cd6:	2b50      	cmp	r3, #80	; 0x50
 8002cd8:	d873      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cda:	2b40      	cmp	r3, #64	; 0x40
 8002cdc:	d058      	beq.n	8002d90 <HAL_TIM_ConfigClockSource+0x13a>
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d86f      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002ce2:	2b30      	cmp	r3, #48	; 0x30
 8002ce4:	d064      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x15a>
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d86b      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d060      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x15a>
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d867      	bhi.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d05c      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x15a>
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d05a      	beq.n	8002db0 <HAL_TIM_ConfigClockSource+0x15a>
 8002cfa:	e062      	b.n	8002dc2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f000 f9ac 	bl	8003068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	609a      	str	r2, [r3, #8]
      break;
 8002d28:	e04f      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6899      	ldr	r1, [r3, #8]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f000 f995 	bl	8003068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4c:	609a      	str	r2, [r3, #8]
      break;
 8002d4e:	e03c      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f000 f909 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2150      	movs	r1, #80	; 0x50
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f962 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002d6e:	e02c      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f000 f928 	bl	8002fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2160      	movs	r1, #96	; 0x60
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f952 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002d8e:	e01c      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	f000 f8e9 	bl	8002f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f942 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002dae:	e00c      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 f939 	bl	8003032 <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e003      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc6:	e000      	b.n	8002dca <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002dc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d013      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e52:	d00f      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a3d      	ldr	r2, [pc, #244]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d00b      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d007      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d003      	beq.n	8002e74 <TIM_Base_SetConfig+0x40>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d108      	bne.n	8002e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a2f      	ldr	r2, [pc, #188]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e94:	d027      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <TIM_Base_SetConfig+0x118>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d023      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_Base_SetConfig+0x11c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_Base_SetConfig+0x120>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <TIM_Base_SetConfig+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <TIM_Base_SetConfig+0x12c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0x130>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0x134>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <TIM_Base_SetConfig+0x138>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_Base_SetConfig+0x13c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <TIM_Base_SetConfig+0x114>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_Base_SetConfig+0xf8>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <TIM_Base_SetConfig+0x124>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800
 8002f68:	40001800 	.word	0x40001800
 8002f6c:	40001c00 	.word	0x40001c00
 8002f70:	40002000 	.word	0x40002000

08002f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0201 	bic.w	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f023 030a 	bic.w	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b087      	sub	sp, #28
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0210 	bic.w	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	031b      	lsls	r3, r3, #12
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	f043 0307 	orr.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	021a      	lsls	r2, r3, #8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	431a      	orrs	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4313      	orrs	r3, r2
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	609a      	str	r2, [r3, #8]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e05a      	b.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800310c:	d01d      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10c      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40010400 	.word	0x40010400
 8003198:	40014000 	.word	0x40014000
 800319c:	40001800 	.word	0x40001800

080031a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e03f      	b.n	800325a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fd ff08 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800320a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fddb 	bl	8003dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b08a      	sub	sp, #40	; 0x28
 8003266:	af02      	add	r7, sp, #8
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	4613      	mov	r3, r2
 8003270:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b20      	cmp	r3, #32
 8003280:	d17c      	bne.n	800337c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_UART_Transmit+0x2c>
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e075      	b.n	800337e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_UART_Transmit+0x3e>
 800329c:	2302      	movs	r3, #2
 800329e:	e06e      	b.n	800337e <HAL_UART_Transmit+0x11c>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2221      	movs	r2, #33	; 0x21
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032b6:	f7fd ff85 	bl	80011c4 <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d0:	d108      	bne.n	80032e4 <HAL_UART_Transmit+0x82>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e003      	b.n	80032ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032f4:	e02a      	b.n	800334c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2180      	movs	r1, #128	; 0x80
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fb1f 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e036      	b.n	800337e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003324:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	3302      	adds	r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e007      	b.n	800333e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1cf      	bne.n	80032f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	2200      	movs	r2, #0
 800335e:	2140      	movs	r1, #64	; 0x40
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 faef 	bl	8003944 <UART_WaitOnFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e006      	b.n	800337e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003378:	2300      	movs	r3, #0
 800337a:	e000      	b.n	800337e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800337c:	2302      	movs	r3, #2
  }
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b20      	cmp	r3, #32
 800339e:	d11d      	bne.n	80033dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_UART_Receive_IT+0x26>
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e016      	b.n	80033de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_UART_Receive_IT+0x38>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e00f      	b.n	80033de <HAL_UART_Receive_IT+0x58>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	461a      	mov	r2, r3
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb24 	bl	8003a20 <UART_Start_Receive_IT>
 80033d8:	4603      	mov	r3, r0
 80033da:	e000      	b.n	80033de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
  }
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0ba      	sub	sp, #232	; 0xe8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10f      	bne.n	800344e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800342e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_UART_IRQHandler+0x66>
 800343a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fc03 	bl	8003c52 <UART_Receive_IT>
      return;
 800344c:	e256      	b.n	80038fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800344e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80de 	beq.w	8003614 <HAL_UART_IRQHandler+0x22c>
 8003458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003468:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80d1 	beq.w	8003614 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_UART_IRQHandler+0xae>
 800347e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0201 	orr.w	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_UART_IRQHandler+0xd2>
 80034a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_UART_IRQHandler+0xf6>
 80034c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0204 	orr.w	r2, r3, #4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <HAL_UART_IRQHandler+0x126>
 80034ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0208 	orr.w	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 81ed 	beq.w	80038f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_UART_IRQHandler+0x14e>
 8003524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fb8e 	bl	8003c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003540:	2b40      	cmp	r3, #64	; 0x40
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_UART_IRQHandler+0x17a>
 800355a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d04f      	beq.n	8003602 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fa96 	bl	8003a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d141      	bne.n	80035fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3314      	adds	r3, #20
 800357c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800358c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1d9      	bne.n	8003576 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d013      	beq.n	80035f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	4a7d      	ldr	r2, [pc, #500]	; (80037c4 <HAL_UART_IRQHandler+0x3dc>)
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd ff81 	bl	80014de <HAL_DMA_Abort_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ec:	4610      	mov	r0, r2
 80035ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	e00e      	b.n	8003610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f990 	bl	8003918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00a      	b.n	8003610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f98c 	bl	8003918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e006      	b.n	8003610 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f988 	bl	8003918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800360e:	e170      	b.n	80038f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003610:	bf00      	nop
    return;
 8003612:	e16e      	b.n	80038f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	2b01      	cmp	r3, #1
 800361a:	f040 814a 	bne.w	80038b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8143 	beq.w	80038b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800362c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 813c 	beq.w	80038b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	f040 80b4 	bne.w	80037c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800366c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8140 	beq.w	80038f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800367a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800367e:	429a      	cmp	r2, r3
 8003680:	f080 8139 	bcs.w	80038f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800368a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003696:	f000 8088 	beq.w	80037aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1d9      	bne.n	800369a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3314      	adds	r3, #20
 80036ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f0:	e853 3f00 	ldrex	r3, [r3]
 80036f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f8:	f023 0301 	bic.w	r3, r3, #1
 80036fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3314      	adds	r3, #20
 8003706:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800370a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800370e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003712:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800371c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1e1      	bne.n	80036e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3314      	adds	r3, #20
 8003728:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3314      	adds	r3, #20
 8003742:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003746:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003748:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800374c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e3      	bne.n	8003722 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377a:	f023 0310 	bic.w	r3, r3, #16
 800377e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	330c      	adds	r3, #12
 8003788:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800378c:	65ba      	str	r2, [r7, #88]	; 0x58
 800378e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003792:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003794:	e841 2300 	strex	r3, r2, [r1]
 8003798:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e3      	bne.n	8003768 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fe2a 	bl	80013fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8b6 	bl	800392c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037c0:	e099      	b.n	80038f6 <HAL_UART_IRQHandler+0x50e>
 80037c2:	bf00      	nop
 80037c4:	08003b5b 	.word	0x08003b5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 808b 	beq.w	80038fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8086 	beq.w	80038fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	330c      	adds	r3, #12
 80037f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003812:	647a      	str	r2, [r7, #68]	; 0x44
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e3      	bne.n	80037ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	623b      	str	r3, [r7, #32]
   return(result);
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800384a:	633a      	str	r2, [r7, #48]	; 0x30
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e3      	bne.n	8003826 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	60fb      	str	r3, [r7, #12]
   return(result);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0310 	bic.w	r3, r3, #16
 8003882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	617b      	str	r3, [r7, #20]
   return(result);
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e3      	bne.n	800386c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038a8:	4619      	mov	r1, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f83e 	bl	800392c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b0:	e023      	b.n	80038fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_UART_IRQHandler+0x4ea>
 80038be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f959 	bl	8003b82 <UART_Transmit_IT>
    return;
 80038d0:	e014      	b.n	80038fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <HAL_UART_IRQHandler+0x514>
 80038de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f999 	bl	8003c22 <UART_EndTransmit_IT>
    return;
 80038f0:	e004      	b.n	80038fc <HAL_UART_IRQHandler+0x514>
    return;
 80038f2:	bf00      	nop
 80038f4:	e002      	b.n	80038fc <HAL_UART_IRQHandler+0x514>
      return;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <HAL_UART_IRQHandler+0x514>
      return;
 80038fa:	bf00      	nop
  }
}
 80038fc:	37e8      	adds	r7, #232	; 0xe8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop

08003904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b090      	sub	sp, #64	; 0x40
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003954:	e050      	b.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d04c      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
 8003964:	f7fd fc2e 	bl	80011c4 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003970:	429a      	cmp	r2, r3
 8003972:	d241      	bcs.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	e853 3f00 	ldrex	r3, [r3]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800398a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	330c      	adds	r3, #12
 8003992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003994:	637a      	str	r2, [r7, #52]	; 0x34
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e5      	bne.n	8003974 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	63bb      	str	r3, [r7, #56]	; 0x38
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3314      	adds	r3, #20
 80039c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039c8:	623a      	str	r2, [r7, #32]
 80039ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	69f9      	ldr	r1, [r7, #28]
 80039ce:	6a3a      	ldr	r2, [r7, #32]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e00f      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d09f      	beq.n	8003956 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3740      	adds	r7, #64	; 0x40
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2222      	movs	r2, #34	; 0x22
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68da      	ldr	r2, [r3, #12]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0201 	orr.w	r2, r2, #1
 8003a74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 0220 	orr.w	r2, r2, #32
 8003a84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b095      	sub	sp, #84	; 0x54
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003abc:	643a      	str	r2, [r7, #64]	; 0x40
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af8:	e841 2300 	strex	r3, r2, [r1]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e5      	bne.n	8003ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d119      	bne.n	8003b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f023 0310 	bic.w	r3, r3, #16
 8003b22:	647b      	str	r3, [r7, #68]	; 0x44
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b2c:	61ba      	str	r2, [r7, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	6979      	ldr	r1, [r7, #20]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b4e:	bf00      	nop
 8003b50:	3754      	adds	r7, #84	; 0x54
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fecf 	bl	8003918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b21      	cmp	r3, #33	; 0x21
 8003b94:	d13e      	bne.n	8003c14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d114      	bne.n	8003bca <UART_Transmit_IT+0x48>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	621a      	str	r2, [r3, #32]
 8003bc8:	e008      	b.n	8003bdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	1c59      	adds	r1, r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6211      	str	r1, [r2, #32]
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4619      	mov	r1, r3
 8003bea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff fe5e 	bl	8003904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b08c      	sub	sp, #48	; 0x30
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b22      	cmp	r3, #34	; 0x22
 8003c64:	f040 80ab 	bne.w	8003dbe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d117      	bne.n	8003ca2 <UART_Receive_IT+0x50>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca0:	e026      	b.n	8003cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <UART_Receive_IT+0x74>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <UART_Receive_IT+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e008      	b.n	8003ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d15a      	bne.n	8003dba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0220 	bic.w	r2, r2, #32
 8003d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d135      	bne.n	8003db0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	623a      	str	r2, [r7, #32]
 8003d6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	69f9      	ldr	r1, [r7, #28]
 8003d70:	6a3a      	ldr	r2, [r7, #32]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d10a      	bne.n	8003da2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff fdbf 	bl	800392c <HAL_UARTEx_RxEventCallback>
 8003dae:	e002      	b.n	8003db6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7fd f8df 	bl	8000f74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	e002      	b.n	8003dc0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3730      	adds	r7, #48	; 0x30
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	b09f      	sub	sp, #124	; 0x7c
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	ea40 0301 	orr.w	r3, r0, r1
 8003de8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e0c:	f021 010c 	bic.w	r1, r1, #12
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e16:	430b      	orrs	r3, r1
 8003e18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	6999      	ldr	r1, [r3, #24]
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	ea40 0301 	orr.w	r3, r0, r1
 8003e30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4bc5      	ldr	r3, [pc, #788]	; (800414c <UART_SetConfig+0x384>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d004      	beq.n	8003e46 <UART_SetConfig+0x7e>
 8003e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4bc3      	ldr	r3, [pc, #780]	; (8004150 <UART_SetConfig+0x388>)
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d103      	bne.n	8003e4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e46:	f7fe fac7 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003e4a:	6778      	str	r0, [r7, #116]	; 0x74
 8003e4c:	e002      	b.n	8003e54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4e:	f7fe faaf 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8003e52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	f040 80b6 	bne.w	8003fcc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	461c      	mov	r4, r3
 8003e64:	f04f 0500 	mov.w	r5, #0
 8003e68:	4622      	mov	r2, r4
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	6439      	str	r1, [r7, #64]	; 0x40
 8003e70:	415b      	adcs	r3, r3
 8003e72:	647b      	str	r3, [r7, #68]	; 0x44
 8003e74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e78:	1912      	adds	r2, r2, r4
 8003e7a:	eb45 0303 	adc.w	r3, r5, r3
 8003e7e:	f04f 0000 	mov.w	r0, #0
 8003e82:	f04f 0100 	mov.w	r1, #0
 8003e86:	00d9      	lsls	r1, r3, #3
 8003e88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e8c:	00d0      	lsls	r0, r2, #3
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	1911      	adds	r1, r2, r4
 8003e94:	6639      	str	r1, [r7, #96]	; 0x60
 8003e96:	416b      	adcs	r3, r5
 8003e98:	667b      	str	r3, [r7, #100]	; 0x64
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003eb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003eb4:	f7fc f988 	bl	80001c8 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4ba5      	ldr	r3, [pc, #660]	; (8004154 <UART_SetConfig+0x38c>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011e      	lsls	r6, r3, #4
 8003ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec8:	461c      	mov	r4, r3
 8003eca:	f04f 0500 	mov.w	r5, #0
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ede:	1912      	adds	r2, r2, r4
 8003ee0:	eb45 0303 	adc.w	r3, r5, r3
 8003ee4:	f04f 0000 	mov.w	r0, #0
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	00d9      	lsls	r1, r3, #3
 8003eee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ef2:	00d0      	lsls	r0, r2, #3
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	1911      	adds	r1, r2, r4
 8003efa:	65b9      	str	r1, [r7, #88]	; 0x58
 8003efc:	416b      	adcs	r3, r5
 8003efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	461a      	mov	r2, r3
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f1a:	f7fc f955 	bl	80001c8 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b8c      	ldr	r3, [pc, #560]	; (8004154 <UART_SetConfig+0x38c>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	; 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	3332      	adds	r3, #50	; 0x32
 8003f36:	4a87      	ldr	r2, [pc, #540]	; (8004154 <UART_SetConfig+0x38c>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f44:	441e      	add	r6, r3
 8003f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	1894      	adds	r4, r2, r2
 8003f54:	623c      	str	r4, [r7, #32]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f5e:	1812      	adds	r2, r2, r0
 8003f60:	eb41 0303 	adc.w	r3, r1, r3
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	f04f 0500 	mov.w	r5, #0
 8003f6c:	00dd      	lsls	r5, r3, #3
 8003f6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f72:	00d4      	lsls	r4, r2, #3
 8003f74:	4622      	mov	r2, r4
 8003f76:	462b      	mov	r3, r5
 8003f78:	1814      	adds	r4, r2, r0
 8003f7a:	653c      	str	r4, [r7, #80]	; 0x50
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	461a      	mov	r2, r3
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	61b9      	str	r1, [r7, #24]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f9a:	f7fc f915 	bl	80001c8 <__aeabi_uldivmod>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4b6c      	ldr	r3, [pc, #432]	; (8004154 <UART_SetConfig+0x38c>)
 8003fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	2164      	movs	r1, #100	; 0x64
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	3332      	adds	r3, #50	; 0x32
 8003fb6:	4a67      	ldr	r2, [pc, #412]	; (8004154 <UART_SetConfig+0x38c>)
 8003fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	f003 0207 	and.w	r2, r3, #7
 8003fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4432      	add	r2, r6
 8003fc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fca:	e0b9      	b.n	8004140 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	461c      	mov	r4, r3
 8003fd0:	f04f 0500 	mov.w	r5, #0
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	6139      	str	r1, [r7, #16]
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fe4:	1912      	adds	r2, r2, r4
 8003fe6:	eb45 0303 	adc.w	r3, r5, r3
 8003fea:	f04f 0000 	mov.w	r0, #0
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	00d9      	lsls	r1, r3, #3
 8003ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff8:	00d0      	lsls	r0, r2, #3
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	eb12 0804 	adds.w	r8, r2, r4
 8004002:	eb43 0905 	adc.w	r9, r3, r5
 8004006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	008b      	lsls	r3, r1, #2
 800401a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800401e:	0082      	lsls	r2, r0, #2
 8004020:	4640      	mov	r0, r8
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc f8d0 	bl	80001c8 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4b49      	ldr	r3, [pc, #292]	; (8004154 <UART_SetConfig+0x38c>)
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011e      	lsls	r6, r3, #4
 8004036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004038:	4618      	mov	r0, r3
 800403a:	f04f 0100 	mov.w	r1, #0
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	1894      	adds	r4, r2, r2
 8004044:	60bc      	str	r4, [r7, #8]
 8004046:	415b      	adcs	r3, r3
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800404e:	1812      	adds	r2, r2, r0
 8004050:	eb41 0303 	adc.w	r3, r1, r3
 8004054:	f04f 0400 	mov.w	r4, #0
 8004058:	f04f 0500 	mov.w	r5, #0
 800405c:	00dd      	lsls	r5, r3, #3
 800405e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004062:	00d4      	lsls	r4, r2, #3
 8004064:	4622      	mov	r2, r4
 8004066:	462b      	mov	r3, r5
 8004068:	1814      	adds	r4, r2, r0
 800406a:	64bc      	str	r4, [r7, #72]	; 0x48
 800406c:	414b      	adcs	r3, r1
 800406e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004088:	0082      	lsls	r2, r0, #2
 800408a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800408e:	f7fc f89b 	bl	80001c8 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4b2f      	ldr	r3, [pc, #188]	; (8004154 <UART_SetConfig+0x38c>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	; 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a2a      	ldr	r2, [pc, #168]	; (8004154 <UART_SetConfig+0x38c>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b6:	441e      	add	r6, r3
 80040b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ba:	4618      	mov	r0, r3
 80040bc:	f04f 0100 	mov.w	r1, #0
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	1894      	adds	r4, r2, r2
 80040c6:	603c      	str	r4, [r7, #0]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d0:	1812      	adds	r2, r2, r0
 80040d2:	eb41 0303 	adc.w	r3, r1, r3
 80040d6:	f04f 0400 	mov.w	r4, #0
 80040da:	f04f 0500 	mov.w	r5, #0
 80040de:	00dd      	lsls	r5, r3, #3
 80040e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040e4:	00d4      	lsls	r4, r2, #3
 80040e6:	4622      	mov	r2, r4
 80040e8:	462b      	mov	r3, r5
 80040ea:	eb12 0a00 	adds.w	sl, r2, r0
 80040ee:	eb43 0b01 	adc.w	fp, r3, r1
 80040f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	008b      	lsls	r3, r1, #2
 8004106:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800410a:	0082      	lsls	r2, r0, #2
 800410c:	4650      	mov	r0, sl
 800410e:	4659      	mov	r1, fp
 8004110:	f7fc f85a 	bl	80001c8 <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <UART_SetConfig+0x38c>)
 800411a:	fba3 1302 	umull	r1, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2164      	movs	r1, #100	; 0x64
 8004122:	fb01 f303 	mul.w	r3, r1, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	; 0x32
 800412c:	4a09      	ldr	r2, [pc, #36]	; (8004154 <UART_SetConfig+0x38c>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 020f 	and.w	r2, r3, #15
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4432      	add	r2, r6
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	377c      	adds	r7, #124	; 0x7c
 8004144:	46bd      	mov	sp, r7
 8004146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414a:	bf00      	nop
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	51eb851f 	.word	0x51eb851f

08004158 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004170:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <FSMC_NORSRAM_Init+0xa0>)
 8004176:	4013      	ands	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004182:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004188:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800418e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004194:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800419a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80041a0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80041a6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80041ac:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80041b2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80041b8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80041be:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80041c4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d103      	bne.n	80041dc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	fff00080 	.word	0xfff00080

080041fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004216:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800421e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800422a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004232:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800423a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	3b01      	subs	r3, #1
 8004242:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004244:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	3b02      	subs	r3, #2
 800424c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800424e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004254:	4313      	orrs	r3, r2
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004290:	d122      	bne.n	80042d8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800429a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042ae:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80042b6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80042be:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80042c4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80042d6:	e005      	b.n	80042e4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80042e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	cff00000 	.word	0xcff00000

080042f8 <__libc_init_array>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	4d0d      	ldr	r5, [pc, #52]	; (8004330 <__libc_init_array+0x38>)
 80042fc:	4c0d      	ldr	r4, [pc, #52]	; (8004334 <__libc_init_array+0x3c>)
 80042fe:	1b64      	subs	r4, r4, r5
 8004300:	10a4      	asrs	r4, r4, #2
 8004302:	2600      	movs	r6, #0
 8004304:	42a6      	cmp	r6, r4
 8004306:	d109      	bne.n	800431c <__libc_init_array+0x24>
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <__libc_init_array+0x40>)
 800430a:	4c0c      	ldr	r4, [pc, #48]	; (800433c <__libc_init_array+0x44>)
 800430c:	f000 f820 	bl	8004350 <_init>
 8004310:	1b64      	subs	r4, r4, r5
 8004312:	10a4      	asrs	r4, r4, #2
 8004314:	2600      	movs	r6, #0
 8004316:	42a6      	cmp	r6, r4
 8004318:	d105      	bne.n	8004326 <__libc_init_array+0x2e>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004320:	4798      	blx	r3
 8004322:	3601      	adds	r6, #1
 8004324:	e7ee      	b.n	8004304 <__libc_init_array+0xc>
 8004326:	f855 3b04 	ldr.w	r3, [r5], #4
 800432a:	4798      	blx	r3
 800432c:	3601      	adds	r6, #1
 800432e:	e7f2      	b.n	8004316 <__libc_init_array+0x1e>
 8004330:	08004388 	.word	0x08004388
 8004334:	08004388 	.word	0x08004388
 8004338:	08004388 	.word	0x08004388
 800433c:	0800438c 	.word	0x0800438c

08004340 <memset>:
 8004340:	4402      	add	r2, r0
 8004342:	4603      	mov	r3, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <_init>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr

0800435c <_fini>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr
