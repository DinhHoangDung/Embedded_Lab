
LAB5_UART_Excercise1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005564  08005564  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800556c  0800556c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000002b8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a57b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a3  00000000  00000000  0003a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003dd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a8  00000000  00000000  0003f190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002385c  00000000  00000000  00040438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad0b  00000000  00000000  00063c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2ea7  00000000  00000000  0007e99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151846  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052d0  00000000  00000000  0015189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005534 	.word	0x08005534

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005534 	.word	0x08005534

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_Scan>:

void button_init(){
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
}

void button_Scan(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	482f      	ldr	r0, [pc, #188]	; (8000588 <button_Scan+0xc8>)
 80004cc:	f001 fadc 	bl	8001a88 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	482c      	ldr	r0, [pc, #176]	; (8000588 <button_Scan+0xc8>)
 80004d6:	f001 fad7 	bl	8001a88 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004da:	230a      	movs	r3, #10
 80004dc:	2202      	movs	r2, #2
 80004de:	492b      	ldr	r1, [pc, #172]	; (800058c <button_Scan+0xcc>)
 80004e0:	482b      	ldr	r0, [pc, #172]	; (8000590 <button_Scan+0xd0>)
 80004e2:	f002 ff2c 	bl	800333e <HAL_SPI_Receive>
	  int button_index = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	e03f      	b.n	8000576 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	db06      	blt.n	800050a <button_Scan+0x4a>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b03      	cmp	r3, #3
 8000500:	dc03      	bgt.n	800050a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3304      	adds	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	e018      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b03      	cmp	r3, #3
 800050e:	dd07      	ble.n	8000520 <button_Scan+0x60>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b07      	cmp	r3, #7
 8000514:	dc04      	bgt.n	8000520 <button_Scan+0x60>
			  button_index = 7 - i;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f1c3 0307 	rsb	r3, r3, #7
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	e00d      	b.n	800053c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dd06      	ble.n	8000534 <button_Scan+0x74>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2b0b      	cmp	r3, #11
 800052a:	dc03      	bgt.n	8000534 <button_Scan+0x74>
			  button_index = i + 4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	e003      	b.n	800053c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f1c3 0317 	rsb	r3, r3, #23
 800053a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <button_Scan+0xcc>)
 800053e:	881a      	ldrh	r2, [r3, #0]
 8000540:	897b      	ldrh	r3, [r7, #10]
 8000542:	4013      	ands	r3, r2
 8000544:	b29b      	uxth	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d005      	beq.n	8000556 <button_Scan+0x96>
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <button_Scan+0xd4>)
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	2100      	movs	r1, #0
 8000550:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000554:	e009      	b.n	800056a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000556:	4a0f      	ldr	r2, [pc, #60]	; (8000594 <button_Scan+0xd4>)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	3301      	adds	r3, #1
 8000560:	b299      	uxth	r1, r3
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800056a:	897b      	ldrh	r3, [r7, #10]
 800056c:	085b      	lsrs	r3, r3, #1
 800056e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	ddbc      	ble.n	80004f6 <button_Scan+0x36>
	  }
}
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00
 800058c:	20000030 	.word	0x20000030
 8000590:	20000118 	.word	0x20000118
 8000594:	20000044 	.word	0x20000044

08000598 <ds3231_ReadTime>:
void ds3231_Write(uint8_t address, uint8_t value){
	uint8_t temp = DEC2BCD(value);
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
}

void ds3231_ReadTime(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800059e:	230a      	movs	r3, #10
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2307      	movs	r3, #7
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <ds3231_ReadTime+0xa4>)
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2200      	movs	r2, #0
 80005ae:	21d0      	movs	r1, #208	; 0xd0
 80005b0:	4823      	ldr	r0, [pc, #140]	; (8000640 <ds3231_ReadTime+0xa8>)
 80005b2:	f001 fbe1 	bl	8001d78 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <ds3231_ReadTime+0xa4>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fe6e 	bl	800129c <BCD2DEC>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <ds3231_ReadTime+0xac>)
 80005c6:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <ds3231_ReadTime+0xa4>)
 80005ca:	785b      	ldrb	r3, [r3, #1]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fe65 	bl	800129c <BCD2DEC>
 80005d2:	4603      	mov	r3, r0
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <ds3231_ReadTime+0xb0>)
 80005d8:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <ds3231_ReadTime+0xa4>)
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fe5c 	bl	800129c <BCD2DEC>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461a      	mov	r2, r3
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <ds3231_ReadTime+0xb4>)
 80005ea:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <ds3231_ReadTime+0xa4>)
 80005ee:	78db      	ldrb	r3, [r3, #3]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fe53 	bl	800129c <BCD2DEC>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <ds3231_ReadTime+0xb8>)
 80005fc:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <ds3231_ReadTime+0xa4>)
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fe4a 	bl	800129c <BCD2DEC>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <ds3231_ReadTime+0xbc>)
 800060e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <ds3231_ReadTime+0xa4>)
 8000612:	795b      	ldrb	r3, [r3, #5]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fe41 	bl	800129c <BCD2DEC>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <ds3231_ReadTime+0xc0>)
 8000620:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <ds3231_ReadTime+0xa4>)
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fe38 	bl	800129c <BCD2DEC>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <ds3231_ReadTime+0xc4>)
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000006c 	.word	0x2000006c
 8000640:	200000c4 	.word	0x200000c4
 8000644:	20000064 	.word	0x20000064
 8000648:	20000066 	.word	0x20000066
 800064c:	20000069 	.word	0x20000069
 8000650:	20000068 	.word	0x20000068
 8000654:	20000067 	.word	0x20000067
 8000658:	2000006a 	.word	0x2000006a
 800065c:	20000065 	.word	0x20000065

08000660 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08e      	sub	sp, #56	; 0x38
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_FSMC_Init+0xec>)
 800068e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000692:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <MX_FSMC_Init+0xec>)
 8000696:	4a2e      	ldr	r2, [pc, #184]	; (8000750 <MX_FSMC_Init+0xf0>)
 8000698:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_FSMC_Init+0xec>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_FSMC_Init+0xec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_FSMC_Init+0xec>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_FSMC_Init+0xec>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_FSMC_Init+0xec>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_FSMC_Init+0xec>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_FSMC_Init+0xec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_FSMC_Init+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_FSMC_Init+0xec>)
 80006cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006d0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_FSMC_Init+0xec>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_FSMC_Init+0xec>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_FSMC_Init+0xec>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_FSMC_Init+0xec>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_FSMC_Init+0xec>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006f2:	230f      	movs	r3, #15
 80006f4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006f6:	230f      	movs	r3, #15
 80006f8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006fa:	233c      	movs	r3, #60	; 0x3c
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000702:	2310      	movs	r3, #16
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000706:	2311      	movs	r3, #17
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800070a:	2300      	movs	r3, #0
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800070e:	2308      	movs	r3, #8
 8000710:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000716:	2309      	movs	r3, #9
 8000718:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800071e:	2310      	movs	r3, #16
 8000720:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000722:	2311      	movs	r3, #17
 8000724:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800072a:	463a      	mov	r2, r7
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_FSMC_Init+0xec>)
 8000734:	f003 f9e6 	bl	8003b04 <HAL_SRAM_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800073e:	f000 fb1f 	bl	8000d80 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000742:	bf00      	nop
 8000744:	3738      	adds	r7, #56	; 0x38
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000074 	.word	0x20000074
 8000750:	a0000104 	.word	0xa0000104

08000754 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_FSMC_MspInit+0x88>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d131      	bne.n	80007d4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <HAL_FSMC_MspInit+0x88>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_FSMC_MspInit+0x8c>)
 800077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <HAL_FSMC_MspInit+0x8c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6393      	str	r3, [r2, #56]	; 0x38
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_FSMC_MspInit+0x8c>)
 8000788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000792:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000796:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007a4:	230c      	movs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <HAL_FSMC_MspInit+0x90>)
 80007ae:	f000 ffcf 	bl	8001750 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007b2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80007b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007c4:	230c      	movs	r3, #12
 80007c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <HAL_FSMC_MspInit+0x94>)
 80007ce:	f000 ffbf 	bl	8001750 <HAL_GPIO_Init>
 80007d2:	e000      	b.n	80007d6 <HAL_FSMC_MspInit+0x82>
    return;
 80007d4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000034 	.word	0x20000034
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40020c00 	.word	0x40020c00

080007ec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007f4:	f7ff ffae 	bl	8000754 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4b6f      	ldr	r3, [pc, #444]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a6e      	ldr	r2, [pc, #440]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b68      	ldr	r3, [pc, #416]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a67      	ldr	r2, [pc, #412]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b65      	ldr	r3, [pc, #404]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a60      	ldr	r2, [pc, #384]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b5a      	ldr	r3, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a59      	ldr	r2, [pc, #356]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b53      	ldr	r3, [pc, #332]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a52      	ldr	r2, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b50      	ldr	r3, [pc, #320]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b4c      	ldr	r3, [pc, #304]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a4b      	ldr	r2, [pc, #300]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b49      	ldr	r3, [pc, #292]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b45      	ldr	r3, [pc, #276]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a44      	ldr	r2, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <MX_GPIO_Init+0x1d8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2170      	movs	r1, #112	; 0x70
 80008de:	483f      	ldr	r0, [pc, #252]	; (80009dc <MX_GPIO_Init+0x1dc>)
 80008e0:	f001 f8d2 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	483d      	ldr	r0, [pc, #244]	; (80009e0 <MX_GPIO_Init+0x1e0>)
 80008ec:	f001 f8cc 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	; 0x40
 80008f4:	483b      	ldr	r0, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x1e4>)
 80008f6:	f001 f8c7 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000900:	4839      	ldr	r0, [pc, #228]	; (80009e8 <MX_GPIO_Init+0x1e8>)
 8000902:	f001 f8c1 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	4838      	ldr	r0, [pc, #224]	; (80009ec <MX_GPIO_Init+0x1ec>)
 800090c:	f001 f8bc 	bl	8001a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000910:	2370      	movs	r3, #112	; 0x70
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	482d      	ldr	r0, [pc, #180]	; (80009dc <MX_GPIO_Init+0x1dc>)
 8000928:	f000 ff12 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800092c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4826      	ldr	r0, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x1e0>)
 8000946:	f000 ff03 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800094a:	23c0      	movs	r3, #192	; 0xc0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4822      	ldr	r0, [pc, #136]	; (80009e8 <MX_GPIO_Init+0x1e8>)
 800095e:	f000 fef7 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000962:	2330      	movs	r3, #48	; 0x30
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481a      	ldr	r0, [pc, #104]	; (80009e0 <MX_GPIO_Init+0x1e0>)
 8000976:	f000 feeb 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800097a:	2340      	movs	r3, #64	; 0x40
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4814      	ldr	r0, [pc, #80]	; (80009e4 <MX_GPIO_Init+0x1e4>)
 8000992:	f000 fedd 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_GPIO_Init+0x1e8>)
 80009b0:	f000 fece 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009b4:	2308      	movs	r3, #8
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <MX_GPIO_Init+0x1ec>)
 80009cc:	f000 fec0 	bl	8001750 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_I2C1_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C1_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_I2C1_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_I2C1_Init+0x50>)
 8000a2e:	f001 f85f 	bl	8001af0 <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a38:	f000 f9a2 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000c4 	.word	0x200000c4
 8000a44:	40005400 	.word	0x40005400
 8000a48:	000186a0 	.word	0x000186a0

08000a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <HAL_I2C_MspInit+0x84>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12b      	bne.n	8000ac6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a8a:	23c0      	movs	r3, #192	; 0xc0
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <HAL_I2C_MspInit+0x8c>)
 8000aa6:	f000 fe53 	bl	8001750 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_I2C_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000ae0:	4b3f      	ldr	r3, [pc, #252]	; (8000be0 <led7_Scan+0x104>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <led7_Scan+0x104>)
 8000aea:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000aec:	4b3d      	ldr	r3, [pc, #244]	; (8000be4 <led7_Scan+0x108>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <led7_Scan+0x10c>)
 8000af4:	5c9b      	ldrb	r3, [r3, r2]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <led7_Scan+0x104>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <led7_Scan+0x104>)
 8000b08:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <led7_Scan+0x108>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d846      	bhi.n	8000ba0 <led7_Scan+0xc4>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <led7_Scan+0x3c>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b47 	.word	0x08000b47
 8000b20:	08000b65 	.word	0x08000b65
 8000b24:	08000b83 	.word	0x08000b83
	case 0:
		spi_buffer |= 0x00b0;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <led7_Scan+0x104>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <led7_Scan+0x104>)
 8000b34:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <led7_Scan+0x104>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <led7_Scan+0x104>)
 8000b42:	801a      	strh	r2, [r3, #0]
		break;
 8000b44:	e02d      	b.n	8000ba2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <led7_Scan+0x104>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <led7_Scan+0x104>)
 8000b52:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <led7_Scan+0x104>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	f023 0320 	bic.w	r3, r3, #32
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <led7_Scan+0x104>)
 8000b60:	801a      	strh	r2, [r3, #0]
		break;
 8000b62:	e01e      	b.n	8000ba2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <led7_Scan+0x104>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <led7_Scan+0x104>)
 8000b70:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <led7_Scan+0x104>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	f023 0310 	bic.w	r3, r3, #16
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <led7_Scan+0x104>)
 8000b7e:	801a      	strh	r2, [r3, #0]
		break;
 8000b80:	e00f      	b.n	8000ba2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <led7_Scan+0x104>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <led7_Scan+0x104>)
 8000b8e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <led7_Scan+0x104>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <led7_Scan+0x104>)
 8000b9c:	801a      	strh	r2, [r3, #0]
		break;
 8000b9e:	e000      	b.n	8000ba2 <led7_Scan+0xc6>
	default:
		break;
 8000ba0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <led7_Scan+0x108>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	425a      	negs	r2, r3
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	f002 0203 	and.w	r2, r2, #3
 8000bb2:	bf58      	it	pl
 8000bb4:	4253      	negpl	r3, r2
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <led7_Scan+0x108>)
 8000bba:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	; 0x40
 8000bc0:	480a      	ldr	r0, [pc, #40]	; (8000bec <led7_Scan+0x110>)
 8000bc2:	f000 ff61 	bl	8001a88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2202      	movs	r2, #2
 8000bca:	4905      	ldr	r1, [pc, #20]	; (8000be0 <led7_Scan+0x104>)
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <led7_Scan+0x114>)
 8000bce:	f002 fa7a 	bl	80030c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <led7_Scan+0x110>)
 8000bd8:	f000 ff56 	bl	8001a88 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000038 	.word	0x20000038
 8000be8:	20000000 	.word	0x20000000
 8000bec:	40021800 	.word	0x40021800
 8000bf0:	20000118 	.word	0x20000118

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f000 fb93 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f831 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f7ff fdfd 	bl	8000800 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c06:	f000 fa31 	bl	800106c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000c0a:	f000 f939 	bl	8000e80 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000c0e:	f7ff fd27 	bl	8000660 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000c12:	f7ff feed 	bl	80009f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c16:	f000 fac7 	bl	80011a8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag_timer2) {
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <main+0x64>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0fb      	beq.n	8000c1a <main+0x26>
		  flag_timer2 = 0;
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <main+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 8000c28:	f7ff fc4a 	bl	80004c0 <button_Scan>
		  test_LedDebug();
 8000c2c:	f000 f884 	bl	8000d38 <test_LedDebug>
		  ds3231_ReadTime();
 8000c30:	f7ff fcb2 	bl	8000598 <ds3231_ReadTime>

		  if(uart_receive_flag) {
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <main+0x68>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0ee      	beq.n	8000c1a <main+0x26>
			  uart_receive_flag = 0;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <main+0x68>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
			  uint8_t receive_data;
			  while(uart_ring_buffer.length > 0) {
 8000c42:	e004      	b.n	8000c4e <main+0x5a>
				  //Process the received data
				  ringBufferPop(&uart_ring_buffer, &receive_data);
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <main+0x6c>)
 8000c4a:	f000 f8c8 	bl	8000dde <ringBufferPop>
			  while(uart_ring_buffer.length > 0) {
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <main+0x6c>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f6      	bne.n	8000c44 <main+0x50>
	  if(flag_timer2) {
 8000c56:	e7e0      	b.n	8000c1a <main+0x26>
 8000c58:	2000003c 	.word	0x2000003c
 8000c5c:	20000043 	.word	0x20000043
 8000c60:	2000021c 	.word	0x2000021c

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fc56 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd8:	23a8      	movs	r3, #168	; 0xa8
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fcef 	bl	80026cc <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 f844 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000d0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2105      	movs	r1, #5
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 ff50 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d22:	f000 f82d 	bl	8000d80 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <test_LedDebug>:
	  setTimer2(50);
}

uint16_t count_led_debug = 0;

void test_LedDebug() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1) % 20;
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <test_LedDebug+0x3c>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <test_LedDebug+0x40>)
 8000d44:	fb83 1302 	smull	r1, r3, r3, r2
 8000d48:	10d9      	asrs	r1, r3, #3
 8000d4a:	17d3      	asrs	r3, r2, #31
 8000d4c:	1ac9      	subs	r1, r1, r3
 8000d4e:	460b      	mov	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	1ad1      	subs	r1, r2, r3
 8000d58:	b28a      	uxth	r2, r1
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <test_LedDebug+0x3c>)
 8000d5c:	801a      	strh	r2, [r3, #0]
	if (count_led_debug == 0) {
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <test_LedDebug+0x3c>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000d66:	2110      	movs	r1, #16
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <test_LedDebug+0x44>)
 8000d6a:	f000 fea6 	bl	8001aba <HAL_GPIO_TogglePin>
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000003a 	.word	0x2000003a
 8000d78:	66666667 	.word	0x66666667
 8000d7c:	40021000 	.word	0x40021000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>

08000d8a <ringBufferPush>:
 *      Author: HOANG DUNG
 */
#include "ring_buffer.h"

void ringBufferPush(ring_buffer_t *buf, uint8_t value)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	70fb      	strb	r3, [r7, #3]
	buf->data[buf->tail] = value;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	789b      	ldrb	r3, [r3, #2]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	70da      	strb	r2, [r3, #3]
	buf->tail++;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	789b      	ldrb	r3, [r3, #2]
 8000da8:	3301      	adds	r3, #1
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	709a      	strb	r2, [r3, #2]
	if (buf->tail == RING_BUFFER_MAX_SIZE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	2b64      	cmp	r3, #100	; 0x64
 8000db6:	d102      	bne.n	8000dbe <ringBufferPush+0x34>
	{
		buf->tail = 0;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	709a      	strb	r2, [r3, #2]
	}
	if (buf->length < RING_BUFFER_MAX_SIZE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b63      	cmp	r3, #99	; 0x63
 8000dc4:	d805      	bhi.n	8000dd2 <ringBufferPush+0x48>
	{
		buf->length++;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <ringBufferPop>:

uint8_t ringBufferPop(ring_buffer_t *buf, uint8_t *data)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	if (buf->length > 0)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <ringBufferPop+0x3e>
	{
		*data = buf->data[buf->head];
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	461a      	mov	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	78da      	ldrb	r2, [r3, #3]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]
		buf->head++;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	3301      	adds	r3, #1
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	705a      	strb	r2, [r3, #1]
		buf->length--;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	701a      	strb	r2, [r3, #0]
		return RING_BUFFER_SUCCESS;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e000      	b.n	8000e1e <ringBufferPop+0x40>
	}
	return RING_BUFFER_ERR_EMPTY;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d116      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d010      	beq.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e50:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e62:	881a      	ldrh	r2, [r3, #0]
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e66:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8000e68:	f7ff fe38 	bl	8000adc <led7_Scan>
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000003e 	.word	0x2000003e
 8000e78:	2000003c 	.word	0x2000003c
 8000e7c:	20000040 	.word	0x20000040

08000e80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ed2:	f002 f86f 	bl	8002fb4 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f7ff ff50 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000118 	.word	0x20000118
 8000ee8:	40013000 	.word	0x40013000

08000eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f46:	2338      	movs	r3, #56	; 0x38
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fbf5 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <MemManage_Handler+0x4>

08000fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001018:	f000 f9d6 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <TIM2_IRQHandler+0x10>)
 8001026:	f002 fe00 	bl	8003c2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000170 	.word	0x20000170

08001034 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <USART1_IRQHandler+0x10>)
 800103a:	f003 fac7 	bl	80045cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000284 	.word	0x20000284

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_TIM2_Init+0x94>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <MX_TIM2_Init+0x94>)
 8001092:	f240 3247 	movw	r2, #839	; 0x347
 8001096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800109e:	4b18      	ldr	r3, [pc, #96]	; (8001100 <MX_TIM2_Init+0x94>)
 80010a0:	2263      	movs	r2, #99	; 0x63
 80010a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <MX_TIM2_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010b0:	4813      	ldr	r0, [pc, #76]	; (8001100 <MX_TIM2_Init+0x94>)
 80010b2:	f002 fd6b 	bl	8003b8c <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010bc:	f7ff fe60 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4619      	mov	r1, r3
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ce:	f002 feb4 	bl	8003e3a <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d8:	f7ff fe52 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <MX_TIM2_Init+0x94>)
 80010ea:	f003 f8cf 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010f4:	f7ff fe44 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000170 	.word	0x20000170

08001104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001114:	d115      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x48>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <HAL_TIM_Base_MspInit+0x48>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_TIM_Base_MspInit+0x48>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201c      	movs	r0, #28
 8001138:	f000 fa41 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800113c:	201c      	movs	r0, #28
 800113e:	f000 fa5a 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800

08001150 <HAL_UART_RxCpltCallback>:
	sprintf((void*) msg, "%ld", num % 100);
	uart_Rs232SendString(msg);
}

// rs232 isr
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_UART_RxCpltCallback+0x44>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d113      	bne.n	800118a <HAL_UART_RxCpltCallback+0x3a>

		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001162:	230a      	movs	r3, #10
 8001164:	2201      	movs	r2, #1
 8001166:	490c      	ldr	r1, [pc, #48]	; (8001198 <HAL_UART_RxCpltCallback+0x48>)
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <HAL_UART_RxCpltCallback+0x4c>)
 800116a:	f003 f96c 	bl	8004446 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	4909      	ldr	r1, [pc, #36]	; (8001198 <HAL_UART_RxCpltCallback+0x48>)
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <HAL_UART_RxCpltCallback+0x4c>)
 8001174:	f003 f9f9 	bl	800456a <HAL_UART_Receive_IT>

		// set the flag and add new received data to the buffer
		uart_receive_flag = 1;
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_UART_RxCpltCallback+0x50>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		ringBufferPush(&uart_ring_buffer, receive_buffer1);
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_UART_RxCpltCallback+0x48>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <HAL_UART_RxCpltCallback+0x54>)
 8001186:	f7ff fe00 	bl	8000d8a <ringBufferPush>
	}
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40011000 	.word	0x40011000
 8001198:	20000042 	.word	0x20000042
 800119c:	20000284 	.word	0x20000284
 80011a0:	20000043 	.word	0x20000043
 80011a4:	2000021c 	.word	0x2000021c

080011a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART1_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f003 f8e4 	bl	80043ac <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f7ff fdc9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000284 	.word	0x20000284
 80011f8:	40011000 	.word	0x40011000

080011fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_UART_MspInit+0x94>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d134      	bne.n	8001288 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0x98>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_UART_MspInit+0x98>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001256:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001268:	2307      	movs	r3, #7
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <HAL_UART_MspInit+0x9c>)
 8001274:	f000 fa6c 	bl	8001750 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	2025      	movs	r0, #37	; 0x25
 800127e:	f000 f99e 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001282:	2025      	movs	r0, #37	; 0x25
 8001284:	f000 f9b7 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40011000 	.word	0x40011000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000

0800129c <BCD2DEC>:
 *  Created on: Nov 17, 2024
 *      Author: HOANG DUNG
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	461a      	mov	r2, r3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4413      	add	r3, r2
 80012c0:	b2db      	uxtb	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012fa:	f7ff fea5 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f004 f8ed 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff fc77 	bl	8000bf4 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001314:	08005574 	.word	0x08005574
  ldr r2, =_sbss
 8001318:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800131c:	200002cc 	.word	0x200002cc

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f92b 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fe10 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f943 	bl	8001612 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f90b 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000010 	.word	0x20000010
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010
 80013ec:	200002c8 	.word	0x200002c8

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	200002c8 	.word	0x200002c8

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff8e 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff29 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff3e 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff8e 	bl	80014fc <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff31 	bl	800146c <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff feda 	bl	80013f0 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d008      	beq.n	800165c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e052      	b.n	8001702 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0216 	bic.w	r2, r2, #22
 800166a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800167a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <HAL_DMA_Abort+0x62>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001688:	2b00      	cmp	r3, #0
 800168a:	d007      	beq.n	800169c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0208 	bic.w	r2, r2, #8
 800169a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ac:	e013      	b.n	80016d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ae:	f7ff fe9f 	bl	80013f0 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d90c      	bls.n	80016d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2220      	movs	r2, #32
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e015      	b.n	8001702 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e4      	bne.n	80016ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d004      	beq.n	8001728 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e00c      	b.n	8001742 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2205      	movs	r2, #5
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e16b      	b.n	8001a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 815a 	bne.w	8001a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80b4 	beq.w	8001a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_GPIO_Init+0x310>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x314>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x318>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_GPIO_Init+0x31c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_GPIO_Init+0x324>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_GPIO_Init+0x328>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x32c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x330>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x20a>
 8001956:	2307      	movs	r3, #7
 8001958:	e00e      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195a:	2308      	movs	r3, #8
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195e:	2306      	movs	r3, #6
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x310>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f ae90 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40021c00 	.word	0x40021c00
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e12b      	b.n	8001d5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe ff98 	bl	8000a4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b54:	f001 fa06 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8001b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a81      	ldr	r2, [pc, #516]	; (8001d64 <HAL_I2C_Init+0x274>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d807      	bhi.n	8001b74 <HAL_I2C_Init+0x84>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a80      	ldr	r2, [pc, #512]	; (8001d68 <HAL_I2C_Init+0x278>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	bf94      	ite	ls
 8001b6c:	2301      	movls	r3, #1
 8001b6e:	2300      	movhi	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	e006      	b.n	8001b82 <HAL_I2C_Init+0x92>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a7d      	ldr	r2, [pc, #500]	; (8001d6c <HAL_I2C_Init+0x27c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	bf94      	ite	ls
 8001b7c:	2301      	movls	r3, #1
 8001b7e:	2300      	movhi	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e7      	b.n	8001d5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4a78      	ldr	r2, [pc, #480]	; (8001d70 <HAL_I2C_Init+0x280>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9b      	lsrs	r3, r3, #18
 8001b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4a6a      	ldr	r2, [pc, #424]	; (8001d64 <HAL_I2C_Init+0x274>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_I2C_Init+0xd4>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	e009      	b.n	8001bd8 <HAL_I2C_Init+0xe8>
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <HAL_I2C_Init+0x284>)
 8001bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd4:	099b      	lsrs	r3, r3, #6
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	495c      	ldr	r1, [pc, #368]	; (8001d64 <HAL_I2C_Init+0x274>)
 8001bf4:	428b      	cmp	r3, r1
 8001bf6:	d819      	bhi.n	8001c2c <HAL_I2C_Init+0x13c>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1e59      	subs	r1, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c06:	1c59      	adds	r1, r3, #1
 8001c08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_I2C_Init+0x138>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e59      	subs	r1, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c26:	e051      	b.n	8001ccc <HAL_I2C_Init+0x1dc>
 8001c28:	2304      	movs	r3, #4
 8001c2a:	e04f      	b.n	8001ccc <HAL_I2C_Init+0x1dc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_I2C_Init+0x168>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e58      	subs	r0, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	e012      	b.n	8001c7e <HAL_I2C_Init+0x18e>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e58      	subs	r0, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	0099      	lsls	r1, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Init+0x196>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e022      	b.n	8001ccc <HAL_I2C_Init+0x1dc>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10e      	bne.n	8001cac <HAL_I2C_Init+0x1bc>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1e58      	subs	r0, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6859      	ldr	r1, [r3, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	440b      	add	r3, r1
 8001c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001caa:	e00f      	b.n	8001ccc <HAL_I2C_Init+0x1dc>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	0099      	lsls	r1, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	6809      	ldr	r1, [r1, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6911      	ldr	r1, [r2, #16]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68d2      	ldr	r2, [r2, #12]
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	000186a0 	.word	0x000186a0
 8001d68:	001e847f 	.word	0x001e847f
 8001d6c:	003d08ff 	.word	0x003d08ff
 8001d70:	431bde83 	.word	0x431bde83
 8001d74:	10624dd3 	.word	0x10624dd3

08001d78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	817b      	strh	r3, [r7, #10]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	813b      	strh	r3, [r7, #8]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d92:	f7ff fb2d 	bl	80013f0 <HAL_GetTick>
 8001d96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	f040 8208 	bne.w	80021b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2319      	movs	r3, #25
 8001dac:	2201      	movs	r2, #1
 8001dae:	497b      	ldr	r1, [pc, #492]	; (8001f9c <HAL_I2C_Mem_Read+0x224>)
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 faef 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e1fb      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Mem_Read+0x56>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e1f4      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d007      	beq.n	8001df4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2222      	movs	r2, #34	; 0x22
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a5b      	ldr	r2, [pc, #364]	; (8001fa0 <HAL_I2C_Mem_Read+0x228>)
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e36:	88f8      	ldrh	r0, [r7, #6]
 8001e38:	893a      	ldrh	r2, [r7, #8]
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4603      	mov	r3, r0
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f9bc 	bl	80021c4 <I2C_RequestMemoryRead>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e1b0      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d113      	bne.n	8001e86 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	623b      	str	r3, [r7, #32]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e184      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d11b      	bne.n	8001ec6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e164      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d11b      	bne.n	8001f06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	e144      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f1c:	e138      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	f200 80f1 	bhi.w	800210a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d123      	bne.n	8001f78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fb44 	bl	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e139      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f76:	e10b      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d14e      	bne.n	800201e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f86:	2200      	movs	r2, #0
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <HAL_I2C_Mem_Read+0x22c>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fa02 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d008      	beq.n	8001fa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e10e      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000
 8001fa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201c:	e0b8      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002024:	2200      	movs	r2, #0
 8002026:	4966      	ldr	r1, [pc, #408]	; (80021c0 <HAL_I2C_Mem_Read+0x448>)
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f9b3 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0bf      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	2200      	movs	r2, #0
 8002082:	494f      	ldr	r1, [pc, #316]	; (80021c0 <HAL_I2C_Mem_Read+0x448>)
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f000 f985 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e091      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b29a      	uxth	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002108:	e042      	b.n	8002190 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 fa57 	bl	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e04c      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b04      	cmp	r3, #4
 800215c:	d118      	bne.n	8002190 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	f47f aec2 	bne.w	8001f1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3728      	adds	r7, #40	; 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	00010004 	.word	0x00010004

080021c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	4608      	mov	r0, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	461a      	mov	r2, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	817b      	strh	r3, [r7, #10]
 80021d6:	460b      	mov	r3, r1
 80021d8:	813b      	strh	r3, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	2200      	movs	r2, #0
 8002206:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f8c2 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00d      	beq.n	8002232 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002224:	d103      	bne.n	800222e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0aa      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002240:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	6a3a      	ldr	r2, [r7, #32]
 8002246:	4952      	ldr	r1, [pc, #328]	; (8002390 <I2C_RequestMemoryRead+0x1cc>)
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f8fa 	bl	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e097      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	6a39      	ldr	r1, [r7, #32]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f964 	bl	8002540 <I2C_WaitOnTXEFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00d      	beq.n	800229a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b04      	cmp	r3, #4
 8002284:	d107      	bne.n	8002296 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002294:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e076      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022a0:	893b      	ldrh	r3, [r7, #8]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	611a      	str	r2, [r3, #16]
 80022aa:	e021      	b.n	80022f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	6a39      	ldr	r1, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f93e 	bl	8002540 <I2C_WaitOnTXEFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00d      	beq.n	80022e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d107      	bne.n	80022e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e050      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022e6:	893b      	ldrh	r3, [r7, #8]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f2:	6a39      	ldr	r1, [r7, #32]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f923 	bl	8002540 <I2C_WaitOnTXEFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e035      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2200      	movs	r2, #0
 8002334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f82b 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00d      	beq.n	8002360 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002352:	d103      	bne.n	800235c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e013      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002360:	897b      	ldrh	r3, [r7, #10]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	6a3a      	ldr	r2, [r7, #32]
 8002374:	4906      	ldr	r1, [pc, #24]	; (8002390 <I2C_RequestMemoryRead+0x1cc>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f863 	bl	8002442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	00010002 	.word	0x00010002

08002394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	e025      	b.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d021      	beq.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff f81f 	bl	80013f0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d116      	bne.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f043 0220 	orr.w	r2, r3, #32
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e023      	b.n	800243a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10d      	bne.n	8002418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4013      	ands	r3, r2
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf0c      	ite	eq
 800240e:	2301      	moveq	r3, #1
 8002410:	2300      	movne	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461a      	mov	r2, r3
 8002416:	e00c      	b.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	43da      	mvns	r2, r3
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4013      	ands	r3, r2
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	bf0c      	ite	eq
 800242a:	2301      	moveq	r3, #1
 800242c:	2300      	movne	r3, #0
 800242e:	b2db      	uxtb	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	429a      	cmp	r2, r3
 8002436:	d0b6      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002450:	e051      	b.n	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002460:	d123      	bne.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800247a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e046      	b.n	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d021      	beq.n	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b2:	f7fe ff9d 	bl	80013f0 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d302      	bcc.n	80024c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d116      	bne.n	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f043 0220 	orr.w	r2, r3, #32
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e020      	b.n	8002538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10c      	bne.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4013      	ands	r3, r2
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e00b      	b.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d18d      	bne.n	8002452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254c:	e02d      	b.n	80025aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f88d 	bl	800266e <I2C_IsAcknowledgeFailed>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e02d      	b.n	80025ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d021      	beq.n	80025aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002566:	f7fe ff43 	bl	80013f0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	429a      	cmp	r2, r3
 8002574:	d302      	bcc.n	800257c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d116      	bne.n	80025aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e007      	b.n	80025ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d1ca      	bne.n	800254e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025ce:	e042      	b.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d119      	bne.n	8002612 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0210 	mvn.w	r2, #16
 80025e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e029      	b.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7fe feed 	bl	80013f0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d116      	bne.n	8002656 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e007      	b.n	8002666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002660:	2b40      	cmp	r3, #64	; 0x40
 8002662:	d1b5      	bne.n	80025d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002684:	d11b      	bne.n	80026be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e264      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d075      	beq.n	80027d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	4ba3      	ldr	r3, [pc, #652]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d00c      	beq.n	8002710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f6:	4ba0      	ldr	r3, [pc, #640]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d112      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002702:	4b9d      	ldr	r3, [pc, #628]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270e:	d10b      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	4b99      	ldr	r3, [pc, #612]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05b      	beq.n	80027d4 <HAL_RCC_OscConfig+0x108>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d157      	bne.n	80027d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e23f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x74>
 8002732:	4b91      	ldr	r3, [pc, #580]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a90      	ldr	r2, [pc, #576]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x98>
 800274a:	4b8b      	ldr	r3, [pc, #556]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a8a      	ldr	r2, [pc, #552]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b88      	ldr	r3, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a87      	ldr	r2, [pc, #540]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002764:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a83      	ldr	r2, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b81      	ldr	r3, [pc, #516]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a80      	ldr	r2, [pc, #512]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fe34 	bl	80013f0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fe30 	bl	80013f0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e204      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xc0>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fe20 	bl	80013f0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7fe fe1c 	bl	80013f0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1f0      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0xe8>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d063      	beq.n	80028aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	4b65      	ldr	r3, [pc, #404]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1c4      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b56      	ldr	r3, [pc, #344]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4952      	ldr	r1, [pc, #328]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b4f      	ldr	r3, [pc, #316]	; (800297c <HAL_RCC_OscConfig+0x2b0>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fdd5 	bl	80013f0 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe fdd1 	bl	80013f0 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1a5      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b46      	ldr	r3, [pc, #280]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b43      	ldr	r3, [pc, #268]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4940      	ldr	r1, [pc, #256]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_RCC_OscConfig+0x2b0>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fdb4 	bl	80013f0 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fdb0 	bl	80013f0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e184      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d030      	beq.n	8002918 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_OscConfig+0x2b4>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fd94 	bl	80013f0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fd90 	bl	80013f0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e164      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x200>
 80028ea:	e015      	b.n	8002918 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0x2b4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fe fd7d 	bl	80013f0 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd79 	bl	80013f0 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e14d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a0 	beq.w	8002a66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10f      	bne.n	8002956 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
 8002946:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x2b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d121      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_RCC_OscConfig+0x2b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a07      	ldr	r2, [pc, #28]	; (8002984 <HAL_RCC_OscConfig+0x2b8>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800296e:	f7fe fd3f 	bl	80013f0 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002974:	e011      	b.n	800299a <HAL_RCC_OscConfig+0x2ce>
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	42470000 	.word	0x42470000
 8002980:	42470e80 	.word	0x42470e80
 8002984:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002988:	f7fe fd32 	bl	80013f0 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e106      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b85      	ldr	r3, [pc, #532]	; (8002bb0 <HAL_RCC_OscConfig+0x4e4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x2f0>
 80029ae:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ba:	e01c      	b.n	80029f6 <HAL_RCC_OscConfig+0x32a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_OscConfig+0x312>
 80029c4:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a7a      	ldr	r2, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	e00b      	b.n	80029f6 <HAL_RCC_OscConfig+0x32a>
 80029de:	4b75      	ldr	r3, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a74      	ldr	r2, [pc, #464]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d015      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fe:	f7fe fcf7 	bl	80013f0 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fcf3 	bl	80013f0 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e0c5      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCC_OscConfig+0x33a>
 8002a28:	e014      	b.n	8002a54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fce1 	bl	80013f0 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fcdd 	bl	80013f0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0af      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a48:	4b5a      	ldr	r3, [pc, #360]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ee      	bne.n	8002a32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d105      	bne.n	8002a66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5a:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a55      	ldr	r2, [pc, #340]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 809b 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d05c      	beq.n	8002b36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d141      	bne.n	8002b08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <HAL_RCC_OscConfig+0x4ec>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fcb1 	bl	80013f0 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fcad 	bl	80013f0 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e081      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f0      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	019b      	lsls	r3, r3, #6
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	061b      	lsls	r3, r3, #24
 8002ad4:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ada:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <HAL_RCC_OscConfig+0x4ec>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fc86 	bl	80013f0 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fc82 	bl	80013f0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e056      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b2e      	ldr	r3, [pc, #184]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x41c>
 8002b06:	e04e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b2b      	ldr	r3, [pc, #172]	; (8002bb8 <HAL_RCC_OscConfig+0x4ec>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fc6f 	bl	80013f0 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fc6b 	bl	80013f0 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x44a>
 8002b34:	e037      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e032      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_RCC_OscConfig+0x4e8>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d028      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d121      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d11a      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b72:	4013      	ands	r3, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d111      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	085b      	lsrs	r3, r3, #1
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470060 	.word	0x42470060

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fba0 	bl	80013f0 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fb9c 	bl	80013f0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fb00 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	0800554c 	.word	0x0800554c
 8002d80:	20000008 	.word	0x20000008
 8002d84:	2000000c 	.word	0x2000000c

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4b67      	ldr	r3, [pc, #412]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f200 80bd 	bhi.w	8002f2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dba:	e0b7      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dbe:	60bb      	str	r3, [r7, #8]
       break;
 8002dc0:	e0b7      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002dc4:	60bb      	str	r3, [r7, #8]
      break;
 8002dc6:	e0b4      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b5d      	ldr	r3, [pc, #372]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd2:	4b5b      	ldr	r3, [pc, #364]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04d      	beq.n	8002e7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b58      	ldr	r3, [pc, #352]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	461a      	mov	r2, r3
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	ea02 0800 	and.w	r8, r2, r0
 8002df6:	ea03 0901 	and.w	r9, r3, r1
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	014b      	lsls	r3, r1, #5
 8002e08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e0c:	0142      	lsls	r2, r0, #5
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	ebb0 0008 	subs.w	r0, r0, r8
 8002e16:	eb61 0109 	sbc.w	r1, r1, r9
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	018b      	lsls	r3, r1, #6
 8002e24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e28:	0182      	lsls	r2, r0, #6
 8002e2a:	1a12      	subs	r2, r2, r0
 8002e2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	00d9      	lsls	r1, r3, #3
 8002e3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e3e:	00d0      	lsls	r0, r2, #3
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	eb12 0208 	adds.w	r2, r2, r8
 8002e48:	eb43 0309 	adc.w	r3, r3, r9
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	0259      	lsls	r1, r3, #9
 8002e56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e5a:	0250      	lsls	r0, r2, #9
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	f7fd f9ac 	bl	80001c8 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e04a      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e8a:	f04f 0100 	mov.w	r1, #0
 8002e8e:	ea02 0400 	and.w	r4, r2, r0
 8002e92:	ea03 0501 	and.w	r5, r3, r1
 8002e96:	4620      	mov	r0, r4
 8002e98:	4629      	mov	r1, r5
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	014b      	lsls	r3, r1, #5
 8002ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ea8:	0142      	lsls	r2, r0, #5
 8002eaa:	4610      	mov	r0, r2
 8002eac:	4619      	mov	r1, r3
 8002eae:	1b00      	subs	r0, r0, r4
 8002eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	018b      	lsls	r3, r1, #6
 8002ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ec2:	0182      	lsls	r2, r0, #6
 8002ec4:	1a12      	subs	r2, r2, r0
 8002ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	00d9      	lsls	r1, r3, #3
 8002ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed8:	00d0      	lsls	r0, r2, #3
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	1912      	adds	r2, r2, r4
 8002ee0:	eb45 0303 	adc.w	r3, r5, r3
 8002ee4:	f04f 0000 	mov.w	r0, #0
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	0299      	lsls	r1, r3, #10
 8002eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ef2:	0290      	lsls	r0, r2, #10
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd f960 	bl	80001c8 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60bb      	str	r3, [r7, #8]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f2e:	60bb      	str	r3, [r7, #8]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000008 	.word	0x20000008

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	0800555c 	.word	0x0800555c

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffdc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800555c 	.word	0x0800555c

08002fb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07b      	b.n	80030be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d108      	bne.n	8002fe0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fd6:	d009      	beq.n	8002fec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
 8002fde:	e005      	b.n	8002fec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd ff70 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0104 	and.w	r1, r3, #4
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 0210 	and.w	r2, r3, #16
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b088      	sub	sp, #32
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_SPI_Transmit+0x22>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e126      	b.n	8003336 <HAL_SPI_Transmit+0x270>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f0:	f7fe f97e 	bl	80013f0 <HAL_GetTick>
 80030f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b01      	cmp	r3, #1
 8003104:	d002      	beq.n	800310c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
    goto error;
 800310a:	e10b      	b.n	8003324 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_SPI_Transmit+0x52>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800311c:	e102      	b.n	8003324 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2203      	movs	r2, #3
 8003122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	88fa      	ldrh	r2, [r7, #6]
 8003136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003164:	d10f      	bne.n	8003186 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003174:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003184:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d007      	beq.n	80031a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ac:	d14b      	bne.n	8003246 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Transmit+0xf6>
 80031b6:	8afb      	ldrh	r3, [r7, #22]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d13e      	bne.n	800323a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	1c9a      	adds	r2, r3, #2
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80031e0:	e02b      	b.n	800323a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d112      	bne.n	8003216 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	86da      	strh	r2, [r3, #54]	; 0x36
 8003214:	e011      	b.n	800323a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003216:	f7fe f8eb 	bl	80013f0 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d803      	bhi.n	800322e <HAL_SPI_Transmit+0x168>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d102      	bne.n	8003234 <HAL_SPI_Transmit+0x16e>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d102      	bne.n	800323a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003238:	e074      	b.n	8003324 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ce      	bne.n	80031e2 <HAL_SPI_Transmit+0x11c>
 8003244:	e04c      	b.n	80032e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Transmit+0x18e>
 800324e:	8afb      	ldrh	r3, [r7, #22]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d140      	bne.n	80032d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	330c      	adds	r3, #12
 800325e:	7812      	ldrb	r2, [r2, #0]
 8003260:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800327a:	e02c      	b.n	80032d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d113      	bne.n	80032b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	330c      	adds	r3, #12
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80032b0:	e011      	b.n	80032d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b2:	f7fe f89d 	bl	80013f0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d803      	bhi.n	80032ca <HAL_SPI_Transmit+0x204>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d102      	bne.n	80032d0 <HAL_SPI_Transmit+0x20a>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032d4:	e026      	b.n	8003324 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1cd      	bne.n	800327c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fbcb 	bl	8003a80 <SPI_EndRxTxTransaction>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e000      	b.n	8003324 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003322:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003334:	7ffb      	ldrb	r3, [r7, #31]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b088      	sub	sp, #32
 8003342:	af02      	add	r7, sp, #8
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4613      	mov	r3, r2
 800334c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335a:	d112      	bne.n	8003382 <HAL_SPI_Receive+0x44>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10e      	bne.n	8003382 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2204      	movs	r2, #4
 8003368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4613      	mov	r3, r2
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f8f1 	bl	8003560 <HAL_SPI_TransmitReceive>
 800337e:	4603      	mov	r3, r0
 8003380:	e0ea      	b.n	8003558 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_SPI_Receive+0x52>
 800338c:	2302      	movs	r3, #2
 800338e:	e0e3      	b.n	8003558 <HAL_SPI_Receive+0x21a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003398:	f7fe f82a 	bl	80013f0 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033aa:	2302      	movs	r3, #2
 80033ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033ae:	e0ca      	b.n	8003546 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_SPI_Receive+0x7e>
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033c0:	e0c1      	b.n	8003546 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2204      	movs	r2, #4
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	88fa      	ldrh	r2, [r7, #6]
 80033da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	88fa      	ldrh	r2, [r7, #6]
 80033e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	d10f      	bne.n	800342a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d007      	beq.n	8003448 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003446:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d162      	bne.n	8003516 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003450:	e02e      	b.n	80034b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d115      	bne.n	800348c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f103 020c 	add.w	r2, r3, #12
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800348a:	e011      	b.n	80034b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800348c:	f7fd ffb0 	bl	80013f0 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d803      	bhi.n	80034a4 <HAL_SPI_Receive+0x166>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d102      	bne.n	80034aa <HAL_SPI_Receive+0x16c>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034ae:	e04a      	b.n	8003546 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cb      	bne.n	8003452 <HAL_SPI_Receive+0x114>
 80034ba:	e031      	b.n	8003520 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d113      	bne.n	80034f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	b292      	uxth	r2, r2
 80034d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f0:	e011      	b.n	8003516 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f2:	f7fd ff7d 	bl	80013f0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d803      	bhi.n	800350a <HAL_SPI_Receive+0x1cc>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d102      	bne.n	8003510 <HAL_SPI_Receive+0x1d2>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003514:	e017      	b.n	8003546 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1cd      	bne.n	80034bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	6839      	ldr	r1, [r7, #0]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fa45 	bl	80039b4 <SPI_EndRxTransaction>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
 8003542:	e000      	b.n	8003546 <HAL_SPI_Receive+0x208>
  }

error :
 8003544:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003556:	7dfb      	ldrb	r3, [r7, #23]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800356e:	2301      	movs	r3, #1
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x26>
 8003582:	2302      	movs	r3, #2
 8003584:	e18a      	b.n	800389c <HAL_SPI_TransmitReceive+0x33c>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800358e:	f7fd ff2f 	bl	80013f0 <HAL_GetTick>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d00f      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x70>
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b6:	d107      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <HAL_SPI_TransmitReceive+0x68>
 80035c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d003      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035ce:	e15b      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d005      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x82>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_TransmitReceive+0x82>
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80035e8:	e14e      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d003      	beq.n	80035fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2205      	movs	r2, #5
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	887a      	ldrh	r2, [r7, #2]
 8003626:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d007      	beq.n	8003652 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800365a:	d178      	bne.n	800374e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_SPI_TransmitReceive+0x10a>
 8003664:	8b7b      	ldrh	r3, [r7, #26]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d166      	bne.n	8003738 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368e:	e053      	b.n	8003738 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b02      	cmp	r3, #2
 800369c:	d11b      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x176>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x176>
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d113      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	1c9a      	adds	r2, r3, #2
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d119      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x1b8>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d014      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003718:	f7fd fe6a 	bl	80013f0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003724:	429a      	cmp	r2, r3
 8003726:	d807      	bhi.n	8003738 <HAL_SPI_TransmitReceive+0x1d8>
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d003      	beq.n	8003738 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003736:	e0a7      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1a6      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x130>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1a1      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x130>
 800374c:	e07c      	b.n	8003848 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_SPI_TransmitReceive+0x1fc>
 8003756:	8b7b      	ldrh	r3, [r7, #26]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d16b      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003782:	e057      	b.n	8003834 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d11c      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x26c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d017      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x26c>
 800379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d114      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d119      	bne.n	800380e <HAL_SPI_TransmitReceive+0x2ae>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d014      	beq.n	800380e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800380a:	2301      	movs	r3, #1
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800380e:	f7fd fdef 	bl	80013f0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800381a:	429a      	cmp	r2, r3
 800381c:	d803      	bhi.n	8003826 <HAL_SPI_TransmitReceive+0x2c6>
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d102      	bne.n	800382c <HAL_SPI_TransmitReceive+0x2cc>
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d103      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003832:	e029      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1a2      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x224>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d19d      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f917 	bl	8003a80 <SPI_EndRxTxTransaction>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d006      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003864:	e010      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	e000      	b.n	8003888 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800389c:	4618      	mov	r0, r3
 800389e:	3730      	adds	r7, #48	; 0x30
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038b4:	f7fd fd9c 	bl	80013f0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4413      	add	r3, r2
 80038c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038c4:	f7fd fd94 	bl	80013f0 <HAL_GetTick>
 80038c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ca:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	0d1b      	lsrs	r3, r3, #20
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
 80038d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038da:	e054      	b.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d050      	beq.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038e4:	f7fd fd84 	bl	80013f0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d902      	bls.n	80038fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d13d      	bne.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003912:	d111      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	d004      	beq.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	d107      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003940:	d10f      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e017      	b.n	80039a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	429a      	cmp	r2, r3
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d19b      	bne.n	80038dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000008 	.word	0x20000008

080039b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c8:	d111      	bne.n	80039ee <SPI_EndRxTransaction+0x3a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d2:	d004      	beq.n	80039de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039dc:	d107      	bne.n	80039ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f6:	d12a      	bne.n	8003a4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	d012      	beq.n	8003a28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7ff ff49 	bl	80038a4 <SPI_WaitFlagStateUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02d      	beq.n	8003a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0220 	orr.w	r2, r3, #32
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e026      	b.n	8003a76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2101      	movs	r1, #1
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ff36 	bl	80038a4 <SPI_WaitFlagStateUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01a      	beq.n	8003a74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e013      	b.n	8003a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2101      	movs	r1, #1
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff ff23 	bl	80038a4 <SPI_WaitFlagStateUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e000      	b.n	8003a76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <SPI_EndRxTxTransaction+0x7c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <SPI_EndRxTxTransaction+0x80>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0d5b      	lsrs	r3, r3, #21
 8003a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d112      	bne.n	8003ad2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fef4 	bl	80038a4 <SPI_WaitFlagStateUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d016      	beq.n	8003af0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e00f      	b.n	8003af2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d0f2      	beq.n	8003ad2 <SPI_EndRxTxTransaction+0x52>
 8003aec:	e000      	b.n	8003af0 <SPI_EndRxTxTransaction+0x70>
        break;
 8003aee:	bf00      	nop
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000008 	.word	0x20000008
 8003b00:	165e9f81 	.word	0x165e9f81

08003b04 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e034      	b.n	8003b84 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7fc fe5c 	bl	80007ec <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f001 fbfc 	bl	800533c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	f001 fc46 	bl	80053e0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6858      	ldr	r0, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	f001 fc7b 	bl	800545c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	6892      	ldr	r2, [r2, #8]
 8003b6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	f041 0101 	orr.w	r1, r1, #1
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd faa6 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fa24 	bl	8004018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d122      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d11b      	bne.n	8003c86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0202 	mvn.w	r2, #2
 8003c56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f9b5 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003c72:	e005      	b.n	8003c80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f9a7 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f9b8 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d122      	bne.n	8003cda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d11b      	bne.n	8003cda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f06f 0204 	mvn.w	r2, #4
 8003caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f98b 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003cc6:	e005      	b.n	8003cd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f97d 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f98e 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d122      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11b      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f06f 0208 	mvn.w	r2, #8
 8003cfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2204      	movs	r2, #4
 8003d04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f961 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003d1a:	e005      	b.n	8003d28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f953 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f964 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d122      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d11b      	bne.n	8003d82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f06f 0210 	mvn.w	r2, #16
 8003d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2208      	movs	r2, #8
 8003d58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f937 	bl	8003fdc <HAL_TIM_IC_CaptureCallback>
 8003d6e:	e005      	b.n	8003d7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f929 	bl	8003fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f93a 	bl	8003ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10e      	bne.n	8003dae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f06f 0201 	mvn.w	r2, #1
 8003da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7fd f83f 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	2b80      	cmp	r3, #128	; 0x80
 8003dba:	d10e      	bne.n	8003dda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b80      	cmp	r3, #128	; 0x80
 8003dc8:	d107      	bne.n	8003dda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fadf 	bl	8004398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b40      	cmp	r3, #64	; 0x40
 8003de6:	d10e      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d107      	bne.n	8003e06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8ff 	bl	8004004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d10e      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d107      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0220 	mvn.w	r2, #32
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 faa9 	bl	8004384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_ConfigClockSource+0x1c>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0b4      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x186>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8e:	d03e      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xd4>
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	f200 8087 	bhi.w	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9c:	f000 8086 	beq.w	8003fac <HAL_TIM_ConfigClockSource+0x172>
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea4:	d87f      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea6:	2b70      	cmp	r3, #112	; 0x70
 8003ea8:	d01a      	beq.n	8003ee0 <HAL_TIM_ConfigClockSource+0xa6>
 8003eaa:	2b70      	cmp	r3, #112	; 0x70
 8003eac:	d87b      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003eae:	2b60      	cmp	r3, #96	; 0x60
 8003eb0:	d050      	beq.n	8003f54 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb2:	2b60      	cmp	r3, #96	; 0x60
 8003eb4:	d877      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb6:	2b50      	cmp	r3, #80	; 0x50
 8003eb8:	d03c      	beq.n	8003f34 <HAL_TIM_ConfigClockSource+0xfa>
 8003eba:	2b50      	cmp	r3, #80	; 0x50
 8003ebc:	d873      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d058      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d86f      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec6:	2b30      	cmp	r3, #48	; 0x30
 8003ec8:	d064      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x15a>
 8003eca:	2b30      	cmp	r3, #48	; 0x30
 8003ecc:	d86b      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d060      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d867      	bhi.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d05c      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x15a>
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d05a      	beq.n	8003f94 <HAL_TIM_ConfigClockSource+0x15a>
 8003ede:	e062      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6899      	ldr	r1, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f000 f9ac 	bl	800424c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
      break;
 8003f0c:	e04f      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f000 f995 	bl	800424c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f30:	609a      	str	r2, [r3, #8]
      break;
 8003f32:	e03c      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f000 f909 	bl	8004158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2150      	movs	r1, #80	; 0x50
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 f962 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003f52:	e02c      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	461a      	mov	r2, r3
 8003f62:	f000 f928 	bl	80041b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2160      	movs	r1, #96	; 0x60
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f952 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003f72:	e01c      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f000 f8e9 	bl	8004158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2140      	movs	r1, #64	; 0x40
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 f942 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003f92:	e00c      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f000 f939 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003fa4:	e003      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8003faa:	e000      	b.n	8003fae <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d013      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d00f      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3d      	ldr	r2, [pc, #244]	; (8004130 <TIM_Base_SetConfig+0x118>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00b      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d007      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3b      	ldr	r2, [pc, #236]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_Base_SetConfig+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a3a      	ldr	r2, [pc, #232]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d108      	bne.n	800406a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2f      	ldr	r2, [pc, #188]	; (800412c <TIM_Base_SetConfig+0x114>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004078:	d027      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2c      	ldr	r2, [pc, #176]	; (8004130 <TIM_Base_SetConfig+0x118>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d023      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <TIM_Base_SetConfig+0x11c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2a      	ldr	r2, [pc, #168]	; (8004138 <TIM_Base_SetConfig+0x120>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a29      	ldr	r2, [pc, #164]	; (800413c <TIM_Base_SetConfig+0x124>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d017      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a28      	ldr	r2, [pc, #160]	; (8004140 <TIM_Base_SetConfig+0x128>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <TIM_Base_SetConfig+0x12c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00f      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <TIM_Base_SetConfig+0x130>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00b      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a25      	ldr	r2, [pc, #148]	; (800414c <TIM_Base_SetConfig+0x134>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a24      	ldr	r2, [pc, #144]	; (8004150 <TIM_Base_SetConfig+0x138>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a23      	ldr	r2, [pc, #140]	; (8004154 <TIM_Base_SetConfig+0x13c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a0a      	ldr	r2, [pc, #40]	; (800412c <TIM_Base_SetConfig+0x114>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0xf8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a0c      	ldr	r2, [pc, #48]	; (800413c <TIM_Base_SetConfig+0x124>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d103      	bne.n	8004118 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	615a      	str	r2, [r3, #20]
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40010400 	.word	0x40010400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800
 800414c:	40001800 	.word	0x40001800
 8004150:	40001c00 	.word	0x40001c00
 8004154:	40002000 	.word	0x40002000

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	f043 0307 	orr.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	431a      	orrs	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e05a      	b.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a21      	ldr	r2, [pc, #132]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d022      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d01d      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d018      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00e      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a17      	ldr	r2, [pc, #92]	; (800437c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10c      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4313      	orrs	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40000c00 	.word	0x40000c00
 8004378:	40010400 	.word	0x40010400
 800437c:	40014000 	.word	0x40014000
 8004380:	40001800 	.word	0x40001800

08004384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e03f      	b.n	800443e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fc ff12 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	; 0x24
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fddb 	bl	8004fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b08a      	sub	sp, #40	; 0x28
 800444a:	af02      	add	r7, sp, #8
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b20      	cmp	r3, #32
 8004464:	d17c      	bne.n	8004560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_UART_Transmit+0x2c>
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e075      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_UART_Transmit+0x3e>
 8004480:	2302      	movs	r3, #2
 8004482:	e06e      	b.n	8004562 <HAL_UART_Transmit+0x11c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2221      	movs	r2, #33	; 0x21
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800449a:	f7fc ffa9 	bl	80013f0 <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e003      	b.n	80044d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044d8:	e02a      	b.n	8004530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2180      	movs	r1, #128	; 0x80
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fb1f 	bl	8004b28 <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e036      	b.n	8004562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3302      	adds	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e007      	b.n	8004522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1cf      	bne.n	80044da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2200      	movs	r2, #0
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 faef 	bl	8004b28 <UART_WaitOnFlagUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e006      	b.n	8004562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004560:	2302      	movs	r3, #2
  }
}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b20      	cmp	r3, #32
 8004582:	d11d      	bne.n	80045c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_UART_Receive_IT+0x26>
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e016      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Receive_IT+0x38>
 800459e:	2302      	movs	r3, #2
 80045a0:	e00f      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	461a      	mov	r2, r3
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fb24 	bl	8004c04 <UART_Start_Receive_IT>
 80045bc:	4603      	mov	r3, r0
 80045be:	e000      	b.n	80045c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b0ba      	sub	sp, #232	; 0xe8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800460a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10f      	bne.n	8004632 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_UART_IRQHandler+0x66>
 800461e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fc03 	bl	8004e36 <UART_Receive_IT>
      return;
 8004630:	e256      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80de 	beq.w	80047f8 <HAL_UART_IRQHandler+0x22c>
 800463c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80d1 	beq.w	80047f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_UART_IRQHandler+0xae>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0201 	orr.w	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0xd2>
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_UART_IRQHandler+0xf6>
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f043 0204 	orr.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d011      	beq.n	80046f2 <HAL_UART_IRQHandler+0x126>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f043 0208 	orr.w	r2, r3, #8
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 81ed 	beq.w	8004ad6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_UART_IRQHandler+0x14e>
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fb8e 	bl	8004e36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_UART_IRQHandler+0x17a>
 800473e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04f      	beq.n	80047e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa96 	bl	8004c78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d141      	bne.n	80047de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3314      	adds	r3, #20
 8004782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800478a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800479e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1d9      	bne.n	800475a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d013      	beq.n	80047d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	4a7d      	ldr	r2, [pc, #500]	; (80049a8 <HAL_UART_IRQHandler+0x3dc>)
 80047b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fc ffa5 	bl	800170a <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00e      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f990 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e00a      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f98c 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e4:	e006      	b.n	80047f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f988 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047f2:	e170      	b.n	8004ad6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f4:	bf00      	nop
    return;
 80047f6:	e16e      	b.n	8004ad6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 814a 	bne.w	8004a96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8143 	beq.w	8004a96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 813c 	beq.w	8004a96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	f040 80b4 	bne.w	80049ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004850:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8140 	beq.w	8004ada <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800485e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004862:	429a      	cmp	r2, r3
 8004864:	f080 8139 	bcs.w	8004ada <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800486e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	f000 8088 	beq.w	800498e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80048aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80048c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1d9      	bne.n	800487e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3314      	adds	r3, #20
 80048ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e1      	bne.n	80048ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3314      	adds	r3, #20
 8004926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800492a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800492c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	330c      	adds	r3, #12
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	f023 0310 	bic.w	r3, r3, #16
 8004962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	330c      	adds	r3, #12
 800496c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004970:	65ba      	str	r2, [r7, #88]	; 0x58
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004976:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e3      	bne.n	800494c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fe4e 	bl	800162a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004996:	b29b      	uxth	r3, r3
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	b29b      	uxth	r3, r3
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8b6 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049a4:	e099      	b.n	8004ada <HAL_UART_IRQHandler+0x50e>
 80049a6:	bf00      	nop
 80049a8:	08004d3f 	.word	0x08004d3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 808b 	beq.w	8004ade <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80049c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8086 	beq.w	8004ade <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049f6:	647a      	str	r2, [r7, #68]	; 0x44
 80049f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e3      	bne.n	80049d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	623b      	str	r3, [r7, #32]
   return(result);
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	617b      	str	r3, [r7, #20]
   return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f83e 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a94:	e023      	b.n	8004ade <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x4ea>
 8004aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f959 	bl	8004d66 <UART_Transmit_IT>
    return;
 8004ab4:	e014      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x514>
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f999 	bl	8004e06 <UART_EndTransmit_IT>
    return;
 8004ad4:	e004      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
    return;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <HAL_UART_IRQHandler+0x514>
      return;
 8004ade:	bf00      	nop
  }
}
 8004ae0:	37e8      	adds	r7, #232	; 0xe8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b090      	sub	sp, #64	; 0x40
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b38:	e050      	b.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d04c      	beq.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b48:	f7fc fc52 	bl	80013f0 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d241      	bcs.n	8004bdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b78:	637a      	str	r2, [r7, #52]	; 0x34
 8004b7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3314      	adds	r3, #20
 8004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bac:	623a      	str	r2, [r7, #32]
 8004bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	6a3a      	ldr	r2, [r7, #32]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e00f      	b.n	8004bfc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d09f      	beq.n	8004b3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3740      	adds	r7, #64	; 0x40
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2222      	movs	r2, #34	; 0x22
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c48:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0220 	orr.w	r2, r2, #32
 8004c68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b095      	sub	sp, #84	; 0x54
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ca0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3314      	adds	r3, #20
 8004cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cdc:	e841 2300 	strex	r3, r2, [r1]
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e5      	bne.n	8004cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d119      	bne.n	8004d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	e853 3f00 	ldrex	r3, [r3]
 8004cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f023 0310 	bic.w	r3, r3, #16
 8004d06:	647b      	str	r3, [r7, #68]	; 0x44
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d10:	61ba      	str	r2, [r7, #24]
 8004d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6979      	ldr	r1, [r7, #20]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e5      	bne.n	8004cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d32:	bf00      	nop
 8004d34:	3754      	adds	r7, #84	; 0x54
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f7ff fecf 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d5e:	bf00      	nop
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b21      	cmp	r3, #33	; 0x21
 8004d78:	d13e      	bne.n	8004df8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d82:	d114      	bne.n	8004dae <UART_Transmit_IT+0x48>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d110      	bne.n	8004dae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	1c9a      	adds	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]
 8004dac:	e008      	b.n	8004dc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6211      	str	r1, [r2, #32]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4619      	mov	r1, r3
 8004dce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10f      	bne.n	8004df4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	e000      	b.n	8004dfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
  }
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fe5e 	bl	8004ae8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b08c      	sub	sp, #48	; 0x30
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b22      	cmp	r3, #34	; 0x22
 8004e48:	f040 80ab 	bne.w	8004fa2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e54:	d117      	bne.n	8004e86 <UART_Receive_IT+0x50>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d113      	bne.n	8004e86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
 8004e84:	e026      	b.n	8004ed4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e98:	d007      	beq.n	8004eaa <UART_Receive_IT+0x74>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10a      	bne.n	8004eb8 <UART_Receive_IT+0x82>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e008      	b.n	8004eca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d15a      	bne.n	8004f9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0220 	bic.w	r2, r2, #32
 8004ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0201 	bic.w	r2, r2, #1
 8004f16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d135      	bne.n	8004f94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f023 0310 	bic.w	r3, r3, #16
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	330c      	adds	r3, #12
 8004f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f4e:	623a      	str	r2, [r7, #32]
 8004f50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e5      	bne.n	8004f2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d10a      	bne.n	8004f86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff fdbf 	bl	8004b10 <HAL_UARTEx_RxEventCallback>
 8004f92:	e002      	b.n	8004f9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fc f8db 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	e002      	b.n	8004fa4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3730      	adds	r7, #48	; 0x30
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	b09f      	sub	sp, #124	; 0x7c
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	68d9      	ldr	r1, [r3, #12]
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	ea40 0301 	orr.w	r3, r0, r1
 8004fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ff0:	f021 010c 	bic.w	r1, r1, #12
 8004ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500a:	6999      	ldr	r1, [r3, #24]
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	ea40 0301 	orr.w	r3, r0, r1
 8005014:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4bc5      	ldr	r3, [pc, #788]	; (8005330 <UART_SetConfig+0x384>)
 800501c:	429a      	cmp	r2, r3
 800501e:	d004      	beq.n	800502a <UART_SetConfig+0x7e>
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4bc3      	ldr	r3, [pc, #780]	; (8005334 <UART_SetConfig+0x388>)
 8005026:	429a      	cmp	r2, r3
 8005028:	d103      	bne.n	8005032 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800502a:	f7fd ffaf 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 800502e:	6778      	str	r0, [r7, #116]	; 0x74
 8005030:	e002      	b.n	8005038 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005032:	f7fd ff97 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8005036:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005040:	f040 80b6 	bne.w	80051b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005046:	461c      	mov	r4, r3
 8005048:	f04f 0500 	mov.w	r5, #0
 800504c:	4622      	mov	r2, r4
 800504e:	462b      	mov	r3, r5
 8005050:	1891      	adds	r1, r2, r2
 8005052:	6439      	str	r1, [r7, #64]	; 0x40
 8005054:	415b      	adcs	r3, r3
 8005056:	647b      	str	r3, [r7, #68]	; 0x44
 8005058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800505c:	1912      	adds	r2, r2, r4
 800505e:	eb45 0303 	adc.w	r3, r5, r3
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	00d9      	lsls	r1, r3, #3
 800506c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005070:	00d0      	lsls	r0, r2, #3
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	1911      	adds	r1, r2, r4
 8005078:	6639      	str	r1, [r7, #96]	; 0x60
 800507a:	416b      	adcs	r3, r5
 800507c:	667b      	str	r3, [r7, #100]	; 0x64
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	461a      	mov	r2, r3
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	1891      	adds	r1, r2, r2
 800508a:	63b9      	str	r1, [r7, #56]	; 0x38
 800508c:	415b      	adcs	r3, r3
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005094:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005098:	f7fb f896 	bl	80001c8 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4ba5      	ldr	r3, [pc, #660]	; (8005338 <UART_SetConfig+0x38c>)
 80050a2:	fba3 2302 	umull	r2, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	011e      	lsls	r6, r3, #4
 80050aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ac:	461c      	mov	r4, r3
 80050ae:	f04f 0500 	mov.w	r5, #0
 80050b2:	4622      	mov	r2, r4
 80050b4:	462b      	mov	r3, r5
 80050b6:	1891      	adds	r1, r2, r2
 80050b8:	6339      	str	r1, [r7, #48]	; 0x30
 80050ba:	415b      	adcs	r3, r3
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050c2:	1912      	adds	r2, r2, r4
 80050c4:	eb45 0303 	adc.w	r3, r5, r3
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	00d9      	lsls	r1, r3, #3
 80050d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050d6:	00d0      	lsls	r0, r2, #3
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	1911      	adds	r1, r2, r4
 80050de:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e0:	416b      	adcs	r3, r5
 80050e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	461a      	mov	r2, r3
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	1891      	adds	r1, r2, r2
 80050f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80050f2:	415b      	adcs	r3, r3
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050fe:	f7fb f863 	bl	80001c8 <__aeabi_uldivmod>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	4b8c      	ldr	r3, [pc, #560]	; (8005338 <UART_SetConfig+0x38c>)
 8005108:	fba3 1302 	umull	r1, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	2164      	movs	r1, #100	; 0x64
 8005110:	fb01 f303 	mul.w	r3, r1, r3
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3332      	adds	r3, #50	; 0x32
 800511a:	4a87      	ldr	r2, [pc, #540]	; (8005338 <UART_SetConfig+0x38c>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	095b      	lsrs	r3, r3, #5
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005128:	441e      	add	r6, r3
 800512a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800512c:	4618      	mov	r0, r3
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	1894      	adds	r4, r2, r2
 8005138:	623c      	str	r4, [r7, #32]
 800513a:	415b      	adcs	r3, r3
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
 800513e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005142:	1812      	adds	r2, r2, r0
 8005144:	eb41 0303 	adc.w	r3, r1, r3
 8005148:	f04f 0400 	mov.w	r4, #0
 800514c:	f04f 0500 	mov.w	r5, #0
 8005150:	00dd      	lsls	r5, r3, #3
 8005152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005156:	00d4      	lsls	r4, r2, #3
 8005158:	4622      	mov	r2, r4
 800515a:	462b      	mov	r3, r5
 800515c:	1814      	adds	r4, r2, r0
 800515e:	653c      	str	r4, [r7, #80]	; 0x50
 8005160:	414b      	adcs	r3, r1
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 0300 	mov.w	r3, #0
 800516e:	1891      	adds	r1, r2, r2
 8005170:	61b9      	str	r1, [r7, #24]
 8005172:	415b      	adcs	r3, r3
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800517e:	f7fb f823 	bl	80001c8 <__aeabi_uldivmod>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4b6c      	ldr	r3, [pc, #432]	; (8005338 <UART_SetConfig+0x38c>)
 8005188:	fba3 1302 	umull	r1, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	2164      	movs	r1, #100	; 0x64
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	4a67      	ldr	r2, [pc, #412]	; (8005338 <UART_SetConfig+0x38c>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	f003 0207 	and.w	r2, r3, #7
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4432      	add	r2, r6
 80051ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051ae:	e0b9      	b.n	8005324 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b2:	461c      	mov	r4, r3
 80051b4:	f04f 0500 	mov.w	r5, #0
 80051b8:	4622      	mov	r2, r4
 80051ba:	462b      	mov	r3, r5
 80051bc:	1891      	adds	r1, r2, r2
 80051be:	6139      	str	r1, [r7, #16]
 80051c0:	415b      	adcs	r3, r3
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051c8:	1912      	adds	r2, r2, r4
 80051ca:	eb45 0303 	adc.w	r3, r5, r3
 80051ce:	f04f 0000 	mov.w	r0, #0
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	00d9      	lsls	r1, r3, #3
 80051d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051dc:	00d0      	lsls	r0, r2, #3
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	eb12 0804 	adds.w	r8, r2, r4
 80051e6:	eb43 0905 	adc.w	r9, r3, r5
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	008b      	lsls	r3, r1, #2
 80051fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005202:	0082      	lsls	r2, r0, #2
 8005204:	4640      	mov	r0, r8
 8005206:	4649      	mov	r1, r9
 8005208:	f7fa ffde 	bl	80001c8 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4b49      	ldr	r3, [pc, #292]	; (8005338 <UART_SetConfig+0x38c>)
 8005212:	fba3 2302 	umull	r2, r3, r3, r2
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	011e      	lsls	r6, r3, #4
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	4618      	mov	r0, r3
 800521e:	f04f 0100 	mov.w	r1, #0
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	1894      	adds	r4, r2, r2
 8005228:	60bc      	str	r4, [r7, #8]
 800522a:	415b      	adcs	r3, r3
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005232:	1812      	adds	r2, r2, r0
 8005234:	eb41 0303 	adc.w	r3, r1, r3
 8005238:	f04f 0400 	mov.w	r4, #0
 800523c:	f04f 0500 	mov.w	r5, #0
 8005240:	00dd      	lsls	r5, r3, #3
 8005242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005246:	00d4      	lsls	r4, r2, #3
 8005248:	4622      	mov	r2, r4
 800524a:	462b      	mov	r3, r5
 800524c:	1814      	adds	r4, r2, r0
 800524e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005250:	414b      	adcs	r3, r1
 8005252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	008b      	lsls	r3, r1, #2
 8005268:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800526c:	0082      	lsls	r2, r0, #2
 800526e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005272:	f7fa ffa9 	bl	80001c8 <__aeabi_uldivmod>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <UART_SetConfig+0x38c>)
 800527c:	fba3 1302 	umull	r1, r3, r3, r2
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2164      	movs	r1, #100	; 0x64
 8005284:	fb01 f303 	mul.w	r3, r1, r3
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <UART_SetConfig+0x38c>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529a:	441e      	add	r6, r3
 800529c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529e:	4618      	mov	r0, r3
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	1894      	adds	r4, r2, r2
 80052aa:	603c      	str	r4, [r7, #0]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b4:	1812      	adds	r2, r2, r0
 80052b6:	eb41 0303 	adc.w	r3, r1, r3
 80052ba:	f04f 0400 	mov.w	r4, #0
 80052be:	f04f 0500 	mov.w	r5, #0
 80052c2:	00dd      	lsls	r5, r3, #3
 80052c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c8:	00d4      	lsls	r4, r2, #3
 80052ca:	4622      	mov	r2, r4
 80052cc:	462b      	mov	r3, r5
 80052ce:	eb12 0a00 	adds.w	sl, r2, r0
 80052d2:	eb43 0b01 	adc.w	fp, r3, r1
 80052d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	f04f 0200 	mov.w	r2, #0
 80052e4:	f04f 0300 	mov.w	r3, #0
 80052e8:	008b      	lsls	r3, r1, #2
 80052ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052ee:	0082      	lsls	r2, r0, #2
 80052f0:	4650      	mov	r0, sl
 80052f2:	4659      	mov	r1, fp
 80052f4:	f7fa ff68 	bl	80001c8 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <UART_SetConfig+0x38c>)
 80052fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005302:	095b      	lsrs	r3, r3, #5
 8005304:	2164      	movs	r1, #100	; 0x64
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	3332      	adds	r3, #50	; 0x32
 8005310:	4a09      	ldr	r2, [pc, #36]	; (8005338 <UART_SetConfig+0x38c>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	f003 020f 	and.w	r2, r3, #15
 800531c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4432      	add	r2, r6
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	377c      	adds	r7, #124	; 0x7c
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	40011000 	.word	0x40011000
 8005334:	40011400 	.word	0x40011400
 8005338:	51eb851f 	.word	0x51eb851f

0800533c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005354:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4b20      	ldr	r3, [pc, #128]	; (80053dc <FSMC_NORSRAM_Init+0xa0>)
 800535a:	4013      	ands	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005366:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800536c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005372:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005378:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800537e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005384:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800538a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005390:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005396:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800539c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80053a2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80053a8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d103      	bne.n	80053c0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053be:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	fff00080 	.word	0xfff00080

080053e0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005402:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800540e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005416:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800541e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	3b01      	subs	r3, #1
 8005426:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005428:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	3b02      	subs	r3, #2
 8005430:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005432:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005438:	4313      	orrs	r3, r2
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005474:	d122      	bne.n	80054bc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005484:	4013      	ands	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005492:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800549a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80054a2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80054a8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80054ba:	e005      	b.n	80054c8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80054c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	cff00000 	.word	0xcff00000

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4d0d      	ldr	r5, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1b64      	subs	r4, r4, r5
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2600      	movs	r6, #0
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4d0b      	ldr	r5, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f000 f820 	bl	8005534 <_init>
 80054f4:	1b64      	subs	r4, r4, r5
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2600      	movs	r6, #0
 80054fa:	42a6      	cmp	r6, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f855 3b04 	ldr.w	r3, [r5], #4
 8005504:	4798      	blx	r3
 8005506:	3601      	adds	r6, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f855 3b04 	ldr.w	r3, [r5], #4
 800550e:	4798      	blx	r3
 8005510:	3601      	adds	r6, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	0800556c 	.word	0x0800556c
 8005518:	0800556c 	.word	0x0800556c
 800551c:	0800556c 	.word	0x0800556c
 8005520:	08005570 	.word	0x08005570

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <_init>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr

08005540 <_fini>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr
