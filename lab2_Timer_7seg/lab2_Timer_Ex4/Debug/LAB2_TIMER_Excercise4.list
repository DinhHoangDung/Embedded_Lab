
LAB2_TIMER_Excercise4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004134  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d4  080042d4  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042dc  080042dc  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
 10 .bss          000001bc  20000024  20000024  00020024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00020024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177b6  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd0  00000000  00000000  0003780a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003a7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  0003bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228f8  00000000  00000000  0003ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188ae  00000000  00000000  0005f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6f8  00000000  00000000  00077e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014658e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ffc  00000000  00000000  001465e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042a4 	.word	0x080042a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080042a4 	.word	0x080042a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_FSMC_Init+0xec>)
 80004ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_FSMC_Init+0xec>)
 80004f6:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <MX_FSMC_Init+0xf0>)
 80004f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_FSMC_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_FSMC_Init+0xec>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_FSMC_Init+0xec>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_FSMC_Init+0xec>)
 800050e:	2210      	movs	r2, #16
 8000510:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_FSMC_Init+0xec>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_FSMC_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_FSMC_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_FSMC_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_FSMC_Init+0xec>)
 800052c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FSMC_Init+0xec>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_FSMC_Init+0xec>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_FSMC_Init+0xec>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_FSMC_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_FSMC_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000552:	230f      	movs	r3, #15
 8000554:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000556:	230f      	movs	r3, #15
 8000558:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800055a:	233c      	movs	r3, #60	; 0x3c
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000566:	2311      	movs	r3, #17
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000572:	230f      	movs	r3, #15
 8000574:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000576:	2309      	movs	r3, #9
 8000578:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800057e:	2310      	movs	r3, #16
 8000580:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000582:	2311      	movs	r3, #17
 8000584:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800058a:	463a      	mov	r2, r7
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_FSMC_Init+0xec>)
 8000594:	f002 fa5c 	bl	8002a50 <HAL_SRAM_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800059e:	f000 fbe1 	bl	8000d64 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005a2:	bf00      	nop
 80005a4:	3738      	adds	r7, #56	; 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000054 	.word	0x20000054
 80005b0:	a0000104 	.word	0xa0000104

080005b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d131      	bne.n	8000634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6393      	str	r3, [r2, #56]	; 0x38
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80005f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80005f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000604:	230c      	movs	r3, #12
 8000606:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_FSMC_MspInit+0x90>)
 800060e:	f001 f821 	bl	8001654 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000612:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000624:	230c      	movs	r3, #12
 8000626:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_FSMC_MspInit+0x94>)
 800062e:	f001 f811 	bl	8001654 <HAL_GPIO_Init>
 8000632:	e000      	b.n	8000636 <HAL_FSMC_MspInit+0x82>
    return;
 8000634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000040 	.word	0x20000040
 8000640:	40023800 	.word	0x40023800
 8000644:	40021000 	.word	0x40021000
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000654:	f7ff ffae 	bl	80005b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a67      	ldr	r2, [pc, #412]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b65      	ldr	r3, [pc, #404]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a60      	ldr	r2, [pc, #384]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a59      	ldr	r2, [pc, #356]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a52      	ldr	r2, [pc, #328]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a4b      	ldr	r2, [pc, #300]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b49      	ldr	r3, [pc, #292]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a44      	ldr	r2, [pc, #272]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2170      	movs	r1, #112	; 0x70
 800073e:	483f      	ldr	r0, [pc, #252]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000740:	f001 f924 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	483d      	ldr	r0, [pc, #244]	; (8000840 <MX_GPIO_Init+0x1e0>)
 800074c:	f001 f91e 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	483b      	ldr	r0, [pc, #236]	; (8000844 <MX_GPIO_Init+0x1e4>)
 8000756:	f001 f919 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000762:	f001 f913 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4838      	ldr	r0, [pc, #224]	; (800084c <MX_GPIO_Init+0x1ec>)
 800076c:	f001 f90e 	bl	800198c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000770:	2370      	movs	r3, #112	; 0x70
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000788:	f000 ff64 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4826      	ldr	r0, [pc, #152]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007a6:	f000 ff55 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80007aa:	23c0      	movs	r3, #192	; 0xc0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x1e8>)
 80007be:	f000 ff49 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80007c2:	2330      	movs	r3, #48	; 0x30
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007d6:	f000 ff3d 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0x1e4>)
 80007f2:	f000 ff2f 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000810:	f000 ff20 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000814:	2308      	movs	r3, #8
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_GPIO_Init+0x1ec>)
 800082c:	f000 ff12 	bl	8001654 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020800 	.word	0x40020800
 8000844:	40021800 	.word	0x40021800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00

08000850 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f001 f897 	bl	80019c0 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 fa64 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	2304      	movs	r3, #4
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x8c>)
 8000906:	f000 fea5 	bl	8001654 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_I2C_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40005400 	.word	0x40005400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400

0800093c <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <led7_init+0x14>)
 8000946:	f001 f821 	bl	800198c <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021800 	.word	0x40021800

08000954 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <led7_Scan+0x104>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <led7_Scan+0x104>)
 8000962:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <led7_Scan+0x108>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <led7_Scan+0x10c>)
 800096c:	5c9b      	ldrb	r3, [r3, r2]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <led7_Scan+0x104>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b21b      	sxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b21b      	sxth	r3, r3
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <led7_Scan+0x104>)
 8000980:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <led7_Scan+0x108>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d846      	bhi.n	8000a18 <led7_Scan+0xc4>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <led7_Scan+0x3c>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009bf 	.word	0x080009bf
 8000998:	080009dd 	.word	0x080009dd
 800099c:	080009fb 	.word	0x080009fb
	case 0:
		spi_buffer |= 0x00b0;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <led7_Scan+0x104>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <led7_Scan+0x104>)
 80009ac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <led7_Scan+0x104>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <led7_Scan+0x104>)
 80009ba:	801a      	strh	r2, [r3, #0]
		break;
 80009bc:	e02d      	b.n	8000a1a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <led7_Scan+0x104>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <led7_Scan+0x104>)
 80009ca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <led7_Scan+0x104>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	f023 0320 	bic.w	r3, r3, #32
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <led7_Scan+0x104>)
 80009d8:	801a      	strh	r2, [r3, #0]
		break;
 80009da:	e01e      	b.n	8000a1a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <led7_Scan+0x104>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <led7_Scan+0x104>)
 80009e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <led7_Scan+0x104>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	f023 0310 	bic.w	r3, r3, #16
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <led7_Scan+0x104>)
 80009f6:	801a      	strh	r2, [r3, #0]
		break;
 80009f8:	e00f      	b.n	8000a1a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <led7_Scan+0x104>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <led7_Scan+0x104>)
 8000a06:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <led7_Scan+0x104>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <led7_Scan+0x104>)
 8000a14:	801a      	strh	r2, [r3, #0]
		break;
 8000a16:	e000      	b.n	8000a1a <led7_Scan+0xc6>
	default:
		break;
 8000a18:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <led7_Scan+0x108>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	425a      	negs	r2, r3
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	f002 0203 	and.w	r2, r2, #3
 8000a2a:	bf58      	it	pl
 8000a2c:	4253      	negpl	r3, r2
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <led7_Scan+0x108>)
 8000a32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <led7_Scan+0x110>)
 8000a3a:	f000 ffa7 	bl	800198c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2202      	movs	r2, #2
 8000a42:	4905      	ldr	r1, [pc, #20]	; (8000a58 <led7_Scan+0x104>)
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <led7_Scan+0x114>)
 8000a46:	f001 fdfc 	bl	8002642 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <led7_Scan+0x110>)
 8000a50:	f000 ff9c 	bl	800198c <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000000e 	.word	0x2000000e
 8000a5c:	20000044 	.word	0x20000044
 8000a60:	20000000 	.word	0x20000000
 8000a64:	40021800 	.word	0x40021800
 8000a68:	200000f8 	.word	0x200000f8

08000a6c <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	4613      	mov	r3, r2
 8000a78:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0e      	blt.n	8000a9e <led7_SetDigit+0x32>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b09      	cmp	r3, #9
 8000a84:	dc0b      	bgt.n	8000a9e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <led7_SetDigit+0x40>)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	b2d9      	uxtb	r1, r3
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <led7_SetDigit+0x44>)
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d107      	bne.n	8000ad4 <led7_SetColon+0x20>
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <led7_SetColon+0x3c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	f023 0308 	bic.w	r3, r3, #8
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <led7_SetColon+0x3c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8000ad2:	e006      	b.n	8000ae2 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <led7_SetColon+0x3c>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <led7_SetColon+0x3c>)
 8000ae0:	801a      	strh	r2, [r3, #0]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	2000000e 	.word	0x2000000e

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af8:	f000 fb96 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000afc:	f000 f81e 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b00:	f7ff fdae 	bl	8000660 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b04:	f000 fa7a 	bl	8000ffc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000b08:	f000 f982 	bl	8000e10 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000b0c:	f7ff fcd8 	bl	80004c0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000b10:	f7ff fe9e 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b14:	f000 fae4 	bl	80010e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000b18:	f000 f87a 	bl	8000c10 <system_init>
  led7_SetColon(1);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff ffc9 	bl	8000ab4 <led7_SetColon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8000b22:	bf00      	nop
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <main+0x44>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0fb      	beq.n	8000b24 <main+0x30>
	  flag_timer2 = 0;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <main+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
	  //Tasks
	  realTime();
 8000b32:	f000 f889 	bl	8000c48 <realTime>
	  while(!flag_timer2);
 8000b36:	e7f4      	b.n	8000b22 <main+0x2e>
 8000b38:	2000004e 	.word	0x2000004e

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	2230      	movs	r2, #48	; 0x30
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fba2 	bl	8004294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <SystemClock_Config+0xcc>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SystemClock_Config+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb0:	23a8      	movs	r3, #168	; 0xa8
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb8:	2304      	movs	r3, #4
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 f841 	bl	8001c48 <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bcc:	f000 f8ca 	bl	8000d64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000be2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2105      	movs	r1, #5
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 faa2 	bl	8002138 <HAL_RCC_ClockConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bfa:	f000 f8b3 	bl	8000d64 <Error_Handler>
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3750      	adds	r7, #80	; 0x50
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40007000 	.word	0x40007000

08000c10 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2120      	movs	r1, #32
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <system_init+0x34>)
 8000c1a:	f000 feb7 	bl	800198c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2140      	movs	r1, #64	; 0x40
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <system_init+0x34>)
 8000c24:	f000 feb2 	bl	800198c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <system_init+0x34>)
 8000c2e:	f000 fead 	bl	800198c <HAL_GPIO_WritePin>
	  timer_init();
 8000c32:	f000 f89d 	bl	8000d70 <timer_init>
	  led7_init();
 8000c36:	f7ff fe81 	bl	800093c <led7_init>

	  setTimer2(50);
 8000c3a:	2032      	movs	r0, #50	; 0x32
 8000c3c:	f000 f8a2 	bl	8000d84 <setTimer2>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000

08000c48 <realTime>:
int second = 0;
int minute = 59;
int hour = 23;
uint8_t count = 0;

void realTime() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	count = (count + 1) % 20;
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <realTime+0x108>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	4b40      	ldr	r3, [pc, #256]	; (8000d54 <realTime+0x10c>)
 8000c54:	fb83 1302 	smull	r1, r3, r3, r2
 8000c58:	10d9      	asrs	r1, r3, #3
 8000c5a:	17d3      	asrs	r3, r2, #31
 8000c5c:	1ac9      	subs	r1, r1, r3
 8000c5e:	460b      	mov	r3, r1
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	1ad1      	subs	r1, r2, r3
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <realTime+0x108>)
 8000c6c:	701a      	strb	r2, [r3, #0]
	if (count == 0) {
 8000c6e:	4b38      	ldr	r3, [pc, #224]	; (8000d50 <realTime+0x108>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d123      	bne.n	8000cbe <realTime+0x76>
		second++;
 8000c76:	4b38      	ldr	r3, [pc, #224]	; (8000d58 <realTime+0x110>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a36      	ldr	r2, [pc, #216]	; (8000d58 <realTime+0x110>)
 8000c7e:	6013      	str	r3, [r2, #0]
		if (second == 60) {
 8000c80:	4b35      	ldr	r3, [pc, #212]	; (8000d58 <realTime+0x110>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b3c      	cmp	r3, #60	; 0x3c
 8000c86:	d11a      	bne.n	8000cbe <realTime+0x76>
			second = 0;
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <realTime+0x110>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
			minute++;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <realTime+0x114>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <realTime+0x114>)
 8000c96:	6013      	str	r3, [r2, #0]
			if (minute == 60) {
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <realTime+0x114>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b3c      	cmp	r3, #60	; 0x3c
 8000c9e:	d10e      	bne.n	8000cbe <realTime+0x76>
				minute = 0;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <realTime+0x114>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
				hour++;
 8000ca6:	4b2e      	ldr	r3, [pc, #184]	; (8000d60 <realTime+0x118>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <realTime+0x118>)
 8000cae:	6013      	str	r3, [r2, #0]
				if (hour == 24) hour = 0;
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <realTime+0x118>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b18      	cmp	r3, #24
 8000cb6:	d102      	bne.n	8000cbe <realTime+0x76>
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <realTime+0x118>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
			}
		}
	}
	led7_SetDigit(hour / 10, 0, 0);
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <realTime+0x118>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <realTime+0x10c>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1092      	asrs	r2, r2, #2
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff feca 	bl	8000a6c <led7_SetDigit>
	led7_SetDigit(hour % 10, 1, 0);
 8000cd8:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <realTime+0x118>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <realTime+0x10c>)
 8000cde:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce2:	1099      	asrs	r1, r3, #2
 8000ce4:	17d3      	asrs	r3, r2, #31
 8000ce6:	1ac8      	subs	r0, r1, r3
 8000ce8:	4603      	mov	r3, r0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4403      	add	r3, r0
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	1ad0      	subs	r0, r2, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	f7ff feb9 	bl	8000a6c <led7_SetDigit>
	led7_SetDigit(minute / 10, 2, 0);
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <realTime+0x114>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <realTime+0x10c>)
 8000d00:	fb82 1203 	smull	r1, r2, r2, r3
 8000d04:	1092      	asrs	r2, r2, #2
 8000d06:	17db      	asrs	r3, r3, #31
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff feac 	bl	8000a6c <led7_SetDigit>
	led7_SetDigit(minute % 10, 3, 0);
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <realTime+0x114>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <realTime+0x10c>)
 8000d1a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1e:	1099      	asrs	r1, r3, #2
 8000d20:	17d3      	asrs	r3, r2, #31
 8000d22:	1ac8      	subs	r0, r1, r3
 8000d24:	4603      	mov	r3, r0
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4403      	add	r3, r0
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1ad0      	subs	r0, r2, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2103      	movs	r1, #3
 8000d32:	f7ff fe9b 	bl	8000a6c <led7_SetDigit>

	if (count > 10) led7_SetColon(1);
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <realTime+0x108>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d903      	bls.n	8000d46 <realTime+0xfe>
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff feb8 	bl	8000ab4 <led7_SetColon>
	else led7_SetColon(0);
}
 8000d44:	e002      	b.n	8000d4c <realTime+0x104>
	else led7_SetColon(0);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff feb4 	bl	8000ab4 <led7_SetColon>
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000004c 	.word	0x2000004c
 8000d54:	66666667 	.word	0x66666667
 8000d58:	20000048 	.word	0x20000048
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000014 	.word	0x20000014

08000d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <timer_init+0x10>)
 8000d76:	f001 feff 	bl	8002b78 <HAL_TIM_Base_Start_IT>
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000150 	.word	0x20000150

08000d84 <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <setTimer2+0x2c>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <setTimer2+0x2c>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <setTimer2+0x30>)
 8000d9a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <setTimer2+0x34>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	801a      	strh	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000052 	.word	0x20000052
 8000db4:	20000050 	.word	0x20000050
 8000db8:	2000004e 	.word	0x2000004e

08000dbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d116      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d010      	beq.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000de0:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d106      	bne.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000df6:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8000df8:	f7ff fdac 	bl	8000954 <led7_Scan>
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000050 	.word	0x20000050
 8000e08:	2000004e 	.word	0x2000004e
 8000e0c:	20000052 	.word	0x20000052

08000e10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e16:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <MX_SPI1_Init+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e5c:	220a      	movs	r2, #10
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_SPI1_Init+0x64>)
 8000e62:	f001 fb65 	bl	8002530 <HAL_SPI_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e6c:	f7ff ff7a 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200000f8 	.word	0x200000f8
 8000e78:	40013000 	.word	0x40013000

08000e7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_SPI_MspInit+0x84>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12b      	bne.n	8000ef6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_SPI_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ed6:	2338      	movs	r3, #56	; 0x38
 8000ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_SPI_MspInit+0x8c>)
 8000ef2:	f000 fbaf 	bl	8001654 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40013000 	.word	0x40013000
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f990 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb4:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <TIM2_IRQHandler+0x10>)
 8000fb6:	f001 fe4f 	bl	8002c58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000150 	.word	0x20000150

08000fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0x10>)
 8000fca:	f002 fa55 	bl	8003478 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000198 	.word	0x20000198

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	463b      	mov	r3, r7
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_TIM2_Init+0x94>)
 800101a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800101e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_TIM2_Init+0x94>)
 8001022:	f240 3247 	movw	r2, #839	; 0x347
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_TIM2_Init+0x94>)
 8001030:	2263      	movs	r2, #99	; 0x63
 8001032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_TIM2_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001040:	4813      	ldr	r0, [pc, #76]	; (8001090 <MX_TIM2_Init+0x94>)
 8001042:	f001 fd49 	bl	8002ad8 <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800104c:	f7ff fe8a 	bl	8000d64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4619      	mov	r1, r3
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <MX_TIM2_Init+0x94>)
 800105e:	f001 ff03 	bl	8002e68 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001068:	f7ff fe7c 	bl	8000d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_TIM2_Init+0x94>)
 800107a:	f002 f91f 	bl	80032bc <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001084:	f7ff fe6e 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000150 	.word	0x20000150

08001094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010a4:	d115      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_TIM_Base_MspInit+0x48>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0x48>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2100      	movs	r1, #0
 80010c6:	201c      	movs	r0, #28
 80010c8:	f000 f9fb 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010cc:	201c      	movs	r0, #28
 80010ce:	f000 fa14 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART1_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART1_UART_Init+0x4c>)
 8001118:	f002 f960 	bl	80033dc <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f7ff fe1f 	bl	8000d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000198 	.word	0x20000198
 8001130:	40011000 	.word	0x40011000

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_UART_MspInit+0x94>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d134      	bne.n	80011c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <HAL_UART_MspInit+0x98>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_UART_MspInit+0x98>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_UART_MspInit+0x98>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800118e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a0:	2307      	movs	r3, #7
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <HAL_UART_MspInit+0x9c>)
 80011ac:	f000 fa52 	bl	8001654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	2025      	movs	r0, #37	; 0x25
 80011b6:	f000 f984 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ba:	2025      	movs	r0, #37	; 0x25
 80011bc:	f000 f99d 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011fe:	f7ff feeb 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f003 f823 	bl	800424c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fc75 	bl	8000af4 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001218:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 800121c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001220:	200001e0 	.word	0x200001e0

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f92b 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fe56 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f943 	bl	8001516 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f90b 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000018 	.word	0x20000018
 80012c4:	20000020 	.word	0x20000020
 80012c8:	2000001c 	.word	0x2000001c

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000020 	.word	0x20000020
 80012f0:	200001dc 	.word	0x200001dc

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200001dc 	.word	0x200001dc

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff3e 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff8e 	bl	8001400 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff31 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff feda 	bl	80012f4 <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d008      	beq.n	8001560 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e052      	b.n	8001606 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0216 	bic.w	r2, r2, #22
 800156e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	695a      	ldr	r2, [r3, #20]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2b00      	cmp	r3, #0
 8001586:	d103      	bne.n	8001590 <HAL_DMA_Abort+0x62>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0208 	bic.w	r2, r2, #8
 800159e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b0:	e013      	b.n	80015da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b2:	f7ff fe9f 	bl	80012f4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d90c      	bls.n	80015da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2203      	movs	r2, #3
 80015ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e015      	b.n	8001606 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e4      	bne.n	80015b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	223f      	movs	r2, #63	; 0x3f
 80015ee:	409a      	lsls	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d004      	beq.n	800162c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2280      	movs	r2, #128	; 0x80
 8001626:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e00c      	b.n	8001646 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2205      	movs	r2, #5
 8001630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e16b      	b.n	8001948 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	429a      	cmp	r2, r3
 800168a:	f040 815a 	bne.w	8001942 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	2b01      	cmp	r3, #1
 8001698:	d005      	beq.n	80016a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d130      	bne.n	8001708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4013      	ands	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	69b9      	ldr	r1, [r7, #24]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b4 	beq.w	8001942 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b60      	ldr	r3, [pc, #384]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a5f      	ldr	r2, [pc, #380]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b5d      	ldr	r3, [pc, #372]	; (8001960 <HAL_GPIO_Init+0x30c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f6:	4a5b      	ldr	r2, [pc, #364]	; (8001964 <HAL_GPIO_Init+0x310>)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x314>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d02b      	beq.n	800187a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x318>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d025      	beq.n	8001876 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x31c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d01f      	beq.n	8001872 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x320>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d019      	beq.n	800186e <HAL_GPIO_Init+0x21a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4e      	ldr	r2, [pc, #312]	; (8001978 <HAL_GPIO_Init+0x324>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0x216>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4d      	ldr	r2, [pc, #308]	; (800197c <HAL_GPIO_Init+0x328>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00d      	beq.n	8001866 <HAL_GPIO_Init+0x212>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4c      	ldr	r2, [pc, #304]	; (8001980 <HAL_GPIO_Init+0x32c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4b      	ldr	r2, [pc, #300]	; (8001984 <HAL_GPIO_Init+0x330>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_GPIO_Init+0x20a>
 800185a:	2307      	movs	r3, #7
 800185c:	e00e      	b.n	800187c <HAL_GPIO_Init+0x228>
 800185e:	2308      	movs	r3, #8
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001862:	2306      	movs	r3, #6
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x228>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x228>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x228>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x228>
 800187a:	2300      	movs	r3, #0
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_GPIO_Init+0x310>)
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189a:	4b3b      	ldr	r3, [pc, #236]	; (8001988 <HAL_GPIO_Init+0x334>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018be:	4a32      	ldr	r2, [pc, #200]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e8:	4a27      	ldr	r2, [pc, #156]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_GPIO_Init+0x334>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4013      	ands	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001912:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_GPIO_Init+0x334>)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_GPIO_Init+0x334>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800193c:	4a12      	ldr	r2, [pc, #72]	; (8001988 <HAL_GPIO_Init+0x334>)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3301      	adds	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b0f      	cmp	r3, #15
 800194c:	f67f ae90 	bls.w	8001670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40013800 	.word	0x40013800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40021000 	.word	0x40021000
 800197c:	40021400 	.word	0x40021400
 8001980:	40021800 	.word	0x40021800
 8001984:	40021c00 	.word	0x40021c00
 8001988:	40013c00 	.word	0x40013c00

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a8:	e003      	b.n	80019b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	619a      	str	r2, [r3, #24]
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e12b      	b.n	8001c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe ff60 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2224      	movs	r2, #36	; 0x24
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a24:	f000 fd5c 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8001a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4a81      	ldr	r2, [pc, #516]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d807      	bhi.n	8001a44 <HAL_I2C_Init+0x84>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a80      	ldr	r2, [pc, #512]	; (8001c38 <HAL_I2C_Init+0x278>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	bf94      	ite	ls
 8001a3c:	2301      	movls	r3, #1
 8001a3e:	2300      	movhi	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e006      	b.n	8001a52 <HAL_I2C_Init+0x92>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4a7d      	ldr	r2, [pc, #500]	; (8001c3c <HAL_I2C_Init+0x27c>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	bf94      	ite	ls
 8001a4c:	2301      	movls	r3, #1
 8001a4e:	2300      	movhi	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0e7      	b.n	8001c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4a78      	ldr	r2, [pc, #480]	; (8001c40 <HAL_I2C_Init+0x280>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0c9b      	lsrs	r3, r3, #18
 8001a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a1b      	ldr	r3, [r3, #32]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a6a      	ldr	r2, [pc, #424]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d802      	bhi.n	8001a94 <HAL_I2C_Init+0xd4>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	e009      	b.n	8001aa8 <HAL_I2C_Init+0xe8>
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a69      	ldr	r2, [pc, #420]	; (8001c44 <HAL_I2C_Init+0x284>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	495c      	ldr	r1, [pc, #368]	; (8001c34 <HAL_I2C_Init+0x274>)
 8001ac4:	428b      	cmp	r3, r1
 8001ac6:	d819      	bhi.n	8001afc <HAL_I2C_Init+0x13c>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1e59      	subs	r1, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad6:	1c59      	adds	r1, r3, #1
 8001ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001adc:	400b      	ands	r3, r1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00a      	beq.n	8001af8 <HAL_I2C_Init+0x138>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e59      	subs	r1, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af6:	e051      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001af8:	2304      	movs	r3, #4
 8001afa:	e04f      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d111      	bne.n	8001b28 <HAL_I2C_Init+0x168>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1e58      	subs	r0, r3, #1
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	440b      	add	r3, r1
 8001b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b16:	3301      	adds	r3, #1
 8001b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	e012      	b.n	8001b4e <HAL_I2C_Init+0x18e>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1e58      	subs	r0, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	0099      	lsls	r1, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf0c      	ite	eq
 8001b48:	2301      	moveq	r3, #1
 8001b4a:	2300      	movne	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Init+0x196>
 8001b52:	2301      	movs	r3, #1
 8001b54:	e022      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10e      	bne.n	8001b7c <HAL_I2C_Init+0x1bc>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1e58      	subs	r0, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6859      	ldr	r1, [r3, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	440b      	add	r3, r1
 8001b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7a:	e00f      	b.n	8001b9c <HAL_I2C_Init+0x1dc>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e58      	subs	r0, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	0099      	lsls	r1, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	6809      	ldr	r1, [r1, #0]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6911      	ldr	r1, [r2, #16]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68d2      	ldr	r2, [r2, #12]
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	000186a0 	.word	0x000186a0
 8001c38:	001e847f 	.word	0x001e847f
 8001c3c:	003d08ff 	.word	0x003d08ff
 8001c40:	431bde83 	.word	0x431bde83
 8001c44:	10624dd3 	.word	0x10624dd3

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e264      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d075      	beq.n	8001d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	4ba3      	ldr	r3, [pc, #652]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d00c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4ba0      	ldr	r3, [pc, #640]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d112      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b9d      	ldr	r3, [pc, #628]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	4b99      	ldr	r3, [pc, #612]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d05b      	beq.n	8001d50 <HAL_RCC_OscConfig+0x108>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d157      	bne.n	8001d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e23f      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x74>
 8001cae:	4b91      	ldr	r3, [pc, #580]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e01d      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b88      	ldr	r3, [pc, #544]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0xb0>
 8001ce0:	4b84      	ldr	r3, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a83      	ldr	r2, [pc, #524]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b81      	ldr	r3, [pc, #516]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a80      	ldr	r2, [pc, #512]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff faf8 	bl	80012f4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7ff faf4 	bl	80012f4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b64      	cmp	r3, #100	; 0x64
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e204      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4b76      	ldr	r3, [pc, #472]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0xc0>
 8001d26:	e014      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fae4 	bl	80012f4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fae0 	bl	80012f4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e1f0      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b6c      	ldr	r3, [pc, #432]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0xe8>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d063      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d116      	bne.n	8001db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d005      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e1c4      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4952      	ldr	r1, [pc, #328]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	e03a      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d020      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fa99 	bl	80012f4 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fa95 	bl	80012f4 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1a5      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4940      	ldr	r1, [pc, #256]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]
 8001df8:	e015      	b.n	8001e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x2b0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff fa78 	bl	80012f4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e08:	f7ff fa74 	bl	80012f4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e184      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d030      	beq.n	8001e94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7ff fa58 	bl	80012f4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fa54 	bl	80012f4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e164      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x200>
 8001e66:	e015      	b.n	8001e94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x2b4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fa41 	bl	80012f4 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff fa3d 	bl	80012f4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e14d      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f0      	bne.n	8001e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80a0 	beq.w	8001fe2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d121      	bne.n	8001f22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_RCC_OscConfig+0x2b8>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eea:	f7ff fa03 	bl	80012f4 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef0:	e011      	b.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	42470000 	.word	0x42470000
 8001efc:	42470e80 	.word	0x42470e80
 8001f00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff f9f6 	bl	80012f4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e106      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x4e4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	4a80      	ldr	r2, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	e01c      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b05      	cmp	r3, #5
 8001f3e:	d10c      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f40:	4b7b      	ldr	r3, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a7a      	ldr	r2, [pc, #488]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a77      	ldr	r2, [pc, #476]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0x32a>
 8001f5a:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a74      	ldr	r2, [pc, #464]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a71      	ldr	r2, [pc, #452]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f023 0304 	bic.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d015      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7a:	f7ff f9bb 	bl	80012f4 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff f9b7 	bl	80012f4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0c5      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f98:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ee      	beq.n	8001f82 <HAL_RCC_OscConfig+0x33a>
 8001fa4:	e014      	b.n	8001fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f9a5 	bl	80012f4 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fae:	f7ff f9a1 	bl	80012f4 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0af      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd0:	7dfb      	ldrb	r3, [r7, #23]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d105      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a55      	ldr	r2, [pc, #340]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 809b 	beq.w	8002122 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d05c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d141      	bne.n	8002084 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f975 	bl	80012f4 <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff f971 	bl	80012f4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e081      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69da      	ldr	r2, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	019b      	lsls	r3, r3, #6
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	3b01      	subs	r3, #1
 8002046:	041b      	lsls	r3, r3, #16
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff f94a 	bl	80012f4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f946 	bl	80012f4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e056      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b2e      	ldr	r3, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x41c>
 8002082:	e04e      	b.n	8002122 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x4ec>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff f933 	bl	80012f4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff f92f 	bl	80012f4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e03f      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f0      	bne.n	8002092 <HAL_RCC_OscConfig+0x44a>
 80020b0:	e037      	b.n	8002122 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e032      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d028      	beq.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d121      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d11a      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d111      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d107      	bne.n	800211e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40007000 	.word	0x40007000
 8002130:	40023800 	.word	0x40023800
 8002134:	42470060 	.word	0x42470060

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7ff f864 	bl	80012f4 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7ff f860 	bl	80012f4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 f821 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ffc4 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	080042bc 	.word	0x080042bc
 80022fc:	20000018 	.word	0x20000018
 8002300:	2000001c 	.word	0x2000001c

08002304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	2300      	movs	r3, #0
 8002316:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231c:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 030c 	and.w	r3, r3, #12
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00d      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 8002328:	2b08      	cmp	r3, #8
 800232a:	f200 80bd 	bhi.w	80024a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0x34>
 8002332:	2b04      	cmp	r3, #4
 8002334:	d003      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002336:	e0b7      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b61      	ldr	r3, [pc, #388]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800233a:	60bb      	str	r3, [r7, #8]
       break;
 800233c:	e0b7      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002340:	60bb      	str	r3, [r7, #8]
      break;
 8002342:	e0b4      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002344:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800234c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04d      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b58      	ldr	r3, [pc, #352]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	461a      	mov	r2, r3
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f240 10ff 	movw	r0, #511	; 0x1ff
 800236a:	f04f 0100 	mov.w	r1, #0
 800236e:	ea02 0800 	and.w	r8, r2, r0
 8002372:	ea03 0901 	and.w	r9, r3, r1
 8002376:	4640      	mov	r0, r8
 8002378:	4649      	mov	r1, r9
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	014b      	lsls	r3, r1, #5
 8002384:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002388:	0142      	lsls	r2, r0, #5
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	ebb0 0008 	subs.w	r0, r0, r8
 8002392:	eb61 0109 	sbc.w	r1, r1, r9
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	018b      	lsls	r3, r1, #6
 80023a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023a4:	0182      	lsls	r2, r0, #6
 80023a6:	1a12      	subs	r2, r2, r0
 80023a8:	eb63 0301 	sbc.w	r3, r3, r1
 80023ac:	f04f 0000 	mov.w	r0, #0
 80023b0:	f04f 0100 	mov.w	r1, #0
 80023b4:	00d9      	lsls	r1, r3, #3
 80023b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023ba:	00d0      	lsls	r0, r2, #3
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	eb12 0208 	adds.w	r2, r2, r8
 80023c4:	eb43 0309 	adc.w	r3, r3, r9
 80023c8:	f04f 0000 	mov.w	r0, #0
 80023cc:	f04f 0100 	mov.w	r1, #0
 80023d0:	0259      	lsls	r1, r3, #9
 80023d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80023d6:	0250      	lsls	r0, r2, #9
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	461a      	mov	r2, r3
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	f7fd feee 	bl	80001c8 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	e04a      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	461a      	mov	r2, r3
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	ea02 0400 	and.w	r4, r2, r0
 800240e:	ea03 0501 	and.w	r5, r3, r1
 8002412:	4620      	mov	r0, r4
 8002414:	4629      	mov	r1, r5
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002424:	0142      	lsls	r2, r0, #5
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	1b00      	subs	r0, r0, r4
 800242c:	eb61 0105 	sbc.w	r1, r1, r5
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	018b      	lsls	r3, r1, #6
 800243a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800243e:	0182      	lsls	r2, r0, #6
 8002440:	1a12      	subs	r2, r2, r0
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	f04f 0000 	mov.w	r0, #0
 800244a:	f04f 0100 	mov.w	r1, #0
 800244e:	00d9      	lsls	r1, r3, #3
 8002450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002454:	00d0      	lsls	r0, r2, #3
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	1912      	adds	r2, r2, r4
 800245c:	eb45 0303 	adc.w	r3, r5, r3
 8002460:	f04f 0000 	mov.w	r0, #0
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	0299      	lsls	r1, r3, #10
 800246a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800246e:	0290      	lsls	r0, r2, #10
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	f7fd fea2 	bl	80001c8 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4613      	mov	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	0c1b      	lsrs	r3, r3, #16
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	3301      	adds	r3, #1
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a4:	60bb      	str	r3, [r7, #8]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024aa:	60bb      	str	r3, [r7, #8]
      break;
 80024ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ae:	68bb      	ldr	r3, [r7, #8]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000018 	.word	0x20000018

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e4:	f7ff fff0 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0a9b      	lsrs	r3, r3, #10
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	080042cc 	.word	0x080042cc

08002508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800250c:	f7ff ffdc 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	0b5b      	lsrs	r3, r3, #13
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	4903      	ldr	r1, [pc, #12]	; (800252c <HAL_RCC_GetPCLK2Freq+0x24>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800
 800252c:	080042cc 	.word	0x080042cc

08002530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07b      	b.n	800263a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002552:	d009      	beq.n	8002568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
 800255a:	e005      	b.n	8002568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fc7a 	bl	8000e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	ea42 0103 	orr.w	r1, r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	f003 0104 	and.w	r1, r3, #4
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0210 	and.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69da      	ldr	r2, [r3, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b088      	sub	sp, #32
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_SPI_Transmit+0x22>
 8002660:	2302      	movs	r3, #2
 8002662:	e126      	b.n	80028b2 <HAL_SPI_Transmit+0x270>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266c:	f7fe fe42 	bl	80012f4 <HAL_GetTick>
 8002670:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002686:	e10b      	b.n	80028a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_SPI_Transmit+0x52>
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d102      	bne.n	800269a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002698:	e102      	b.n	80028a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2203      	movs	r2, #3
 800269e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	88fa      	ldrh	r2, [r7, #6]
 80026b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e0:	d10f      	bne.n	8002702 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002700:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d007      	beq.n	8002720 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002728:	d14b      	bne.n	80027c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_SPI_Transmit+0xf6>
 8002732:	8afb      	ldrh	r3, [r7, #22]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d13e      	bne.n	80027b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	1c9a      	adds	r2, r3, #2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800275c:	e02b      	b.n	80027b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	d112      	bne.n	8002792 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	881a      	ldrh	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	1c9a      	adds	r2, r3, #2
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002790:	e011      	b.n	80027b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002792:	f7fe fdaf 	bl	80012f4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d803      	bhi.n	80027aa <HAL_SPI_Transmit+0x168>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a8:	d102      	bne.n	80027b0 <HAL_SPI_Transmit+0x16e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027b4:	e074      	b.n	80028a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ce      	bne.n	800275e <HAL_SPI_Transmit+0x11c>
 80027c0:	e04c      	b.n	800285c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_SPI_Transmit+0x18e>
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d140      	bne.n	8002852 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	7812      	ldrb	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027f6:	e02c      	b.n	8002852 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d113      	bne.n	800282e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	330c      	adds	r3, #12
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	86da      	strh	r2, [r3, #54]	; 0x36
 800282c:	e011      	b.n	8002852 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800282e:	f7fe fd61 	bl	80012f4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d803      	bhi.n	8002846 <HAL_SPI_Transmit+0x204>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d102      	bne.n	800284c <HAL_SPI_Transmit+0x20a>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002850:	e026      	b.n	80028a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002856:	b29b      	uxth	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1cd      	bne.n	80027f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	6839      	ldr	r1, [r7, #0]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 f8b3 	bl	80029cc <SPI_EndRxTxTransaction>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e000      	b.n	80028a0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800289e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028cc:	f7fe fd12 	bl	80012f4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028dc:	f7fe fd0a 	bl	80012f4 <HAL_GetTick>
 80028e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e2:	4b39      	ldr	r3, [pc, #228]	; (80029c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	015b      	lsls	r3, r3, #5
 80028e8:	0d1b      	lsrs	r3, r3, #20
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	fb02 f303 	mul.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028f2:	e054      	b.n	800299e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d050      	beq.n	800299e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028fc:	f7fe fcfa 	bl	80012f4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	d902      	bls.n	8002912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13d      	bne.n	800298e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800292a:	d111      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002934:	d004      	beq.n	8002940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293e:	d107      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002958:	d10f      	bne.n	800297a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e017      	b.n	80029be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	3b01      	subs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d19b      	bne.n	80028f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000018 	.word	0x20000018

080029cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <SPI_EndRxTxTransaction+0x7c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <SPI_EndRxTxTransaction+0x80>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0d5b      	lsrs	r3, r3, #21
 80029e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029e8:	fb02 f303 	mul.w	r3, r2, r3
 80029ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029f6:	d112      	bne.n	8002a1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff5a 	bl	80028bc <SPI_WaitFlagStateUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d016      	beq.n	8002a3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e00f      	b.n	8002a3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d0f2      	beq.n	8002a1e <SPI_EndRxTxTransaction+0x52>
 8002a38:	e000      	b.n	8002a3c <SPI_EndRxTxTransaction+0x70>
        break;
 8002a3a:	bf00      	nop
  }

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000018 	.word	0x20000018
 8002a4c:	165e9f81 	.word	0x165e9f81

08002a50 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e034      	b.n	8002ad0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7fd fde6 	bl	800064c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	3308      	adds	r3, #8
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f001 fb0e 	bl	80040ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	f001 fb58 	bl	8004150 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6858      	ldr	r0, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	f001 fb8d 	bl	80041cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	6892      	ldr	r2, [r2, #8]
 8002aba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	f041 0101 	orr.w	r1, r1, #1
 8002aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e041      	b.n	8002b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe fac8 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f000 fa96 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d001      	beq.n	8002b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e04e      	b.n	8002c2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a23      	ldr	r2, [pc, #140]	; (8002c3c <HAL_TIM_Base_Start_IT+0xc4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d022      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d01d      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	; (8002c40 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d018      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00e      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_TIM_Base_Start_IT+0xd4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d009      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d004      	beq.n	8002bf8 <HAL_TIM_Base_Start_IT+0x80>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d111      	bne.n	8002c1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d010      	beq.n	8002c2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0201 	orr.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	e007      	b.n	8002c2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800
 8002c48:	40000c00 	.word	0x40000c00
 8002c4c:	40010400 	.word	0x40010400
 8002c50:	40014000 	.word	0x40014000
 8002c54:	40001800 	.word	0x40001800

08002c58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d122      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9b5 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002ca0:	e005      	b.n	8002cae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9a7 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f9b8 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d122      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d11b      	bne.n	8002d08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0204 	mvn.w	r2, #4
 8002cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f98b 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e005      	b.n	8002d02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f97d 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f98e 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d122      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d11b      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0208 	mvn.w	r2, #8
 8002d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2204      	movs	r2, #4
 8002d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f961 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002d48:	e005      	b.n	8002d56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f953 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f964 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d122      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b10      	cmp	r3, #16
 8002d76:	d11b      	bne.n	8002db0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0210 	mvn.w	r2, #16
 8002d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2208      	movs	r2, #8
 8002d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f937 	bl	800300a <HAL_TIM_IC_CaptureCallback>
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f929 	bl	8002ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f93a 	bl	800301e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10e      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d107      	bne.n	8002ddc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0201 	mvn.w	r2, #1
 8002dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fff0 	bl	8000dbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d10e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b80      	cmp	r3, #128	; 0x80
 8002df6:	d107      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fae0 	bl	80033c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b40      	cmp	r3, #64	; 0x40
 8002e14:	d10e      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d107      	bne.n	8002e34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8ff 	bl	8003032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d10e      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d107      	bne.n	8002e60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0220 	mvn.w	r2, #32
 8002e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 faaa 	bl	80033b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIM_ConfigClockSource+0x1c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e0b4      	b.n	8002fee <HAL_TIM_ConfigClockSource+0x186>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebc:	d03e      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0xd4>
 8002ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec2:	f200 8087 	bhi.w	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	f000 8086 	beq.w	8002fda <HAL_TIM_ConfigClockSource+0x172>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	d87f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b70      	cmp	r3, #112	; 0x70
 8002ed6:	d01a      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0xa6>
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d87b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b60      	cmp	r3, #96	; 0x60
 8002ede:	d050      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x11a>
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d877      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b50      	cmp	r3, #80	; 0x50
 8002ee6:	d03c      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0xfa>
 8002ee8:	2b50      	cmp	r3, #80	; 0x50
 8002eea:	d873      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d058      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d86f      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d064      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b30      	cmp	r3, #48	; 0x30
 8002efa:	d86b      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d060      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d867      	bhi.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05c      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d05a      	beq.n	8002fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	e062      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6899      	ldr	r1, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f000 f9ad 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	609a      	str	r2, [r3, #8]
      break;
 8002f3a:	e04f      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f000 f996 	bl	800327c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5e:	609a      	str	r2, [r3, #8]
      break;
 8002f60:	e03c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f000 f90a 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2150      	movs	r1, #80	; 0x50
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f963 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002f80:	e02c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f000 f929 	bl	80031e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2160      	movs	r1, #96	; 0x60
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f953 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e01c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f000 f8ea 	bl	8003188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f943 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fc0:	e00c      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 f93a 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8002fd2:	e003      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e000      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a40      	ldr	r2, [pc, #256]	; (800315c <TIM_Base_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <TIM_Base_SetConfig+0x118>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <TIM_Base_SetConfig+0x11c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <TIM_Base_SetConfig+0x120>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0x40>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a3a      	ldr	r2, [pc, #232]	; (800316c <TIM_Base_SetConfig+0x124>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2f      	ldr	r2, [pc, #188]	; (800315c <TIM_Base_SetConfig+0x114>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02b      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d027      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <TIM_Base_SetConfig+0x118>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d023      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <TIM_Base_SetConfig+0x11c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01f      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <TIM_Base_SetConfig+0x120>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d01b      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a29      	ldr	r2, [pc, #164]	; (800316c <TIM_Base_SetConfig+0x124>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d017      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a28      	ldr	r2, [pc, #160]	; (8003170 <TIM_Base_SetConfig+0x128>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d013      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a27      	ldr	r2, [pc, #156]	; (8003174 <TIM_Base_SetConfig+0x12c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00f      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <TIM_Base_SetConfig+0x130>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00b      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0x134>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <TIM_Base_SetConfig+0x138>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a23      	ldr	r2, [pc, #140]	; (8003184 <TIM_Base_SetConfig+0x13c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d108      	bne.n	800310c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0a      	ldr	r2, [pc, #40]	; (800315c <TIM_Base_SetConfig+0x114>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d003      	beq.n	8003140 <TIM_Base_SetConfig+0xf8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <TIM_Base_SetConfig+0x124>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d103      	bne.n	8003148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	615a      	str	r2, [r3, #20]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800
 800317c:	40001800 	.word	0x40001800
 8003180:	40001c00 	.word	0x40001c00
 8003184:	40002000 	.word	0x40002000

08003188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0201 	bic.w	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 030a 	bic.w	r3, r3, #10
 80031c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	621a      	str	r2, [r3, #32]
}
 80031da:	bf00      	nop
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0210 	bic.w	r2, r3, #16
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	021a      	lsls	r2, r3, #8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	431a      	orrs	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e05a      	b.n	800338a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003320:	d01d      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1a      	ldr	r2, [pc, #104]	; (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d00e      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a18      	ldr	r2, [pc, #96]	; (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d004      	beq.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10c      	bne.n	8003378 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40001800 	.word	0x40001800

080033b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e03f      	b.n	800346e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d106      	bne.n	8003408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7fd fe96 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fc7b 	bl	8003d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b0ba      	sub	sp, #232	; 0xe8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10f      	bne.n	80034de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
 80034ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fb65 	bl	8003ba6 <UART_Receive_IT>
      return;
 80034dc:	e256      	b.n	800398c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80de 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
 80034e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80d1 	beq.w	80036a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00b      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
 800350e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
 8003532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
 8003556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d011      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
 800357a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d005      	beq.n	800359e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f043 0208 	orr.w	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 81ed 	beq.w	8003982 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 faf0 	bl	8003ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_UART_IRQHandler+0x17a>
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04f      	beq.n	8003692 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9f8 	bl	80039e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d141      	bne.n	800368a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	3314      	adds	r3, #20
 800360c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003614:	e853 3f00 	ldrex	r3, [r3]
 8003618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800361c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003624:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3314      	adds	r3, #20
 800362e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003632:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800363e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003642:	e841 2300 	strex	r3, r2, [r1]
 8003646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1d9      	bne.n	8003606 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d013      	beq.n	8003682 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	4a7d      	ldr	r2, [pc, #500]	; (8003854 <HAL_UART_IRQHandler+0x3dc>)
 8003660:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	4618      	mov	r0, r3
 8003668:	f7fd ffd1 	bl	800160e <HAL_DMA_Abort_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800367c:	4610      	mov	r0, r2
 800367e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003680:	e00e      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f99a 	bl	80039bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00a      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f996 	bl	80039bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f992 	bl	80039bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800369e:	e170      	b.n	8003982 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a0:	bf00      	nop
    return;
 80036a2:	e16e      	b.n	8003982 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	f040 814a 	bne.w	8003942 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8143 	beq.w	8003942 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 813c 	beq.w	8003942 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	f040 80b4 	bne.w	8003858 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8140 	beq.w	8003986 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800370a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800370e:	429a      	cmp	r2, r3
 8003710:	f080 8139 	bcs.w	8003986 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800371a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003726:	f000 8088 	beq.w	800383a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	330c      	adds	r3, #12
 8003752:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003756:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003762:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800376e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1d9      	bne.n	800372a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003786:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800379a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800379e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e1      	bne.n	8003776 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3314      	adds	r3, #20
 80037b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037bc:	e853 3f00 	ldrex	r3, [r3]
 80037c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3314      	adds	r3, #20
 80037d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e3      	bne.n	80037b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	f023 0310 	bic.w	r3, r3, #16
 800380e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800381c:	65ba      	str	r2, [r7, #88]	; 0x58
 800381e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003822:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e3      	bne.n	80037f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fe7a 	bl	800152e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003842:	b29b      	uxth	r3, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	b29b      	uxth	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8c0 	bl	80039d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003850:	e099      	b.n	8003986 <HAL_UART_IRQHandler+0x50e>
 8003852:	bf00      	nop
 8003854:	08003aaf 	.word	0x08003aaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003860:	b29b      	uxth	r3, r3
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 808b 	beq.w	800398a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003874:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8086 	beq.w	800398a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038a2:	647a      	str	r2, [r7, #68]	; 0x44
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e3      	bne.n	800387e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	623b      	str	r3, [r7, #32]
   return(result);
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3314      	adds	r3, #20
 80038d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038da:	633a      	str	r2, [r7, #48]	; 0x30
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e3      	bne.n	80038b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	e853 3f00 	ldrex	r3, [r3]
 800390a:	60fb      	str	r3, [r7, #12]
   return(result);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0310 	bic.w	r3, r3, #16
 8003912:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003920:	61fa      	str	r2, [r7, #28]
 8003922:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	69b9      	ldr	r1, [r7, #24]
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	617b      	str	r3, [r7, #20]
   return(result);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e3      	bne.n	80038fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f848 	bl	80039d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003940:	e023      	b.n	800398a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_UART_IRQHandler+0x4ea>
 800394e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8bb 	bl	8003ad6 <UART_Transmit_IT>
    return;
 8003960:	e014      	b.n	800398c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00e      	beq.n	800398c <HAL_UART_IRQHandler+0x514>
 800396e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8fb 	bl	8003b76 <UART_EndTransmit_IT>
    return;
 8003980:	e004      	b.n	800398c <HAL_UART_IRQHandler+0x514>
    return;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_UART_IRQHandler+0x514>
      return;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_UART_IRQHandler+0x514>
      return;
 800398a:	bf00      	nop
  }
}
 800398c:	37e8      	adds	r7, #232	; 0xe8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop

08003994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b095      	sub	sp, #84	; 0x54
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a10:	643a      	str	r2, [r7, #64]	; 0x40
 8003a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3314      	adds	r3, #20
 8003a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d119      	bne.n	8003a94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	647b      	str	r3, [r7, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a80:	61ba      	str	r2, [r7, #24]
 8003a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aa2:	bf00      	nop
 8003aa4:	3754      	adds	r7, #84	; 0x54
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff ff77 	bl	80039bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b21      	cmp	r3, #33	; 0x21
 8003ae8:	d13e      	bne.n	8003b68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d114      	bne.n	8003b1e <UART_Transmit_IT+0x48>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d110      	bne.n	8003b1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	621a      	str	r2, [r3, #32]
 8003b1c:	e008      	b.n	8003b30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1c59      	adds	r1, r3, #1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6211      	str	r1, [r2, #32]
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	e000      	b.n	8003b6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b68:	2302      	movs	r3, #2
  }
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fefc 	bl	8003994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08c      	sub	sp, #48	; 0x30
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b22      	cmp	r3, #34	; 0x22
 8003bb8:	f040 80ab 	bne.w	8003d12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc4:	d117      	bne.n	8003bf6 <UART_Receive_IT+0x50>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	1c9a      	adds	r2, r3, #2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf4:	e026      	b.n	8003c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d007      	beq.n	8003c1a <UART_Receive_IT+0x74>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <UART_Receive_IT+0x82>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	e008      	b.n	8003c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d15a      	bne.n	8003d0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0220 	bic.w	r2, r2, #32
 8003c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0201 	bic.w	r2, r2, #1
 8003c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d135      	bne.n	8003d04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	613b      	str	r3, [r7, #16]
   return(result);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 0310 	bic.w	r3, r3, #16
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	623a      	str	r2, [r7, #32]
 8003cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	69f9      	ldr	r1, [r7, #28]
 8003cc4:	6a3a      	ldr	r2, [r7, #32]
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e5      	bne.n	8003c9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d10a      	bne.n	8003cf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff fe67 	bl	80039d0 <HAL_UARTEx_RxEventCallback>
 8003d02:	e002      	b.n	8003d0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe4f 	bl	80039a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e002      	b.n	8003d14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d12:	2302      	movs	r3, #2
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3730      	adds	r7, #48	; 0x30
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	b09f      	sub	sp, #124	; 0x7c
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d32:	68d9      	ldr	r1, [r3, #12]
 8003d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	ea40 0301 	orr.w	r3, r0, r1
 8003d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d60:	f021 010c 	bic.w	r1, r1, #12
 8003d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7a:	6999      	ldr	r1, [r3, #24]
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	ea40 0301 	orr.w	r3, r0, r1
 8003d84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4bc5      	ldr	r3, [pc, #788]	; (80040a0 <UART_SetConfig+0x384>)
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d004      	beq.n	8003d9a <UART_SetConfig+0x7e>
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4bc3      	ldr	r3, [pc, #780]	; (80040a4 <UART_SetConfig+0x388>)
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d103      	bne.n	8003da2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d9a:	f7fe fbb5 	bl	8002508 <HAL_RCC_GetPCLK2Freq>
 8003d9e:	6778      	str	r0, [r7, #116]	; 0x74
 8003da0:	e002      	b.n	8003da8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003da2:	f7fe fb9d 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003da6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	f040 80b6 	bne.w	8003f20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db6:	461c      	mov	r4, r3
 8003db8:	f04f 0500 	mov.w	r5, #0
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	6439      	str	r1, [r7, #64]	; 0x40
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003dc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dcc:	1912      	adds	r2, r2, r4
 8003dce:	eb45 0303 	adc.w	r3, r5, r3
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de0:	00d0      	lsls	r0, r2, #3
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	1911      	adds	r1, r2, r4
 8003de8:	6639      	str	r1, [r7, #96]	; 0x60
 8003dea:	416b      	adcs	r3, r5
 8003dec:	667b      	str	r3, [r7, #100]	; 0x64
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	1891      	adds	r1, r2, r2
 8003dfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dfc:	415b      	adcs	r3, r3
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e08:	f7fc f9de 	bl	80001c8 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4ba5      	ldr	r3, [pc, #660]	; (80040a8 <UART_SetConfig+0x38c>)
 8003e12:	fba3 2302 	umull	r2, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	011e      	lsls	r6, r3, #4
 8003e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1c:	461c      	mov	r4, r3
 8003e1e:	f04f 0500 	mov.w	r5, #0
 8003e22:	4622      	mov	r2, r4
 8003e24:	462b      	mov	r3, r5
 8003e26:	1891      	adds	r1, r2, r2
 8003e28:	6339      	str	r1, [r7, #48]	; 0x30
 8003e2a:	415b      	adcs	r3, r3
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e32:	1912      	adds	r2, r2, r4
 8003e34:	eb45 0303 	adc.w	r3, r5, r3
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	00d9      	lsls	r1, r3, #3
 8003e42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e46:	00d0      	lsls	r0, r2, #3
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	1911      	adds	r1, r2, r4
 8003e4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e50:	416b      	adcs	r3, r5
 8003e52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e62:	415b      	adcs	r3, r3
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e6e:	f7fc f9ab 	bl	80001c8 <__aeabi_uldivmod>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4b8c      	ldr	r3, [pc, #560]	; (80040a8 <UART_SetConfig+0x38c>)
 8003e78:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	2164      	movs	r1, #100	; 0x64
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <UART_SetConfig+0x38c>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e98:	441e      	add	r6, r3
 8003e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	1894      	adds	r4, r2, r2
 8003ea8:	623c      	str	r4, [r7, #32]
 8003eaa:	415b      	adcs	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eb2:	1812      	adds	r2, r2, r0
 8003eb4:	eb41 0303 	adc.w	r3, r1, r3
 8003eb8:	f04f 0400 	mov.w	r4, #0
 8003ebc:	f04f 0500 	mov.w	r5, #0
 8003ec0:	00dd      	lsls	r5, r3, #3
 8003ec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ec6:	00d4      	lsls	r4, r2, #3
 8003ec8:	4622      	mov	r2, r4
 8003eca:	462b      	mov	r3, r5
 8003ecc:	1814      	adds	r4, r2, r0
 8003ece:	653c      	str	r4, [r7, #80]	; 0x50
 8003ed0:	414b      	adcs	r3, r1
 8003ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	1891      	adds	r1, r2, r2
 8003ee0:	61b9      	str	r1, [r7, #24]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003eee:	f7fc f96b 	bl	80001c8 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <UART_SetConfig+0x38c>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	3332      	adds	r3, #50	; 0x32
 8003f0a:	4a67      	ldr	r2, [pc, #412]	; (80040a8 <UART_SetConfig+0x38c>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 0207 	and.w	r2, r3, #7
 8003f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4432      	add	r2, r6
 8003f1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f1e:	e0b9      	b.n	8004094 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f22:	461c      	mov	r4, r3
 8003f24:	f04f 0500 	mov.w	r5, #0
 8003f28:	4622      	mov	r2, r4
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	6139      	str	r1, [r7, #16]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f38:	1912      	adds	r2, r2, r4
 8003f3a:	eb45 0303 	adc.w	r3, r5, r3
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	00d9      	lsls	r1, r3, #3
 8003f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f4c:	00d0      	lsls	r0, r2, #3
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	eb12 0804 	adds.w	r8, r2, r4
 8003f56:	eb43 0905 	adc.w	r9, r3, r5
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	008b      	lsls	r3, r1, #2
 8003f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f72:	0082      	lsls	r2, r0, #2
 8003f74:	4640      	mov	r0, r8
 8003f76:	4649      	mov	r1, r9
 8003f78:	f7fc f926 	bl	80001c8 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <UART_SetConfig+0x38c>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	011e      	lsls	r6, r3, #4
 8003f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	1894      	adds	r4, r2, r2
 8003f98:	60bc      	str	r4, [r7, #8]
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fa2:	1812      	adds	r2, r2, r0
 8003fa4:	eb41 0303 	adc.w	r3, r1, r3
 8003fa8:	f04f 0400 	mov.w	r4, #0
 8003fac:	f04f 0500 	mov.w	r5, #0
 8003fb0:	00dd      	lsls	r5, r3, #3
 8003fb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fb6:	00d4      	lsls	r4, r2, #3
 8003fb8:	4622      	mov	r2, r4
 8003fba:	462b      	mov	r3, r5
 8003fbc:	1814      	adds	r4, r2, r0
 8003fbe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fc0:	414b      	adcs	r3, r1
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	008b      	lsls	r3, r1, #2
 8003fd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fdc:	0082      	lsls	r2, r0, #2
 8003fde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fe2:	f7fc f8f1 	bl	80001c8 <__aeabi_uldivmod>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4b2f      	ldr	r3, [pc, #188]	; (80040a8 <UART_SetConfig+0x38c>)
 8003fec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	2164      	movs	r1, #100	; 0x64
 8003ff4:	fb01 f303 	mul.w	r3, r1, r3
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	3332      	adds	r3, #50	; 0x32
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <UART_SetConfig+0x38c>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	095b      	lsrs	r3, r3, #5
 8004006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400a:	441e      	add	r6, r3
 800400c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400e:	4618      	mov	r0, r3
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	1894      	adds	r4, r2, r2
 800401a:	603c      	str	r4, [r7, #0]
 800401c:	415b      	adcs	r3, r3
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004024:	1812      	adds	r2, r2, r0
 8004026:	eb41 0303 	adc.w	r3, r1, r3
 800402a:	f04f 0400 	mov.w	r4, #0
 800402e:	f04f 0500 	mov.w	r5, #0
 8004032:	00dd      	lsls	r5, r3, #3
 8004034:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004038:	00d4      	lsls	r4, r2, #3
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	eb12 0a00 	adds.w	sl, r2, r0
 8004042:	eb43 0b01 	adc.w	fp, r3, r1
 8004046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4618      	mov	r0, r3
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800405e:	0082      	lsls	r2, r0, #2
 8004060:	4650      	mov	r0, sl
 8004062:	4659      	mov	r1, fp
 8004064:	f7fc f8b0 	bl	80001c8 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <UART_SetConfig+0x38c>)
 800406e:	fba3 1302 	umull	r1, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2164      	movs	r1, #100	; 0x64
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <UART_SetConfig+0x38c>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4432      	add	r2, r6
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	377c      	adds	r7, #124	; 0x7c
 8004098:	46bd      	mov	sp, r7
 800409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409e:	bf00      	nop
 80040a0:	40011000 	.word	0x40011000
 80040a4:	40011400 	.word	0x40011400
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4b20      	ldr	r3, [pc, #128]	; (800414c <FSMC_NORSRAM_Init+0xa0>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80040d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80040dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80040e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80040e8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80040ee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80040f4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80040fa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004100:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004106:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800410c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004112:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004118:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d103      	bne.n	8004130 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800412e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	fff00080 	.word	0xfff00080

08004150 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800416a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004172:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800417e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004186:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800418e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	3b01      	subs	r3, #1
 8004196:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004198:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	3b02      	subs	r3, #2
 80041a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80041a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80041a8:	4313      	orrs	r3, r2
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e4:	d122      	bne.n	800422c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004202:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800420a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004212:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004218:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800422a:	e005      	b.n	8004238 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	cff00000 	.word	0xcff00000

0800424c <__libc_init_array>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4d0d      	ldr	r5, [pc, #52]	; (8004284 <__libc_init_array+0x38>)
 8004250:	4c0d      	ldr	r4, [pc, #52]	; (8004288 <__libc_init_array+0x3c>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	2600      	movs	r6, #0
 8004258:	42a6      	cmp	r6, r4
 800425a:	d109      	bne.n	8004270 <__libc_init_array+0x24>
 800425c:	4d0b      	ldr	r5, [pc, #44]	; (800428c <__libc_init_array+0x40>)
 800425e:	4c0c      	ldr	r4, [pc, #48]	; (8004290 <__libc_init_array+0x44>)
 8004260:	f000 f820 	bl	80042a4 <_init>
 8004264:	1b64      	subs	r4, r4, r5
 8004266:	10a4      	asrs	r4, r4, #2
 8004268:	2600      	movs	r6, #0
 800426a:	42a6      	cmp	r6, r4
 800426c:	d105      	bne.n	800427a <__libc_init_array+0x2e>
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	f855 3b04 	ldr.w	r3, [r5], #4
 8004274:	4798      	blx	r3
 8004276:	3601      	adds	r6, #1
 8004278:	e7ee      	b.n	8004258 <__libc_init_array+0xc>
 800427a:	f855 3b04 	ldr.w	r3, [r5], #4
 800427e:	4798      	blx	r3
 8004280:	3601      	adds	r6, #1
 8004282:	e7f2      	b.n	800426a <__libc_init_array+0x1e>
 8004284:	080042dc 	.word	0x080042dc
 8004288:	080042dc 	.word	0x080042dc
 800428c:	080042dc 	.word	0x080042dc
 8004290:	080042e0 	.word	0x080042e0

08004294 <memset>:
 8004294:	4402      	add	r2, r0
 8004296:	4603      	mov	r3, r0
 8004298:	4293      	cmp	r3, r2
 800429a:	d100      	bne.n	800429e <memset+0xa>
 800429c:	4770      	bx	lr
 800429e:	f803 1b01 	strb.w	r1, [r3], #1
 80042a2:	e7f9      	b.n	8004298 <memset+0x4>

080042a4 <_init>:
 80042a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a6:	bf00      	nop
 80042a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042aa:	bc08      	pop	{r3}
 80042ac:	469e      	mov	lr, r3
 80042ae:	4770      	bx	lr

080042b0 <_fini>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr
