
LAB2_TIMER_Excercise2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000405c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004204  08004204  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004204  08004204  00014204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800420c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000001b8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017780  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd0  00000000  00000000  000377c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0003a798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f0  00000000  00000000  0003bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000228f8  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018883  00000000  00000000  0005f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6ea  00000000  00000000  00077e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014650d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ffc  00000000  00000000  00146560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041cc 	.word	0x080041cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080041cc 	.word	0x080041cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08e      	sub	sp, #56	; 0x38
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80004da:	463b      	mov	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
 80004e6:	611a      	str	r2, [r3, #16]
 80004e8:	615a      	str	r2, [r3, #20]
 80004ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <MX_FSMC_Init+0xec>)
 80004ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80004f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <MX_FSMC_Init+0xec>)
 80004f6:	4a2e      	ldr	r2, [pc, #184]	; (80005b0 <MX_FSMC_Init+0xf0>)
 80004f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <MX_FSMC_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000500:	4b2a      	ldr	r3, [pc, #168]	; (80005ac <MX_FSMC_Init+0xec>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000506:	4b29      	ldr	r3, [pc, #164]	; (80005ac <MX_FSMC_Init+0xec>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <MX_FSMC_Init+0xec>)
 800050e:	2210      	movs	r2, #16
 8000510:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000512:	4b26      	ldr	r3, [pc, #152]	; (80005ac <MX_FSMC_Init+0xec>)
 8000514:	2200      	movs	r2, #0
 8000516:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <MX_FSMC_Init+0xec>)
 800051a:	2200      	movs	r2, #0
 800051c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800051e:	4b23      	ldr	r3, [pc, #140]	; (80005ac <MX_FSMC_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <MX_FSMC_Init+0xec>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <MX_FSMC_Init+0xec>)
 800052c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <MX_FSMC_Init+0xec>)
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000538:	4b1c      	ldr	r3, [pc, #112]	; (80005ac <MX_FSMC_Init+0xec>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000540:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_FSMC_Init+0xec>)
 8000542:	2200      	movs	r2, #0
 8000544:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_FSMC_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_FSMC_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000552:	230f      	movs	r3, #15
 8000554:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000556:	230f      	movs	r3, #15
 8000558:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800055a:	233c      	movs	r3, #60	; 0x3c
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000566:	2311      	movs	r3, #17
 8000568:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800056a:	2300      	movs	r3, #0
 800056c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800056e:	2308      	movs	r3, #8
 8000570:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000572:	230f      	movs	r3, #15
 8000574:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000576:	2309      	movs	r3, #9
 8000578:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800057e:	2310      	movs	r3, #16
 8000580:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000582:	2311      	movs	r3, #17
 8000584:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000586:	2300      	movs	r3, #0
 8000588:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800058a:	463a      	mov	r2, r7
 800058c:	f107 031c 	add.w	r3, r7, #28
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_FSMC_Init+0xec>)
 8000594:	f002 f9f0 	bl	8002978 <HAL_SRAM_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800059e:	f000 fb75 	bl	8000c8c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005a2:	bf00      	nop
 80005a4:	3738      	adds	r7, #56	; 0x38
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000040 	.word	0x20000040
 80005b0:	a0000104 	.word	0xa0000104

080005b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d131      	bne.n	8000634 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_FSMC_MspInit+0x88>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005de:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6393      	str	r3, [r2, #56]	; 0x38
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_FSMC_MspInit+0x8c>)
 80005e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80005f2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80005f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000604:	230c      	movs	r3, #12
 8000606:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <HAL_FSMC_MspInit+0x90>)
 800060e:	f000 ffb5 	bl	800157c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000612:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000616:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000624:	230c      	movs	r3, #12
 8000626:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <HAL_FSMC_MspInit+0x94>)
 800062e:	f000 ffa5 	bl	800157c <HAL_GPIO_Init>
 8000632:	e000      	b.n	8000636 <HAL_FSMC_MspInit+0x82>
    return;
 8000634:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000030 	.word	0x20000030
 8000640:	40023800 	.word	0x40023800
 8000644:	40021000 	.word	0x40021000
 8000648:	40020c00 	.word	0x40020c00

0800064c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000654:	f7ff ffae 	bl	80005b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	; 0x30
 8000664:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 031c 	add.w	r3, r7, #28
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
 800067a:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a6e      	ldr	r2, [pc, #440]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000680:	f043 0310 	orr.w	r3, r3, #16
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b6c      	ldr	r3, [pc, #432]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a67      	ldr	r2, [pc, #412]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b65      	ldr	r3, [pc, #404]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a60      	ldr	r2, [pc, #384]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b5e      	ldr	r3, [pc, #376]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b5a      	ldr	r3, [pc, #360]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a59      	ldr	r2, [pc, #356]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b53      	ldr	r3, [pc, #332]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a52      	ldr	r2, [pc, #328]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f0:	f043 0308 	orr.w	r3, r3, #8
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b50      	ldr	r3, [pc, #320]	; (8000838 <MX_GPIO_Init+0x1d8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0308 	and.w	r3, r3, #8
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a4b      	ldr	r2, [pc, #300]	; (8000838 <MX_GPIO_Init+0x1d8>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b49      	ldr	r3, [pc, #292]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b45      	ldr	r3, [pc, #276]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a44      	ldr	r2, [pc, #272]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b42      	ldr	r3, [pc, #264]	; (8000838 <MX_GPIO_Init+0x1d8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2170      	movs	r1, #112	; 0x70
 800073e:	483f      	ldr	r0, [pc, #252]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000740:	f001 f8b8 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074a:	483d      	ldr	r0, [pc, #244]	; (8000840 <MX_GPIO_Init+0x1e0>)
 800074c:	f001 f8b2 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2140      	movs	r1, #64	; 0x40
 8000754:	483b      	ldr	r0, [pc, #236]	; (8000844 <MX_GPIO_Init+0x1e4>)
 8000756:	f001 f8ad 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000762:	f001 f8a7 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4838      	ldr	r0, [pc, #224]	; (800084c <MX_GPIO_Init+0x1ec>)
 800076c:	f001 f8a2 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000770:	2370      	movs	r3, #112	; 0x70
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	482d      	ldr	r0, [pc, #180]	; (800083c <MX_GPIO_Init+0x1dc>)
 8000788:	f000 fef8 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4826      	ldr	r0, [pc, #152]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007a6:	f000 fee9 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80007aa:	23c0      	movs	r3, #192	; 0xc0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x1e8>)
 80007be:	f000 fedd 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80007c2:	2330      	movs	r3, #48	; 0x30
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	4619      	mov	r1, r3
 80007d4:	481a      	ldr	r0, [pc, #104]	; (8000840 <MX_GPIO_Init+0x1e0>)
 80007d6:	f000 fed1 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80007da:	2340      	movs	r3, #64	; 0x40
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0x1e4>)
 80007f2:	f000 fec3 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_GPIO_Init+0x1e8>)
 8000810:	f000 feb4 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000814:	2308      	movs	r3, #8
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <MX_GPIO_Init+0x1ec>)
 800082c:	f000 fea6 	bl	800157c <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40021000 	.word	0x40021000
 8000840:	40020800 	.word	0x40020800
 8000844:	40021800 	.word	0x40021800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020c00 	.word	0x40020c00

08000850 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f001 f82b 	bl	80018e8 <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f9f8 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	2304      	movs	r3, #4
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x8c>)
 8000906:	f000 fe39 	bl	800157c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_I2C_MspInit+0x88>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40005400 	.word	0x40005400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400

0800093c <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <led7_init+0x14>)
 8000946:	f000 ffb5 	bl	80018b4 <HAL_GPIO_WritePin>
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021800 	.word	0x40021800

08000954 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000958:	4b3f      	ldr	r3, [pc, #252]	; (8000a58 <led7_Scan+0x104>)
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	4b3d      	ldr	r3, [pc, #244]	; (8000a58 <led7_Scan+0x104>)
 8000962:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <led7_Scan+0x108>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <led7_Scan+0x10c>)
 800096c:	5c9b      	ldrb	r3, [r3, r2]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21a      	sxth	r2, r3
 8000972:	4b39      	ldr	r3, [pc, #228]	; (8000a58 <led7_Scan+0x104>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b21b      	sxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b21b      	sxth	r3, r3
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <led7_Scan+0x104>)
 8000980:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8000982:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <led7_Scan+0x108>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d846      	bhi.n	8000a18 <led7_Scan+0xc4>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <led7_Scan+0x3c>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009a1 	.word	0x080009a1
 8000994:	080009bf 	.word	0x080009bf
 8000998:	080009dd 	.word	0x080009dd
 800099c:	080009fb 	.word	0x080009fb
	case 0:
		spi_buffer |= 0x00b0;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <led7_Scan+0x104>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <led7_Scan+0x104>)
 80009ac:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <led7_Scan+0x104>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <led7_Scan+0x104>)
 80009ba:	801a      	strh	r2, [r3, #0]
		break;
 80009bc:	e02d      	b.n	8000a1a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <led7_Scan+0x104>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <led7_Scan+0x104>)
 80009ca:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <led7_Scan+0x104>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	f023 0320 	bic.w	r3, r3, #32
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <led7_Scan+0x104>)
 80009d8:	801a      	strh	r2, [r3, #0]
		break;
 80009da:	e01e      	b.n	8000a1a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <led7_Scan+0x104>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <led7_Scan+0x104>)
 80009e8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <led7_Scan+0x104>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	f023 0310 	bic.w	r3, r3, #16
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <led7_Scan+0x104>)
 80009f6:	801a      	strh	r2, [r3, #0]
		break;
 80009f8:	e00f      	b.n	8000a1a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <led7_Scan+0x104>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <led7_Scan+0x104>)
 8000a06:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <led7_Scan+0x104>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <led7_Scan+0x104>)
 8000a14:	801a      	strh	r2, [r3, #0]
		break;
 8000a16:	e000      	b.n	8000a1a <led7_Scan+0xc6>
	default:
		break;
 8000a18:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <led7_Scan+0x108>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	425a      	negs	r2, r3
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	f002 0203 	and.w	r2, r2, #3
 8000a2a:	bf58      	it	pl
 8000a2c:	4253      	negpl	r3, r2
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <led7_Scan+0x108>)
 8000a32:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <led7_Scan+0x110>)
 8000a3a:	f000 ff3b 	bl	80018b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2202      	movs	r2, #2
 8000a42:	4905      	ldr	r1, [pc, #20]	; (8000a58 <led7_Scan+0x104>)
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <led7_Scan+0x114>)
 8000a46:	f001 fd90 	bl	800256a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <led7_Scan+0x110>)
 8000a50:	f000 ff30 	bl	80018b4 <HAL_GPIO_WritePin>
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000034 	.word	0x20000034
 8000a60:	20000000 	.word	0x20000000
 8000a64:	40021800 	.word	0x40021800
 8000a68:	200000e4 	.word	0x200000e4

08000a6c <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d107      	bne.n	8000a8c <led7_SetColon+0x20>
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <led7_SetColon+0x3c>)
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	f023 0308 	bic.w	r3, r3, #8
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <led7_SetColon+0x3c>)
 8000a88:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8000a8a:	e006      	b.n	8000a9a <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <led7_SetColon+0x3c>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <led7_SetColon+0x3c>)
 8000a98:	801a      	strh	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000004 	.word	0x20000004

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab0:	f000 fb4e 	bl	8001150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab4:	f000 f81e 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f7ff fdd2 	bl	8000660 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000abc:	f000 fa32 	bl	8000f24 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ac0:	f000 f93a 	bl	8000d38 <MX_SPI1_Init>
  MX_FSMC_Init();
 8000ac4:	f7ff fcfc 	bl	80004c0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8000ac8:	f7ff fec2 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000acc:	f000 fa9c 	bl	8001008 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8000ad0:	f000 f87a 	bl	8000bc8 <system_init>
  led7_SetColon(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ffc9 	bl	8000a6c <led7_SetColon>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!flag_timer2);
 8000ada:	bf00      	nop
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <main+0x44>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0fb      	beq.n	8000adc <main+0x30>
	  flag_timer2 = 0;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <main+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
	  //Tasks
	  traffic();
 8000aea:	f000 f88b 	bl	8000c04 <traffic>
	  while(!flag_timer2);
 8000aee:	e7f4      	b.n	8000ada <main+0x2e>
 8000af0:	20000038 	.word	0x20000038

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fb5a 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a27      	ldr	r2, [pc, #156]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <SystemClock_Config+0xd0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b64:	2308      	movs	r3, #8
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b68:	23a8      	movs	r3, #168	; 0xa8
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fff9 	bl	8001b70 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b84:	f000 f882 	bl	8000c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000b9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fa5a 	bl	8002060 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb2:	f000 f86b 	bl	8000c8c <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	; 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2120      	movs	r1, #32
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <system_init+0x38>)
 8000bd2:	f000 fe6f 	bl	80018b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <system_init+0x38>)
 8000bdc:	f000 fe6a 	bl	80018b4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4806      	ldr	r0, [pc, #24]	; (8000c00 <system_init+0x38>)
 8000be6:	f000 fe65 	bl	80018b4 <HAL_GPIO_WritePin>
	  timer_init();
 8000bea:	f000 f855 	bl	8000c98 <timer_init>
	  led7_init();
 8000bee:	f7ff fea5 	bl	800093c <led7_init>

	  setTimer2(10000);
 8000bf2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bf6:	f000 f859 	bl	8000cac <setTimer2>
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000

08000c04 <traffic>:

uint8_t count_traffic = 0;

void traffic() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	count_traffic = (count_traffic + 1) % 180;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <traffic+0x7c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <traffic+0x80>)
 8000c10:	fb82 1203 	smull	r1, r2, r2, r3
 8000c14:	441a      	add	r2, r3
 8000c16:	11d1      	asrs	r1, r2, #7
 8000c18:	17da      	asrs	r2, r3, #31
 8000c1a:	1a8a      	subs	r2, r1, r2
 8000c1c:	21b4      	movs	r1, #180	; 0xb4
 8000c1e:	fb01 f202 	mul.w	r2, r1, r2
 8000c22:	1a9a      	subs	r2, r3, r2
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <traffic+0x7c>)
 8000c28:	701a      	strb	r2, [r3, #0]
	if (count_traffic < 60) { //RED on, YELLOW off
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <traffic+0x7c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c30:	d80a      	bhi.n	8000c48 <traffic+0x44>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2120      	movs	r1, #32
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <traffic+0x84>)
 8000c38:	f000 fe3c 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2140      	movs	r1, #64	; 0x40
 8000c40:	4811      	ldr	r0, [pc, #68]	; (8000c88 <traffic+0x84>)
 8000c42:	f000 fe37 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	} else { //YELLOW on, GREEN off
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
	}
}
 8000c46:	e018      	b.n	8000c7a <traffic+0x76>
	else if (count_traffic < 80) { //GREEN on, RED off
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <traffic+0x7c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b4f      	cmp	r3, #79	; 0x4f
 8000c4e:	d80a      	bhi.n	8000c66 <traffic+0x62>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2110      	movs	r1, #16
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <traffic+0x84>)
 8000c56:	f000 fe2d 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <traffic+0x84>)
 8000c60:	f000 fe28 	bl	80018b4 <HAL_GPIO_WritePin>
}
 8000c64:	e009      	b.n	8000c7a <traffic+0x76>
		HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <traffic+0x84>)
 8000c6c:	f000 fe22 	bl	80018b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2110      	movs	r1, #16
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <traffic+0x84>)
 8000c76:	f000 fe1d 	bl	80018b4 <HAL_GPIO_WritePin>
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000036 	.word	0x20000036
 8000c84:	b60b60b7 	.word	0xb60b60b7
 8000c88:	40021000 	.word	0x40021000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <timer_init+0x10>)
 8000c9e:	f001 feff 	bl	8002aa0 <HAL_TIM_Base_Start_IT>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000013c 	.word	0x2000013c

08000cac <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <setTimer2+0x2c>)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <setTimer2+0x2c>)
 8000cbe:	881a      	ldrh	r2, [r3, #0]
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <setTimer2+0x30>)
 8000cc2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <setTimer2+0x34>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	801a      	strh	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000003c 	.word	0x2000003c
 8000cdc:	2000003a 	.word	0x2000003a
 8000ce0:	20000038 	.word	0x20000038

08000ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf4:	d116      	bne.n	8000d24 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d010      	beq.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d08:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d1a:	881a      	ldrh	r2, [r3, #0]
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d1e:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8000d20:	f7ff fe18 	bl	8000954 <led7_Scan>
	}
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000003a 	.word	0x2000003a
 8000d30:	20000038 	.word	0x20000038
 8000d34:	2000003c 	.word	0x2000003c

08000d38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d3e:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <MX_SPI1_Init+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d84:	220a      	movs	r2, #10
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_SPI1_Init+0x64>)
 8000d8a:	f001 fb65 	bl	8002458 <HAL_SPI_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d94:	f7ff ff7a 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000e4 	.word	0x200000e4
 8000da0:	40013000 	.word	0x40013000

08000da4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	; (8000e28 <HAL_SPI_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12b      	bne.n	8000e1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_SPI_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000dfe:	2338      	movs	r3, #56	; 0x38
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_SPI_MspInit+0x8c>)
 8000e1a:	f000 fbaf 	bl	800157c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	; 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a0f      	ldr	r2, [pc, #60]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <NMI_Handler+0x4>

08000e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <MemManage_Handler+0x4>

08000e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <BusFault_Handler+0x4>

08000e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <UsageFault_Handler+0x4>

08000ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed0:	f000 f990 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM2_IRQHandler+0x10>)
 8000ede:	f001 fe4f 	bl	8002b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000013c 	.word	0x2000013c

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART1_IRQHandler+0x10>)
 8000ef2:	f002 fa55 	bl	80033a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000184 	.word	0x20000184

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f4a:	f240 3247 	movw	r2, #839	; 0x347
 8000f4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f58:	2263      	movs	r2, #99	; 0x63
 8000f5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f6a:	f001 fd49 	bl	8002a00 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f74:	f7ff fe8a 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000f86:	f001 ff03 	bl	8002d90 <HAL_TIM_ConfigClockSource>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f90:	f7ff fe7c 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f94:	2300      	movs	r3, #0
 8000f96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_TIM2_Init+0x94>)
 8000fa2:	f002 f91f 	bl	80031e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fac:	f7ff fe6e 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000013c 	.word	0x2000013c

08000fbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fcc:	d115      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	201c      	movs	r0, #28
 8000ff0:	f000 f9fb 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff4:	201c      	movs	r0, #28
 8000ff6:	f000 fa14 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART1_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART1_UART_Init+0x4c>)
 8001040:	f002 f960 	bl	8003304 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f7ff fe1f 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000184 	.word	0x20000184
 8001058:	40011000 	.word	0x40011000

0800105c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_UART_MspInit+0x94>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d134      	bne.n	80010e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_UART_MspInit+0x98>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <HAL_UART_MspInit+0x98>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_UART_MspInit+0x98>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_UART_MspInit+0x98>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_UART_MspInit+0x98>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_UART_MspInit+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <HAL_UART_MspInit+0x9c>)
 80010d4:	f000 fa52 	bl	800157c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2025      	movs	r0, #37	; 0x25
 80010de:	f000 f984 	bl	80013ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e2:	2025      	movs	r0, #37	; 0x25
 80010e4:	f000 f99d 	bl	8001422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001102:	490e      	ldr	r1, [pc, #56]	; (800113c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001118:	4c0b      	ldr	r4, [pc, #44]	; (8001148 <LoopFillZerobss+0x26>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001126:	f7ff feeb 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f003 f823 	bl	8004174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fcbd 	bl	8000aac <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001134:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001140:	0800420c 	.word	0x0800420c
  ldr r2, =_sbss
 8001144:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001148:	200001cc 	.word	0x200001cc

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f92b 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fe56 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f943 	bl	800143e <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 f90b 	bl	80013ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000010 	.word	0x20000010
 80011f0:	2000000c 	.word	0x2000000c

080011f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x20>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x24>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <HAL_IncTick+0x24>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000010 	.word	0x20000010
 8001218:	200001c8 	.word	0x200001c8

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_GetTick+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200001c8 	.word	0x200001c8

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff3e 	bl	800127c <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff feda 	bl	800121c <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d008      	beq.n	8001488 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e052      	b.n	800152e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0216 	bic.w	r2, r2, #22
 8001496:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d103      	bne.n	80014b8 <HAL_DMA_Abort+0x62>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	e013      	b.n	8001502 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014da:	f7ff fe9f 	bl	800121c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d90c      	bls.n	8001502 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2220      	movs	r2, #32
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2203      	movs	r2, #3
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e015      	b.n	800152e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1e4      	bne.n	80014da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	223f      	movs	r2, #63	; 0x3f
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d004      	beq.n	8001554 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e00c      	b.n	800156e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2205      	movs	r2, #5
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	e16b      	b.n	8001870 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	f040 815a 	bne.w	800186a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d005      	beq.n	80015ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d130      	bne.n	8001630 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 0201 	and.w	r2, r3, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b03      	cmp	r3, #3
 800163a:	d017      	beq.n	800166c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d123      	bne.n	80016c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	08da      	lsrs	r2, r3, #3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3208      	adds	r2, #8
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	69b9      	ldr	r1, [r7, #24]
 80016bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0203 	and.w	r2, r3, #3
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80b4 	beq.w	800186a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b60      	ldr	r3, [pc, #384]	; (8001888 <HAL_GPIO_Init+0x30c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a5f      	ldr	r2, [pc, #380]	; (8001888 <HAL_GPIO_Init+0x30c>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b5d      	ldr	r3, [pc, #372]	; (8001888 <HAL_GPIO_Init+0x30c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171e:	4a5b      	ldr	r2, [pc, #364]	; (800188c <HAL_GPIO_Init+0x310>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_GPIO_Init+0x314>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d02b      	beq.n	80017a2 <HAL_GPIO_Init+0x226>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a51      	ldr	r2, [pc, #324]	; (8001894 <HAL_GPIO_Init+0x318>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d025      	beq.n	800179e <HAL_GPIO_Init+0x222>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a50      	ldr	r2, [pc, #320]	; (8001898 <HAL_GPIO_Init+0x31c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d01f      	beq.n	800179a <HAL_GPIO_Init+0x21e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4f      	ldr	r2, [pc, #316]	; (800189c <HAL_GPIO_Init+0x320>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d019      	beq.n	8001796 <HAL_GPIO_Init+0x21a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4e      	ldr	r2, [pc, #312]	; (80018a0 <HAL_GPIO_Init+0x324>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0x216>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4d      	ldr	r2, [pc, #308]	; (80018a4 <HAL_GPIO_Init+0x328>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d00d      	beq.n	800178e <HAL_GPIO_Init+0x212>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4c      	ldr	r2, [pc, #304]	; (80018a8 <HAL_GPIO_Init+0x32c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d007      	beq.n	800178a <HAL_GPIO_Init+0x20e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4b      	ldr	r2, [pc, #300]	; (80018ac <HAL_GPIO_Init+0x330>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d101      	bne.n	8001786 <HAL_GPIO_Init+0x20a>
 8001782:	2307      	movs	r3, #7
 8001784:	e00e      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 8001786:	2308      	movs	r3, #8
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 800178a:	2306      	movs	r3, #6
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x228>
 80017a2:	2300      	movs	r3, #0
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b4:	4935      	ldr	r1, [pc, #212]	; (800188c <HAL_GPIO_Init+0x310>)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_GPIO_Init+0x334>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e6:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_GPIO_Init+0x334>)
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_GPIO_Init+0x334>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_GPIO_Init+0x334>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001864:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	f67f ae90 	bls.w	8001598 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40013800 	.word	0x40013800
 8001890:	40020000 	.word	0x40020000
 8001894:	40020400 	.word	0x40020400
 8001898:	40020800 	.word	0x40020800
 800189c:	40020c00 	.word	0x40020c00
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40021400 	.word	0x40021400
 80018a8:	40021800 	.word	0x40021800
 80018ac:	40021c00 	.word	0x40021c00
 80018b0:	40013c00 	.word	0x40013c00

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	619a      	str	r2, [r3, #24]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e12b      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe ffcc 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	; 0x24
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800194c:	f000 fd5c 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a81      	ldr	r2, [pc, #516]	; (8001b5c <HAL_I2C_Init+0x274>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d807      	bhi.n	800196c <HAL_I2C_Init+0x84>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a80      	ldr	r2, [pc, #512]	; (8001b60 <HAL_I2C_Init+0x278>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	e006      	b.n	800197a <HAL_I2C_Init+0x92>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a7d      	ldr	r2, [pc, #500]	; (8001b64 <HAL_I2C_Init+0x27c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0e7      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a78      	ldr	r2, [pc, #480]	; (8001b68 <HAL_I2C_Init+0x280>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a6a      	ldr	r2, [pc, #424]	; (8001b5c <HAL_I2C_Init+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d802      	bhi.n	80019bc <HAL_I2C_Init+0xd4>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3301      	adds	r3, #1
 80019ba:	e009      	b.n	80019d0 <HAL_I2C_Init+0xe8>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4a69      	ldr	r2, [pc, #420]	; (8001b6c <HAL_I2C_Init+0x284>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	3301      	adds	r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	495c      	ldr	r1, [pc, #368]	; (8001b5c <HAL_I2C_Init+0x274>)
 80019ec:	428b      	cmp	r3, r1
 80019ee:	d819      	bhi.n	8001a24 <HAL_I2C_Init+0x13c>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e59      	subs	r1, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019fe:	1c59      	adds	r1, r3, #1
 8001a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a04:	400b      	ands	r3, r1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_I2C_Init+0x138>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1e59      	subs	r1, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	e051      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e04f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_I2C_Init+0x168>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e012      	b.n	8001a76 <HAL_I2C_Init+0x18e>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x196>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e58      	subs	r0, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	440b      	add	r3, r1
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	e00f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6809      	ldr	r1, [r1, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6911      	ldr	r1, [r2, #16]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68d2      	ldr	r2, [r2, #12]
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	000186a0 	.word	0x000186a0
 8001b60:	001e847f 	.word	0x001e847f
 8001b64:	003d08ff 	.word	0x003d08ff
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e264      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d075      	beq.n	8001c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8e:	4ba3      	ldr	r3, [pc, #652]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4ba0      	ldr	r3, [pc, #640]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b99      	ldr	r3, [pc, #612]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x108>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e23f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x74>
 8001bd6:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a90      	ldr	r2, [pc, #576]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x98>
 8001bee:	4b8b      	ldr	r3, [pc, #556]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a8a      	ldr	r2, [pc, #552]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b88      	ldr	r3, [pc, #544]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a87      	ldr	r2, [pc, #540]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xb0>
 8001c08:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a83      	ldr	r2, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b81      	ldr	r3, [pc, #516]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a80      	ldr	r2, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff faf8 	bl	800121c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff faf4 	bl	800121c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e204      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fae4 	bl	800121c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fae0 	bl	800121c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1f0      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b6c      	ldr	r3, [pc, #432]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0xe8>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c86:	4b65      	ldr	r3, [pc, #404]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b5f      	ldr	r3, [pc, #380]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c4      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b56      	ldr	r3, [pc, #344]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4952      	ldr	r1, [pc, #328]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b4f      	ldr	r3, [pc, #316]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fa99 	bl	800121c <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fa95 	bl	800121c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4940      	ldr	r1, [pc, #256]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fa78 	bl	800121c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fa74 	bl	800121c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e184      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d030      	beq.n	8001dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa58 	bl	800121c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fa54 	bl	800121c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e164      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x200>
 8001d8e:	e015      	b.n	8001dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x2b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fa41 	bl	800121c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff fa3d 	bl	800121c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e14d      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a0 	beq.w	8001f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x2b8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fa03 	bl	800121c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e011      	b.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	42470000 	.word	0x42470000
 8001e24:	42470e80 	.word	0x42470e80
 8001e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff f9f6 	bl	800121c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e106      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	4b85      	ldr	r3, [pc, #532]	; (8002054 <HAL_RCC_OscConfig+0x4e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2f0>
 8001e52:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e56:	4a80      	ldr	r2, [pc, #512]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a7a      	ldr	r2, [pc, #488]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
 8001e74:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001e82:	4b75      	ldr	r3, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a74      	ldr	r2, [pc, #464]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f9bb 	bl	800121c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff f9b7 	bl	800121c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0c5      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x33a>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff f9a5 	bl	800121c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f9a1 	bl	800121c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e0af      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b5a      	ldr	r3, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b56      	ldr	r3, [pc, #344]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a55      	ldr	r2, [pc, #340]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 809b 	beq.w	800204a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d05c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d141      	bne.n	8001fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f975 	bl	800121c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f971 	bl	800121c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e081      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	061b      	lsls	r3, r3, #24
 8001f78:	4937      	ldr	r1, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7e:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff f94a 	bl	800121c <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f946 	bl	800121c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e056      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b2e      	ldr	r3, [pc, #184]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x41c>
 8001faa:	e04e      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x4ec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f933 	bl	800121c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff f92f 	bl	800121c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03f      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fcc:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f0      	bne.n	8001fba <HAL_RCC_OscConfig+0x44a>
 8001fd8:	e037      	b.n	800204a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e032      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d028      	beq.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d121      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201e:	4293      	cmp	r3, r2
 8002020:	d111      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	3b01      	subs	r3, #1
 8002030:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40007000 	.word	0x40007000
 8002058:	40023800 	.word	0x40023800
 800205c:	42470060 	.word	0x42470060

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0cc      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b68      	ldr	r3, [pc, #416]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d90c      	bls.n	800209c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d044      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d119      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d003      	beq.n	800211e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	2b03      	cmp	r3, #3
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e067      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4934      	ldr	r1, [pc, #208]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff f864 	bl	800121c <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f860 	bl	800121c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d20c      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe ffc4 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	080041e4 	.word	0x080041e4
 8002224:	20000008 	.word	0x20000008
 8002228:	2000000c 	.word	0x2000000c

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	2300      	movs	r3, #0
 800223e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002244:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d00d      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x40>
 8002250:	2b08      	cmp	r3, #8
 8002252:	f200 80bd 	bhi.w	80023d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x34>
 800225a:	2b04      	cmp	r3, #4
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x3a>
 800225e:	e0b7      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002262:	60bb      	str	r3, [r7, #8]
       break;
 8002264:	e0b7      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002266:	4b61      	ldr	r3, [pc, #388]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002268:	60bb      	str	r3, [r7, #8]
      break;
 800226a:	e0b4      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4b5d      	ldr	r3, [pc, #372]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d04d      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	ea02 0800 	and.w	r8, r2, r0
 800229a:	ea03 0901 	and.w	r9, r3, r1
 800229e:	4640      	mov	r0, r8
 80022a0:	4649      	mov	r1, r9
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	014b      	lsls	r3, r1, #5
 80022ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b0:	0142      	lsls	r2, r0, #5
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	ebb0 0008 	subs.w	r0, r0, r8
 80022ba:	eb61 0109 	sbc.w	r1, r1, r9
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	018b      	lsls	r3, r1, #6
 80022c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022cc:	0182      	lsls	r2, r0, #6
 80022ce:	1a12      	subs	r2, r2, r0
 80022d0:	eb63 0301 	sbc.w	r3, r3, r1
 80022d4:	f04f 0000 	mov.w	r0, #0
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	00d9      	lsls	r1, r3, #3
 80022de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022e2:	00d0      	lsls	r0, r2, #3
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	eb12 0208 	adds.w	r2, r2, r8
 80022ec:	eb43 0309 	adc.w	r3, r3, r9
 80022f0:	f04f 0000 	mov.w	r0, #0
 80022f4:	f04f 0100 	mov.w	r1, #0
 80022f8:	0259      	lsls	r1, r3, #9
 80022fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022fe:	0250      	lsls	r0, r2, #9
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	f7fd ff5a 	bl	80001c8 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e04a      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	461a      	mov	r2, r3
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	ea02 0400 	and.w	r4, r2, r0
 8002336:	ea03 0501 	and.w	r5, r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	014b      	lsls	r3, r1, #5
 8002348:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800234c:	0142      	lsls	r2, r0, #5
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	1b00      	subs	r0, r0, r4
 8002354:	eb61 0105 	sbc.w	r1, r1, r5
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	018b      	lsls	r3, r1, #6
 8002362:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002366:	0182      	lsls	r2, r0, #6
 8002368:	1a12      	subs	r2, r2, r0
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	00d9      	lsls	r1, r3, #3
 8002378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237c:	00d0      	lsls	r0, r2, #3
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	1912      	adds	r2, r2, r4
 8002384:	eb45 0303 	adc.w	r3, r5, r3
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0299      	lsls	r1, r3, #10
 8002392:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002396:	0290      	lsls	r0, r2, #10
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	f7fd ff0e 	bl	80001c8 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0c1b      	lsrs	r3, r3, #16
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	60bb      	str	r3, [r7, #8]
      break;
 80023ce:	e002      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023d2:	60bb      	str	r3, [r7, #8]
      break;
 80023d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d6:	68bb      	ldr	r3, [r7, #8]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a9b      	lsrs	r3, r3, #10
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4903      	ldr	r1, [pc, #12]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	080041f4 	.word	0x080041f4

08002430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002434:	f7ff ffdc 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0b5b      	lsrs	r3, r3, #13
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	080041f4 	.word	0x080041f4

08002458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07b      	b.n	8002562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247a:	d009      	beq.n	8002490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
 8002482:	e005      	b.n	8002490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fc7a 	bl	8000da4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0104 	and.w	r1, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	f003 0210 	and.w	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_SPI_Transmit+0x22>
 8002588:	2302      	movs	r3, #2
 800258a:	e126      	b.n	80027da <HAL_SPI_Transmit+0x270>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002594:	f7fe fe42 	bl	800121c <HAL_GetTick>
 8002598:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025ae:	e10b      	b.n	80027c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_Transmit+0x52>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d102      	bne.n	80025c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025c0:	e102      	b.n	80027c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2203      	movs	r2, #3
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d10f      	bne.n	800262a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002628:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d007      	beq.n	8002648 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002650:	d14b      	bne.n	80026ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Transmit+0xf6>
 800265a:	8afb      	ldrh	r3, [r7, #22]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d13e      	bne.n	80026de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	1c9a      	adds	r2, r3, #2
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	b29a      	uxth	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002684:	e02b      	b.n	80026de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d112      	bne.n	80026ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	1c9a      	adds	r2, r3, #2
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80026b8:	e011      	b.n	80026de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026ba:	f7fe fdaf 	bl	800121c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d803      	bhi.n	80026d2 <HAL_SPI_Transmit+0x168>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d102      	bne.n	80026d8 <HAL_SPI_Transmit+0x16e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026dc:	e074      	b.n	80027c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ce      	bne.n	8002686 <HAL_SPI_Transmit+0x11c>
 80026e8:	e04c      	b.n	8002784 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_Transmit+0x18e>
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d140      	bne.n	800277a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800271e:	e02c      	b.n	800277a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b02      	cmp	r3, #2
 800272c:	d113      	bne.n	8002756 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	7812      	ldrb	r2, [r2, #0]
 800273a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	86da      	strh	r2, [r3, #54]	; 0x36
 8002754:	e011      	b.n	800277a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002756:	f7fe fd61 	bl	800121c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d803      	bhi.n	800276e <HAL_SPI_Transmit+0x204>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d102      	bne.n	8002774 <HAL_SPI_Transmit+0x20a>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002778:	e026      	b.n	80027c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1cd      	bne.n	8002720 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	6839      	ldr	r1, [r7, #0]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8b3 	bl	80028f4 <SPI_EndRxTxTransaction>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e000      	b.n	80027c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80027c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027f4:	f7fe fd12 	bl	800121c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	4413      	add	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002804:	f7fe fd0a 	bl	800121c <HAL_GetTick>
 8002808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800280a:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	015b      	lsls	r3, r3, #5
 8002810:	0d1b      	lsrs	r3, r3, #20
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	fb02 f303 	mul.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	e054      	b.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d050      	beq.n	80028c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002824:	f7fe fcfa 	bl	800121c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	429a      	cmp	r2, r3
 8002832:	d902      	bls.n	800283a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d13d      	bne.n	80028b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002852:	d111      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800285c:	d004      	beq.n	8002868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002866:	d107      	bne.n	8002878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d10f      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e017      	b.n	80028e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d19b      	bne.n	800281c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000008 	.word	0x20000008

080028f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002900:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <SPI_EndRxTxTransaction+0x7c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <SPI_EndRxTxTransaction+0x80>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0d5b      	lsrs	r3, r3, #21
 800290c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291e:	d112      	bne.n	8002946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2200      	movs	r2, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff ff5a 	bl	80027e4 <SPI_WaitFlagStateUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f043 0220 	orr.w	r2, r3, #32
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e00f      	b.n	8002966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3b01      	subs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b80      	cmp	r3, #128	; 0x80
 800295e:	d0f2      	beq.n	8002946 <SPI_EndRxTxTransaction+0x52>
 8002960:	e000      	b.n	8002964 <SPI_EndRxTxTransaction+0x70>
        break;
 8002962:	bf00      	nop
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000008 	.word	0x20000008
 8002974:	165e9f81 	.word	0x165e9f81

08002978 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e034      	b.n	80029f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f7fd fe52 	bl	800064c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3308      	adds	r3, #8
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f001 fb0e 	bl	8003fd4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	f001 fb58 	bl	8004078 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6858      	ldr	r0, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	f001 fb8d 	bl	80040f4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	f041 0101 	orr.w	r1, r1, #1
 80029f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e041      	b.n	8002a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d106      	bne.n	8002a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7fe fac8 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4610      	mov	r0, r2
 8002a40:	f000 fa96 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e04e      	b.n	8002b56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d022      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae2:	d01d      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d018      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	; (8002b70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00e      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d004      	beq.n	8002b20 <HAL_TIM_Base_Start_IT+0x80>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d111      	bne.n	8002b44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d010      	beq.n	8002b54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	e007      	b.n	8002b54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40001800 	.word	0x40001800

08002b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d122      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d11b      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0202 	mvn.w	r2, #2
 8002bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9b5 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002bc8:	e005      	b.n	8002bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9a7 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f9b8 	bl	8002f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d122      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11b      	bne.n	8002c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0204 	mvn.w	r2, #4
 8002c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f98b 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002c1c:	e005      	b.n	8002c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f97d 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f98e 	bl	8002f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d11b      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0208 	mvn.w	r2, #8
 8002c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f961 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002c70:	e005      	b.n	8002c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f953 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f964 	bl	8002f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d122      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0210 	mvn.w	r2, #16
 8002ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2208      	movs	r2, #8
 8002cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f937 	bl	8002f32 <HAL_TIM_IC_CaptureCallback>
 8002cc4:	e005      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f929 	bl	8002f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 f93a 	bl	8002f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10e      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0201 	mvn.w	r2, #1
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fff0 	bl	8000ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d10e      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d107      	bne.n	8002d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fae0 	bl	80032f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d10e      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d107      	bne.n	8002d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8ff 	bl	8002f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d10e      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d107      	bne.n	8002d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f06f 0220 	mvn.w	r2, #32
 8002d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 faaa 	bl	80032dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_ConfigClockSource+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0b4      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x186>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de4:	d03e      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0xd4>
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dea:	f200 8087 	bhi.w	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	f000 8086 	beq.w	8002f02 <HAL_TIM_ConfigClockSource+0x172>
 8002df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfa:	d87f      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002dfc:	2b70      	cmp	r3, #112	; 0x70
 8002dfe:	d01a      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0xa6>
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d87b      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e04:	2b60      	cmp	r3, #96	; 0x60
 8002e06:	d050      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0x11a>
 8002e08:	2b60      	cmp	r3, #96	; 0x60
 8002e0a:	d877      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e0c:	2b50      	cmp	r3, #80	; 0x50
 8002e0e:	d03c      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0xfa>
 8002e10:	2b50      	cmp	r3, #80	; 0x50
 8002e12:	d873      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e14:	2b40      	cmp	r3, #64	; 0x40
 8002e16:	d058      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x13a>
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d86f      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d064      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e20:	2b30      	cmp	r3, #48	; 0x30
 8002e22:	d86b      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d060      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d867      	bhi.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05c      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d05a      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	e062      	b.n	8002efc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f000 f9ad 	bl	80031a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	609a      	str	r2, [r3, #8]
      break;
 8002e62:	e04f      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6818      	ldr	r0, [r3, #0]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6899      	ldr	r1, [r3, #8]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f000 f996 	bl	80031a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e86:	609a      	str	r2, [r3, #8]
      break;
 8002e88:	e03c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6859      	ldr	r1, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f000 f90a 	bl	80030b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2150      	movs	r1, #80	; 0x50
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f963 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002ea8:	e02c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 f929 	bl	800310e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2160      	movs	r1, #96	; 0x60
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f953 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e01c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 f8ea 	bl	80030b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2140      	movs	r1, #64	; 0x40
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f943 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e00c      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f000 f93a 	bl	800316e <TIM_ITRx_SetConfig>
      break;
 8002efa:	e003      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e000      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d00f      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3d      	ldr	r2, [pc, #244]	; (8003088 <TIM_Base_SetConfig+0x118>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3c      	ldr	r2, [pc, #240]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d007      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <TIM_Base_SetConfig+0x120>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d003      	beq.n	8002fb0 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d108      	bne.n	8002fc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <TIM_Base_SetConfig+0x114>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d02b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d027      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <TIM_Base_SetConfig+0x118>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d023      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a2b      	ldr	r2, [pc, #172]	; (800308c <TIM_Base_SetConfig+0x11c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d01f      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a2a      	ldr	r2, [pc, #168]	; (8003090 <TIM_Base_SetConfig+0x120>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a29      	ldr	r2, [pc, #164]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d017      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a28      	ldr	r2, [pc, #160]	; (8003098 <TIM_Base_SetConfig+0x128>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a27      	ldr	r2, [pc, #156]	; (800309c <TIM_Base_SetConfig+0x12c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00f      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <TIM_Base_SetConfig+0x130>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d00b      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <TIM_Base_SetConfig+0x134>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d007      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <TIM_Base_SetConfig+0x138>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d003      	beq.n	8003022 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a23      	ldr	r2, [pc, #140]	; (80030ac <TIM_Base_SetConfig+0x13c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d108      	bne.n	8003034 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <TIM_Base_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0xf8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0c      	ldr	r2, [pc, #48]	; (8003094 <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d103      	bne.n	8003070 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	615a      	str	r2, [r3, #20]
}
 8003076:	bf00      	nop
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010000 	.word	0x40010000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	40010400 	.word	0x40010400
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800
 80030a4:	40001800 	.word	0x40001800
 80030a8:	40001c00 	.word	0x40001c00
 80030ac:	40002000 	.word	0x40002000

080030b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f023 030a 	bic.w	r3, r3, #10
 80030ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	621a      	str	r2, [r3, #32]
}
 8003102:	bf00      	nop
 8003104:	371c      	adds	r7, #28
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800310e:	b480      	push	{r7}
 8003110:	b087      	sub	sp, #28
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0210 	bic.w	r2, r3, #16
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003138:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	031b      	lsls	r3, r3, #12
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800316e:	b480      	push	{r7}
 8003170:	b085      	sub	sp, #20
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	f043 0307 	orr.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e05a      	b.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a21      	ldr	r2, [pc, #132]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003248:	d01d      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d018      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1a      	ldr	r2, [pc, #104]	; (80032cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a17      	ldr	r2, [pc, #92]	; (80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10c      	bne.n	80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800328c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	4313      	orrs	r3, r2
 8003296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40000800 	.word	0x40000800
 80032cc:	40000c00 	.word	0x40000c00
 80032d0:	40010400 	.word	0x40010400
 80032d4:	40014000 	.word	0x40014000
 80032d8:	40001800 	.word	0x40001800

080032dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e03f      	b.n	8003396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd fe96 	bl	800105c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fc7b 	bl	8003c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695a      	ldr	r2, [r3, #20]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800337c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0ba      	sub	sp, #232	; 0xe8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10f      	bne.n	8003406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
 80033f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fb65 	bl	8003ace <UART_Receive_IT>
      return;
 8003404:	e256      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80de 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
 8003410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800341c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80d1 	beq.w	80035cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800344e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
 800345a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f043 0202 	orr.w	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00b      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
 800347e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d011      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
 80034a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0208 	orr.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 81ed 	beq.w	80038aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
 80034dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 faf0 	bl	8003ace <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d103      	bne.n	800351a <HAL_UART_IRQHandler+0x17a>
 8003512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04f      	beq.n	80035ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9f8 	bl	8003910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d141      	bne.n	80035b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3314      	adds	r3, #20
 8003534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800354c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800355a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800355e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1d9      	bne.n	800352e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	4a7d      	ldr	r2, [pc, #500]	; (800377c <HAL_UART_IRQHandler+0x3dc>)
 8003588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd ffd1 	bl	8001536 <HAL_DMA_Abort_IT>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e00e      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f99a 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b0:	e00a      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f996 	bl	80038e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	e006      	b.n	80035c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f992 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035c6:	e170      	b.n	80038aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c8:	bf00      	nop
    return;
 80035ca:	e16e      	b.n	80038aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 814a 	bne.w	800386a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8143 	beq.w	800386a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 813c 	beq.w	800386a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	f040 80b4 	bne.w	8003780 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8140 	beq.w	80038ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003636:	429a      	cmp	r2, r3
 8003638:	f080 8139 	bcs.w	80038ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	f000 8088 	beq.w	8003762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800367e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800368a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1d9      	bne.n	8003652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3314      	adds	r3, #20
 80036be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e1      	bne.n	800369e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3314      	adds	r3, #20
 80036fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800370c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e3      	bne.n	80036da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003744:	65ba      	str	r2, [r7, #88]	; 0x58
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800374a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374c:	e841 2300 	strex	r3, r2, [r1]
 8003750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e3      	bne.n	8003720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fe7a 	bl	8001456 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800376a:	b29b      	uxth	r3, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	b29b      	uxth	r3, r3
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8c0 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003778:	e099      	b.n	80038ae <HAL_UART_IRQHandler+0x50e>
 800377a:	bf00      	nop
 800377c:	080039d7 	.word	0x080039d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 808b 	beq.w	80038b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800379c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8086 	beq.w	80038b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	330c      	adds	r3, #12
 80037c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037ca:	647a      	str	r2, [r7, #68]	; 0x44
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e3      	bne.n	80037a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	623b      	str	r3, [r7, #32]
   return(result);
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003802:	633a      	str	r2, [r7, #48]	; 0x30
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e3      	bne.n	80037de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	60fb      	str	r3, [r7, #12]
   return(result);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0310 	bic.w	r3, r3, #16
 800383a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003848:	61fa      	str	r2, [r7, #28]
 800384a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	69b9      	ldr	r1, [r7, #24]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	617b      	str	r3, [r7, #20]
   return(result);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e3      	bne.n	8003824 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800385c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003860:	4619      	mov	r1, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f848 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003868:	e023      	b.n	80038b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800386e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <HAL_UART_IRQHandler+0x4ea>
 8003876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8bb 	bl	80039fe <UART_Transmit_IT>
    return;
 8003888:	e014      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00e      	beq.n	80038b4 <HAL_UART_IRQHandler+0x514>
 8003896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f8fb 	bl	8003a9e <UART_EndTransmit_IT>
    return;
 80038a8:	e004      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
    return;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
      return;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_UART_IRQHandler+0x514>
      return;
 80038b2:	bf00      	nop
  }
}
 80038b4:	37e8      	adds	r7, #232	; 0xe8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop

080038bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b095      	sub	sp, #84	; 0x54
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003938:	643a      	str	r2, [r7, #64]	; 0x40
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	61fb      	str	r3, [r7, #28]
   return(result);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b01      	cmp	r3, #1
 8003986:	d119      	bne.n	80039bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60bb      	str	r3, [r7, #8]
   return(result);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	61ba      	str	r2, [r7, #24]
 80039aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ca:	bf00      	nop
 80039cc:	3754      	adds	r7, #84	; 0x54
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff ff77 	bl	80038e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b21      	cmp	r3, #33	; 0x21
 8003a10:	d13e      	bne.n	8003a90 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d114      	bne.n	8003a46 <UART_Transmit_IT+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d110      	bne.n	8003a46 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	1c9a      	adds	r2, r3, #2
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]
 8003a44:	e008      	b.n	8003a58 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6211      	str	r1, [r2, #32]
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4619      	mov	r1, r3
 8003a66:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10f      	bne.n	8003a8c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fefc 	bl	80038bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08c      	sub	sp, #48	; 0x30
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b22      	cmp	r3, #34	; 0x22
 8003ae0:	f040 80ab 	bne.w	8003c3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aec:	d117      	bne.n	8003b1e <UART_Receive_IT+0x50>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1c:	e026      	b.n	8003b6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	d007      	beq.n	8003b42 <UART_Receive_IT+0x74>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <UART_Receive_IT+0x82>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e008      	b.n	8003b62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d15a      	bne.n	8003c36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0220 	bic.w	r2, r2, #32
 8003b8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d135      	bne.n	8003c2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	e853 3f00 	ldrex	r3, [r3]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f023 0310 	bic.w	r3, r3, #16
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	623a      	str	r2, [r7, #32]
 8003be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	69f9      	ldr	r1, [r7, #28]
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e5      	bne.n	8003bc6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d10a      	bne.n	8003c1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fe67 	bl	80038f8 <HAL_UARTEx_RxEventCallback>
 8003c2a:	e002      	b.n	8003c32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff fe4f 	bl	80038d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e002      	b.n	8003c3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	b09f      	sub	sp, #124	; 0x7c
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	ea40 0301 	orr.w	r3, r0, r1
 8003c64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c88:	f021 010c 	bic.w	r1, r1, #12
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca2:	6999      	ldr	r1, [r3, #24]
 8003ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	ea40 0301 	orr.w	r3, r0, r1
 8003cac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4bc5      	ldr	r3, [pc, #788]	; (8003fc8 <UART_SetConfig+0x384>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d004      	beq.n	8003cc2 <UART_SetConfig+0x7e>
 8003cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4bc3      	ldr	r3, [pc, #780]	; (8003fcc <UART_SetConfig+0x388>)
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d103      	bne.n	8003cca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cc2:	f7fe fbb5 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 8003cc6:	6778      	str	r0, [r7, #116]	; 0x74
 8003cc8:	e002      	b.n	8003cd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cca:	f7fe fb9d 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003cce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd8:	f040 80b6 	bne.w	8003e48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cde:	461c      	mov	r4, r3
 8003ce0:	f04f 0500 	mov.w	r5, #0
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	462b      	mov	r3, r5
 8003ce8:	1891      	adds	r1, r2, r2
 8003cea:	6439      	str	r1, [r7, #64]	; 0x40
 8003cec:	415b      	adcs	r3, r3
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cf4:	1912      	adds	r2, r2, r4
 8003cf6:	eb45 0303 	adc.w	r3, r5, r3
 8003cfa:	f04f 0000 	mov.w	r0, #0
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	00d9      	lsls	r1, r3, #3
 8003d04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d08:	00d0      	lsls	r0, r2, #3
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	1911      	adds	r1, r2, r4
 8003d10:	6639      	str	r1, [r7, #96]	; 0x60
 8003d12:	416b      	adcs	r3, r5
 8003d14:	667b      	str	r3, [r7, #100]	; 0x64
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d24:	415b      	adcs	r3, r3
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d30:	f7fc fa4a 	bl	80001c8 <__aeabi_uldivmod>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4ba5      	ldr	r3, [pc, #660]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	011e      	lsls	r6, r3, #4
 8003d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d44:	461c      	mov	r4, r3
 8003d46:	f04f 0500 	mov.w	r5, #0
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	1891      	adds	r1, r2, r2
 8003d50:	6339      	str	r1, [r7, #48]	; 0x30
 8003d52:	415b      	adcs	r3, r3
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
 8003d56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d5a:	1912      	adds	r2, r2, r4
 8003d5c:	eb45 0303 	adc.w	r3, r5, r3
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	00d9      	lsls	r1, r3, #3
 8003d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d6e:	00d0      	lsls	r0, r2, #3
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	1911      	adds	r1, r2, r4
 8003d76:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d78:	416b      	adcs	r3, r5
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	1891      	adds	r1, r2, r2
 8003d88:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d96:	f7fc fa17 	bl	80001c8 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4b8c      	ldr	r3, [pc, #560]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003da0:	fba3 1302 	umull	r1, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2164      	movs	r1, #100	; 0x64
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dc0:	441e      	add	r6, r3
 8003dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f04f 0100 	mov.w	r1, #0
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	1894      	adds	r4, r2, r2
 8003dd0:	623c      	str	r4, [r7, #32]
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dda:	1812      	adds	r2, r2, r0
 8003ddc:	eb41 0303 	adc.w	r3, r1, r3
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	f04f 0500 	mov.w	r5, #0
 8003de8:	00dd      	lsls	r5, r3, #3
 8003dea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dee:	00d4      	lsls	r4, r2, #3
 8003df0:	4622      	mov	r2, r4
 8003df2:	462b      	mov	r3, r5
 8003df4:	1814      	adds	r4, r2, r0
 8003df6:	653c      	str	r4, [r7, #80]	; 0x50
 8003df8:	414b      	adcs	r3, r1
 8003dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	61b9      	str	r1, [r7, #24]
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e16:	f7fc f9d7 	bl	80001c8 <__aeabi_uldivmod>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4b6c      	ldr	r3, [pc, #432]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003e20:	fba3 1302 	umull	r1, r3, r3, r2
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	2164      	movs	r1, #100	; 0x64
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	3332      	adds	r3, #50	; 0x32
 8003e32:	4a67      	ldr	r2, [pc, #412]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	095b      	lsrs	r3, r3, #5
 8003e3a:	f003 0207 	and.w	r2, r3, #7
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4432      	add	r2, r6
 8003e44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e46:	e0b9      	b.n	8003fbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	4622      	mov	r2, r4
 8003e52:	462b      	mov	r3, r5
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	6139      	str	r1, [r7, #16]
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e60:	1912      	adds	r2, r2, r4
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e74:	00d0      	lsls	r0, r2, #3
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	eb12 0804 	adds.w	r8, r2, r4
 8003e7e:	eb43 0905 	adc.w	r9, r3, r5
 8003e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	008b      	lsls	r3, r1, #2
 8003e96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e9a:	0082      	lsls	r2, r0, #2
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	f7fc f992 	bl	80001c8 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011e      	lsls	r6, r3, #4
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	1894      	adds	r4, r2, r2
 8003ec0:	60bc      	str	r4, [r7, #8]
 8003ec2:	415b      	adcs	r3, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eca:	1812      	adds	r2, r2, r0
 8003ecc:	eb41 0303 	adc.w	r3, r1, r3
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	f04f 0500 	mov.w	r5, #0
 8003ed8:	00dd      	lsls	r5, r3, #3
 8003eda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ede:	00d4      	lsls	r4, r2, #3
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	462b      	mov	r3, r5
 8003ee4:	1814      	adds	r4, r2, r0
 8003ee6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ee8:	414b      	adcs	r3, r1
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	008b      	lsls	r3, r1, #2
 8003f00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f04:	0082      	lsls	r2, r0, #2
 8003f06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f0a:	f7fc f95d 	bl	80001c8 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4b2f      	ldr	r3, [pc, #188]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f14:	fba3 1302 	umull	r1, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	2164      	movs	r1, #100	; 0x64
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	3332      	adds	r3, #50	; 0x32
 8003f26:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f28:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f32:	441e      	add	r6, r3
 8003f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f36:	4618      	mov	r0, r3
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	1894      	adds	r4, r2, r2
 8003f42:	603c      	str	r4, [r7, #0]
 8003f44:	415b      	adcs	r3, r3
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f4c:	1812      	adds	r2, r2, r0
 8003f4e:	eb41 0303 	adc.w	r3, r1, r3
 8003f52:	f04f 0400 	mov.w	r4, #0
 8003f56:	f04f 0500 	mov.w	r5, #0
 8003f5a:	00dd      	lsls	r5, r3, #3
 8003f5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f60:	00d4      	lsls	r4, r2, #3
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	eb12 0a00 	adds.w	sl, r2, r0
 8003f6a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	008b      	lsls	r3, r1, #2
 8003f82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f86:	0082      	lsls	r2, r0, #2
 8003f88:	4650      	mov	r0, sl
 8003f8a:	4659      	mov	r1, fp
 8003f8c:	f7fc f91c 	bl	80001c8 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003f96:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2164      	movs	r1, #100	; 0x64
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	3332      	adds	r3, #50	; 0x32
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <UART_SetConfig+0x38c>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4432      	add	r2, r6
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	377c      	adds	r7, #124	; 0x7c
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	51eb851f 	.word	0x51eb851f

08003fd4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b20      	ldr	r3, [pc, #128]	; (8004074 <FSMC_NORSRAM_Init+0xa0>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003ffe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004004:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800400a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004010:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004016:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800401c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004022:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004028:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800402e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004034:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800403a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004040:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d103      	bne.n	8004058 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	fff00080 	.word	0xfff00080

08004078 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004092:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800409a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80040a6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80040ae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80040b6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	3b01      	subs	r3, #1
 80040be:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80040c0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	3b02      	subs	r3, #2
 80040c8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80040ca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80040d0:	4313      	orrs	r3, r2
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6979      	ldr	r1, [r7, #20]
 80040e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410c:	d122      	bne.n	8004154 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004116:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800411c:	4013      	ands	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800412a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004132:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800413a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004140:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004152:	e005      	b.n	8004160 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800415c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	cff00000 	.word	0xcff00000

08004174 <__libc_init_array>:
 8004174:	b570      	push	{r4, r5, r6, lr}
 8004176:	4d0d      	ldr	r5, [pc, #52]	; (80041ac <__libc_init_array+0x38>)
 8004178:	4c0d      	ldr	r4, [pc, #52]	; (80041b0 <__libc_init_array+0x3c>)
 800417a:	1b64      	subs	r4, r4, r5
 800417c:	10a4      	asrs	r4, r4, #2
 800417e:	2600      	movs	r6, #0
 8004180:	42a6      	cmp	r6, r4
 8004182:	d109      	bne.n	8004198 <__libc_init_array+0x24>
 8004184:	4d0b      	ldr	r5, [pc, #44]	; (80041b4 <__libc_init_array+0x40>)
 8004186:	4c0c      	ldr	r4, [pc, #48]	; (80041b8 <__libc_init_array+0x44>)
 8004188:	f000 f820 	bl	80041cc <_init>
 800418c:	1b64      	subs	r4, r4, r5
 800418e:	10a4      	asrs	r4, r4, #2
 8004190:	2600      	movs	r6, #0
 8004192:	42a6      	cmp	r6, r4
 8004194:	d105      	bne.n	80041a2 <__libc_init_array+0x2e>
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	f855 3b04 	ldr.w	r3, [r5], #4
 800419c:	4798      	blx	r3
 800419e:	3601      	adds	r6, #1
 80041a0:	e7ee      	b.n	8004180 <__libc_init_array+0xc>
 80041a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a6:	4798      	blx	r3
 80041a8:	3601      	adds	r6, #1
 80041aa:	e7f2      	b.n	8004192 <__libc_init_array+0x1e>
 80041ac:	08004204 	.word	0x08004204
 80041b0:	08004204 	.word	0x08004204
 80041b4:	08004204 	.word	0x08004204
 80041b8:	08004208 	.word	0x08004208

080041bc <memset>:
 80041bc:	4402      	add	r2, r0
 80041be:	4603      	mov	r3, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <_init>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr

080041d8 <_fini>:
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	bf00      	nop
 80041dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041de:	bc08      	pop	{r3}
 80041e0:	469e      	mov	lr, r3
 80041e2:	4770      	bx	lr
